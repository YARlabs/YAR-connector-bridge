{
  "address": "0x4992E252Ff1A7c9544b58DBbd82Ca408a24B8Ca2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_chainName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isProxyChain",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_contractOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_diamondCutFacet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initializationContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "InitializationFunctionReverted",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x636dfdf4dc4fa1ddfbe5ebf73add32c9bbfcb34f5dff08dd1d7bc4fffd6ced3f",
  "receipt": {
    "to": null,
    "from": "0xF66468335Ee9D5a5B9296fA653fa47348B57e754",
    "contractAddress": "0x4992E252Ff1A7c9544b58DBbd82Ca408a24B8Ca2",
    "transactionIndex": 2,
    "gasUsed": "303804",
    "logsBloom": "0x
    "blockHash": "0x03be2bbf7254f804388b8cb2b3de5398f43c0f4b5de303318195d628e6f2a781",
    "transactionHash": "0x636dfdf4dc4fa1ddfbe5ebf73add32c9bbfcb34f5dff08dd1d7bc4fffd6ced3f",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 26916239,
        "transactionHash": "0x636dfdf4dc4fa1ddfbe5ebf73add32c9bbfcb34f5dff08dd1d7bc4fffd6ced3f",
        "address": "0x4992E252Ff1A7c9544b58DBbd82Ca408a24B8Ca2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f66468335ee9d5a5b9296fa653fa47348b57e754"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x03be2bbf7254f804388b8cb2b3de5398f43c0f4b5de303318195d628e6f2a781"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 26916239,
        "transactionHash": "0x636dfdf4dc4fa1ddfbe5ebf73add32c9bbfcb34f5dff08dd1d7bc4fffd6ced3f",
        "address": "0x4992E252Ff1A7c9544b58DBbd82Ca408a24B8Ca2",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b1205da599c346e599784be5d9241d79d440c9a40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000011f931c1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x03be2bbf7254f804388b8cb2b3de5398f43c0f4b5de303318195d628e6f2a781"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 26916239,
        "transactionHash": "0x636dfdf4dc4fa1ddfbe5ebf73add32c9bbfcb34f5dff08dd1d7bc4fffd6ced3f",
        "address": "0x4992E252Ff1A7c9544b58DBbd82Ca408a24B8Ca2",
        "topics": [
          "0x8438f2d7dc7b39a7670005cc6ec64d6ecec8b57e53eb47c5085021aa7d86653d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f66468335ee9d5a5b9296fa653fa47348b57e754"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x03be2bbf7254f804388b8cb2b3de5398f43c0f4b5de303318195d628e6f2a781"
      }
    ],
    "blockNumber": 26916239,
    "cumulativeGasUsed": "346193",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BINANCE",
    false,
    "0xF66468335Ee9D5a5B9296fA653fa47348B57e754",
    "0xb1205Da599C346E599784BE5d9241D79D440C9A4",
    "0xF66468335Ee9D5a5B9296fA653fa47348B57e754"
  ],
  "numDeployments": 1,
  "solcInputHash": "08541191232a20d41dd2483aa4db3f2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isProxyChain\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_diamondCutFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal_bridge/UniversalBridgeDiamond.sol\":\"UniversalBridgeDiamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/diamond_base/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { LibDiamond } from \\\"./libraries/LibDiamond.sol\\\";\\r\\nimport { IDiamondCut } from \\\"./interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\ncontract Diamond {    \\r\\n    constructor(address _contractOwner, address _diamondCutFacet) payable {        \\r\\n        LibDiamond.setContractOwner(_contractOwner);\\r\\n\\r\\n        // Add the diamondCut external function from the diamondCutFacet\\r\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\r\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\r\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\r\\n        cut[0] = IDiamondCut.FacetCut({\\r\\n            facetAddress: _diamondCutFacet, \\r\\n            action: IDiamondCut.FacetCutAction.Add, \\r\\n            functionSelectors: functionSelectors\\r\\n        });\\r\\n        LibDiamond.diamondCut(cut, address(0), \\\"\\\");        \\r\\n    }\\r\\n\\r\\n    // Find facet for function that is called and execute the\\r\\n    // function if a facet is found and return any value.\\r\\n    fallback() external payable {\\r\\n        LibDiamond.DiamondStorage storage ds;\\r\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\r\\n        // get diamond storage\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n        // get facet from function selector\\r\\n        address facet = address(bytes20(ds.facets[msg.sig]));\\r\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\r\\n        // Execute external function from facet using delegatecall and return any value.\\r\\n        assembly {\\r\\n            // copy function selector and any arguments\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            // execute function call using the facet\\r\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\r\\n            // get any return value\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            // return any return value or error back to the caller\\r\\n            switch result\\r\\n                case 0 {\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n                default {\\r\\n                    return(0, returndatasize())\\r\\n                }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x6c817c5f28dd814fddb67ba2c7835ad7c62c2c769f1124e262950e91a8f4a138\",\"license\":\"UNLICENSED\"},\"contracts/diamond_base/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\",\"keccak256\":\"0x59a77a62405fbd58832187b294c0b415cff5c0fc84edf3162915b24a00eb07a2\",\"license\":\"UNLICENSED\"},\"contracts/diamond_base/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n\\r\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\r\\n// The loupe functions are required by the EIP2535 Diamonds standard\\r\\n\\r\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\r\\n\\r\\nlibrary LibDiamond {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selectors to the facets that execute the functions.\\r\\n        // and maps the selectors to their position in the selectorSlots array.\\r\\n        // func selector => address facet, selector position\\r\\n        mapping(bytes4 => bytes32) facets;\\r\\n        // array of slots of function selectors.\\r\\n        // each slot holds 8 function selectors.\\r\\n        mapping(uint256 => bytes32) selectorSlots;\\r\\n        // The number of function selectors in selectorSlots\\r\\n        uint16 selectorCount;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\r\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    // This code is almost the same as the external diamondCut,\\r\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\r\\n    // 'Facet[] calldata _diamondCut'.\\r\\n    // The code is duplicated to prevent copying calldata to memory which\\r\\n    // causes an error for a two dimensional array.\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        uint256 originalSelectorCount = ds.selectorCount;\\r\\n        uint256 selectorCount = originalSelectorCount;\\r\\n        bytes32 selectorSlot;\\r\\n        // Check if last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // get last selectorSlot\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\r\\n        }\\r\\n        // loop through diamond cut\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\r\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\r\\n                selectorCount,\\r\\n                selectorSlot,\\r\\n                _diamondCut[facetIndex].facetAddress,\\r\\n                _diamondCut[facetIndex].action,\\r\\n                _diamondCut[facetIndex].functionSelectors\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                facetIndex++;\\r\\n            }\\r\\n        }\\r\\n        if (selectorCount != originalSelectorCount) {\\r\\n            ds.selectorCount = uint16(selectorCount);\\r\\n        }\\r\\n        // If last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addReplaceRemoveFacetSelectors(\\r\\n        uint256 _selectorCount,\\r\\n        bytes32 _selectorSlot,\\r\\n        address _newFacetAddress,\\r\\n        IDiamondCut.FacetCutAction _action,\\r\\n        bytes4[] memory _selectors\\r\\n    ) internal returns (uint256, bytes32) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\r\\n                // add facet for selector\\r\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\r\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\r\\n                // clear selector position in slot and add selector\\r\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\r\\n                // if slot is full then write it to storage\\r\\n                if (selectorInSlotPosition == 224) {\\r\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\r\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n                _selectorCount++;\\r\\n\\r\\n                unchecked {\\r\\n                    selectorIndex++;\\r\\n                }\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                address oldFacetAddress = address(bytes20(oldFacet));\\r\\n                // only useful if immutable functions exist\\r\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\r\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\r\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\r\\n                // replace old facet address\\r\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\r\\n\\r\\n                unchecked {\\r\\n                    selectorIndex++;\\r\\n                }\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\r\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\r\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\r\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\r\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\r\\n                if (_selectorSlot == 0) {\\r\\n                    // get last selectorSlot\\r\\n                    selectorSlotCount--;\\r\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\r\\n                    selectorInSlotIndex = 7;\\r\\n                } else {\\r\\n                    selectorInSlotIndex--;\\r\\n                }\\r\\n                bytes4 lastSelector;\\r\\n                uint256 oldSelectorsSlotCount;\\r\\n                uint256 oldSelectorInSlotPosition;\\r\\n                // adding a block here prevents stack too deep error\\r\\n                {\\r\\n                    bytes4 selector = _selectors[selectorIndex];\\r\\n                    bytes32 oldFacet = ds.facets[selector];\\r\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\r\\n                    // only useful if immutable functions exist\\r\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\r\\n                    // replace selector with last selector in ds.facets\\r\\n                    // gets the last selector\\r\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\r\\n                    if (lastSelector != selector) {\\r\\n                        // update last selector slot position info\\r\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\r\\n                    }\\r\\n                    delete ds.facets[selector];\\r\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\r\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\r\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\r\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\r\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\r\\n                }\\r\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\r\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    oldSelectorSlot =\\r\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                    // update storage with the modified slot\\r\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\r\\n                } else {\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    _selectorSlot =\\r\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                }\\r\\n                if (selectorInSlotIndex == 0) {\\r\\n                    delete ds.selectorSlots[selectorSlotCount];\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    selectorIndex++;\\r\\n                }\\r\\n            }\\r\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\r\\n        } else {\\r\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\r\\n        }\\r\\n        return (_selectorCount, _selectorSlot);\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            return;\\r\\n        }\\r\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\r\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n        if (!success) {\\r\\n            if (error.length > 0) {\\r\\n                // bubble up error\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(error)\\r\\n                    revert(add(32, error), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert InitializationFunctionReverted(_init, _calldata);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7fca745d21eff0e2824b1211a84b9b2e2f3bfd629369449e9d380a1fece9550f\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/UniversalBridgeDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { Diamond } from \\\"../diamond_base/Diamond.sol\\\";\\r\\nimport { LibChainInfo } from \\\"./libraries/LibChainInfo.sol\\\";\\r\\nimport { LibValidatorController } from \\\"./libraries/LibValidatorController.sol\\\";\\r\\n\\r\\ncontract UniversalBridgeDiamond is Diamond {\\r\\n    constructor(\\r\\n        string memory _chainName,\\r\\n        bool _isProxyChain,\\r\\n        address _contractOwner,\\r\\n        address _diamondCutFacet,\\r\\n        address _validator\\r\\n    ) Diamond(_contractOwner, _diamondCutFacet) {\\r\\n        LibChainInfo.setChainName(_chainName);\\r\\n        LibChainInfo.setIsProxyChain(_isProxyChain);\\r\\n        LibValidatorController.setValidator(_validator);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x23104e928701931af219c76bff879c61159e80ec6dc7f21e2b02649616db1ff1\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/libraries/LibChainInfo.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary LibChainInfo {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"LibChainInfo.storage\\\");\\r\\n\\r\\n    struct ChainInfoStorage {\\r\\n        string chainName;\\r\\n        bool isProxyChain;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (ChainInfoStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function chainName() internal view returns (string memory) {\\r\\n        return diamondStorage().chainName;\\r\\n    }\\r\\n\\r\\n    function setChainName(string memory _chainName) internal {\\r\\n        diamondStorage().chainName = _chainName;\\r\\n    }\\r\\n\\r\\n    function isProxyChain() internal view returns (bool) {\\r\\n        return diamondStorage().isProxyChain;\\r\\n    }\\r\\n\\r\\n    function setIsProxyChain(bool _isProxyChain) internal {\\r\\n        diamondStorage().isProxyChain = _isProxyChain;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb7a0c465727f8625fb7ce43943cd130518ec7771505cf7a05d1d27494a46c8a6\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/libraries/LibValidatorController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary LibValidatorController {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"validatorController.storage\\\");\\r\\n\\r\\n    struct ValidatorControllerStorage {\\r\\n        address validator;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (ValidatorControllerStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event ValidatorTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function enforceIsValidator() internal view {\\r\\n        require(\\r\\n            msg.sender == diamondStorage().validator,\\r\\n            \\\"LibValidatorController: Must be validator\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setValidator(address _newValidator) internal {\\r\\n        ValidatorControllerStorage storage ds = diamondStorage();\\r\\n        address previousValidator = ds.validator;\\r\\n        ds.validator = _newValidator;\\r\\n        emit ValidatorTransferred(previousValidator, _newValidator);\\r\\n    }\\r\\n\\r\\n    function validator() internal view returns (address) {\\r\\n        return diamondStorage().validator;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fbcfd22ae4cac441cc2bc0f5fecbc21ef02a22d757d94068bc45ac4639b851e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234610e0e576110a48038038061001981610e51565b928339810160a082820312610e0e5781516001600160401b038111610e0e57820181601f82011215610e0e5780516001600160401b038111610cb757610068601f8201601f1916602001610e51565b9281845260208284010111610e0e576100879160208085019101610e76565b60208201518015158103610e0e576100a160408401610e99565b926100ba60806100b360608401610e99565b9201610e99565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132080546001600160a01b039687166001600160a01b03198216811790925591959091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a361012a610e32565b906001825260005b60208110610de65750610143610e32565b60018152602036818301376307e4c70760e21b61015f82610ead565b52610168610e13565b6001600160a01b03909216825260006020830152604082015261018a82610ead565b5261019481610ead565b5060405192602084016001600160401b03811185821017610cb75760405260008452600080516020611064833981519152549461ffff861693849560009760078116610dba575b50969194929590936000965b8151881015610a25576101fa8883610ed0565b51519660206102098a85610ed0565b510151966003881015610a0f5760406102228b86610ed0565b510151968096988851156109b657806103f8575050610288610242610e13565b602481527f4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20602082015263636f646560e01b60408201526001600160a01b038b16610f16565b6000955b87518710156103d8576001600160e01b03196102a8888a610ed0565b5116988960005260008051602061104483398151915260205260406000205460601c61036d57896000526000805160206110448339815191526020528160018060601b03198c60601b161760406000205560e090818360051b169a8b1c9063ffffffff60e01b8c1c1916179914610345575b600019811461032f576001968701960161028c565b634e487b7160e01b600052601160045260246000fd5b978860031c60005260008051602061108483398151915260205260406000205560009761031a565b60405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c72656164792065786973747300000000000000000000006064820152608490fd5b9a93979195509398975060019195505b98960196919490979295936101e7565b6001819d98999b9d9c9a9c14600014610626575050610462610418610e13565b602881527f4c69624469616d6f6e644375743a205265706c61636520666163657420686173602082015267206e6f20636f646560c01b60408201526001600160a01b038d16610f16565b60005b8951811015610612576001600160e01b0319610481828c610ed0565b511690816000526000805160206110448339815191526020526040600020548060601c3081146105b5576001600160a01b038f16811461055c571561050357600092835260008051602061104483398151915260205260409092206001600160601b039290921660608e901b6001600160601b03191617909155600101610465565b60405162461bcd60e51b8152602060048201526038602482015260008051602061102483398151915260448201527f6374696f6e207468617420646f65736e277420657869737400000000000000006064820152608490fd5b60405162461bcd60e51b8152602060048201526038602482015260008051602061102483398151915260448201527f6374696f6e20776974682073616d652066756e6374696f6e00000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60448201526e3aba30b1363290333ab731ba34b7b760891b6064820152608490fd5b5093989094929697506001919599506103e8565b600291999b98509b9196999b14600014610961576001600160a01b03166108f6579560078160039796971c9116946000955b8b518710156108c557816108b057505061067190610f09565b9586600052600080516020611084833981519152602052604060002054956007955b6001600160e01b03196106a6828e610ed0565b5116806000526000805160206110448339815191526020526040600020548060601c80156108455730146107e95763ffffffff60e01b8a8a60051b1b16918083036107b0575b60009081526000805160206110448339815191526020526040812055600381901c611fff168b811461078d5760005260008051602061108483398151915260205260e06040600020549160051b1691821c9163ffffffff60e01b901c1916176040600020555b8615610768575b60010195979197969096610658565b6000898152600080516020611084833981519152602052604081208190559750610759565b5060e09060059a92939a1b1691821c9163ffffffff60e01b901c19161796610752565b60008381526000805160206110448339815191526020526040902080546001600160601b0319166001600160601b0384161790556106ec565b60405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b6064820152608490fd5b60405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e27742065786973740000000000000000006064820152608490fd5b6108bf90989298979197610f09565b95610693565b9192969499989397955099508160031b918083046008149015171561032f57810180911161032f57600190986103e8565b60405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d7573742062652061646472657373283029000000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b6064820152608490fd5b634e487b7160e01b600052602160045260246000fd5b9492869489938103610d8a575b60078116610d65575b505060405191606083016060845282518091526080840190602060808260051b8701019401916000905b828210610ccd575050505091610aac81927f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67394600060208501528382036040850152610ee4565b0390a182516001600160401b038111610cb7577f1ac0c65048e05abc6ec58fabb62503cd4926ef6a22676f8a0942f241754a9ba5908154600181811c91168015610cad575b6020821014610c9757601f8111610c4f575b50602094601f8211600114610be957948192939495600092610bde575b50508160011b916000199060031b1c19161790555b7f1ac0c65048e05abc6ec58fabb62503cd4926ef6a22676f8a0942f241754a9ba6805460ff191660ff921515929092169190911790557f0d39ce5c7c188987150498f1f6b834805bd8d7ecf27e970807b2a7a1a520702380546001600160a01b039283166001600160a01b03198216811790925560405192167f8438f2d7dc7b39a7670005cc6ec64d6ecec8b57e53eb47c5085021aa7d86653d600080a360dc9081610f488239f35b015190508580610b20565b601f198216958360005260206000209160005b888110610c3757508360019596979810610c1e575b505050811b019055610b35565b015160001960f88460031b161c19169055858080610c11565b91926020600181928685015181550194019201610bfc565b826000526020600020601f830160051c81019160208410610c8d575b601f0160051c01905b818110610c815750610b03565b60008155600101610c74565b9091508190610c6b565b634e487b7160e01b600052602260045260246000fd5b90607f1690610af1565b634e487b7160e01b600052604160045260246000fd5b868603607f19018152835180516001600160a01b0316875260208101519496939492939192906003821015610a0f576040916020840152015190606060408201526020608060608301928451809452019201906000905b808210610d4257505050602080600192970192019201909291610a65565b82516001600160e01b031916845260209384019390920191600190910190610d24565b60031c6000526000805160206110848339815191526020526040600020558580610a3b565b61ffff811661ffff1960008051602061106483398151915254161760008051602061106483398151915255610a32565b611fff91985060031c1660005260008051602061108483398151915260205260406000205496386101db565b602090610df1610e13565b600081526000838201526060604082015282828601015201610132565b600080fd5b60405190606082016001600160401b03811183821017610cb757604052565b60408051919082016001600160401b03811183821017610cb757604052565b6040519190601f01601f191682016001600160401b03811183821017610cb757604052565b60005b838110610e895750506000910152565b8181015183820152602001610e79565b51906001600160a01b0382168203610e0e57565b805115610eba5760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015610eba5760209160051b010190565b90602091610efd81518092818552858086019101610e76565b601f01601f1916010190565b801561032f576000190190565b3b15610f1f5750565b60405162461bcd60e51b815260206004820152908190610f43906024830190610ee4565b0390fdfe6080604052361560a457600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602052604081205460601c8015606657818091368280378136915af43d82803e156062573d90f35b3d90fd5b62461bcd60e51b6080526020608452602060a4527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460c45260646080fd5b00fea2646970667358221220d07063da0802fb869a2228630073d1b541e6e1aa3d9744ec9e09c97712b3bf7b64736f6c634300081100334c69624469616d6f6e644375743a2043616e2774207265706c6163652066756ec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131cc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131ec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d",
  "deployedBytecode": "0x6080604052361560a457600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602052604081205460601c8015606657818091368280378136915af43d82803e156062573d90f35b3d90fd5b62461bcd60e51b6080526020608452602060a4527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460c45260646080fd5b00fea2646970667358221220d07063da0802fb869a2228630073d1b541e6e1aa3d9744ec9e09c97712b3bf7b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}