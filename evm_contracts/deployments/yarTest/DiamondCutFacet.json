{
  "address": "0x3540C8b74695AA4340a329427C733842F40f2CE4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initializationContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "InitializationFunctionReverted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x54f8b00ea60ffe148baac02e0c4a9789b32cd6bcadcf1775dc6b62acf1c7717a",
  "receipt": {
    "to": null,
    "from": "0xF66468335Ee9D5a5B9296fA653fa47348B57e754",
    "contractAddress": "0x3540C8b74695AA4340a329427C733842F40f2CE4",
    "transactionIndex": 0,
    "gasUsed": "927492",
    "logsBloom": "0x
    "blockHash": "0x5dcb2f1ccca616f9d1d385b4f8fc5fe4d946555f19a10251177fe4a9c772a4c9",
    "transactionHash": "0x54f8b00ea60ffe148baac02e0c4a9789b32cd6bcadcf1775dc6b62acf1c7717a",
    "logs": [],
    "blockNumber": 9235,
    "cumulativeGasUsed": "927492",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "08541191232a20d41dd2483aa4db3f2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamond_base/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/diamond_base/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\r\\n\\r\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\r\\n// The loupe functions are required by the EIP2535 Diamonds standard\\r\\n\\r\\ncontract DiamondCutFacet is IDiamondCut {\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external override {\\r\\n        LibDiamond.enforceIsContractOwner();\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        uint256 originalSelectorCount = ds.selectorCount;\\r\\n        uint256 selectorCount = originalSelectorCount;\\r\\n        bytes32 selectorSlot;\\r\\n        // Check if last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // get last selectorSlot\\r\\n            // \\\"selectorCount >> 3\\\" is a gas efficient division by 8 \\\"selectorCount / 8\\\"\\r\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\r\\n        }\\r\\n        // loop through diamond cut\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\r\\n            (selectorCount, selectorSlot) = LibDiamond.addReplaceRemoveFacetSelectors(\\r\\n                selectorCount,\\r\\n                selectorSlot,\\r\\n                _diamondCut[facetIndex].facetAddress,\\r\\n                _diamondCut[facetIndex].action,\\r\\n                _diamondCut[facetIndex].functionSelectors\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                facetIndex++;\\r\\n            }\\r\\n        }\\r\\n        if (selectorCount != originalSelectorCount) {\\r\\n            ds.selectorCount = uint16(selectorCount);\\r\\n        }\\r\\n        // If last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // \\\"selectorCount >> 3\\\" is a gas efficient division by 8 \\\"selectorCount / 8\\\"\\r\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        LibDiamond.initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xeba588c12bad1e154a64fce89f2da62c0535862f7ac3fb4ea2c5cbf5f67329a6\",\"license\":\"UNLICENSED\"},\"contracts/diamond_base/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\",\"keccak256\":\"0x59a77a62405fbd58832187b294c0b415cff5c0fc84edf3162915b24a00eb07a2\",\"license\":\"UNLICENSED\"},\"contracts/diamond_base/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n\\r\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\r\\n// The loupe functions are required by the EIP2535 Diamonds standard\\r\\n\\r\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\r\\n\\r\\nlibrary LibDiamond {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selectors to the facets that execute the functions.\\r\\n        // and maps the selectors to their position in the selectorSlots array.\\r\\n        // func selector => address facet, selector position\\r\\n        mapping(bytes4 => bytes32) facets;\\r\\n        // array of slots of function selectors.\\r\\n        // each slot holds 8 function selectors.\\r\\n        mapping(uint256 => bytes32) selectorSlots;\\r\\n        // The number of function selectors in selectorSlots\\r\\n        uint16 selectorCount;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\r\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    // This code is almost the same as the external diamondCut,\\r\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\r\\n    // 'Facet[] calldata _diamondCut'.\\r\\n    // The code is duplicated to prevent copying calldata to memory which\\r\\n    // causes an error for a two dimensional array.\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        uint256 originalSelectorCount = ds.selectorCount;\\r\\n        uint256 selectorCount = originalSelectorCount;\\r\\n        bytes32 selectorSlot;\\r\\n        // Check if last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // get last selectorSlot\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\r\\n        }\\r\\n        // loop through diamond cut\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\r\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\r\\n                selectorCount,\\r\\n                selectorSlot,\\r\\n                _diamondCut[facetIndex].facetAddress,\\r\\n                _diamondCut[facetIndex].action,\\r\\n                _diamondCut[facetIndex].functionSelectors\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                facetIndex++;\\r\\n            }\\r\\n        }\\r\\n        if (selectorCount != originalSelectorCount) {\\r\\n            ds.selectorCount = uint16(selectorCount);\\r\\n        }\\r\\n        // If last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addReplaceRemoveFacetSelectors(\\r\\n        uint256 _selectorCount,\\r\\n        bytes32 _selectorSlot,\\r\\n        address _newFacetAddress,\\r\\n        IDiamondCut.FacetCutAction _action,\\r\\n        bytes4[] memory _selectors\\r\\n    ) internal returns (uint256, bytes32) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\r\\n                // add facet for selector\\r\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\r\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\r\\n                // clear selector position in slot and add selector\\r\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\r\\n                // if slot is full then write it to storage\\r\\n                if (selectorInSlotPosition == 224) {\\r\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\r\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n                _selectorCount++;\\r\\n\\r\\n                unchecked {\\r\\n                    selectorIndex++;\\r\\n                }\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                address oldFacetAddress = address(bytes20(oldFacet));\\r\\n                // only useful if immutable functions exist\\r\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\r\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\r\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\r\\n                // replace old facet address\\r\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\r\\n\\r\\n                unchecked {\\r\\n                    selectorIndex++;\\r\\n                }\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\r\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\r\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\r\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\r\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\r\\n                if (_selectorSlot == 0) {\\r\\n                    // get last selectorSlot\\r\\n                    selectorSlotCount--;\\r\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\r\\n                    selectorInSlotIndex = 7;\\r\\n                } else {\\r\\n                    selectorInSlotIndex--;\\r\\n                }\\r\\n                bytes4 lastSelector;\\r\\n                uint256 oldSelectorsSlotCount;\\r\\n                uint256 oldSelectorInSlotPosition;\\r\\n                // adding a block here prevents stack too deep error\\r\\n                {\\r\\n                    bytes4 selector = _selectors[selectorIndex];\\r\\n                    bytes32 oldFacet = ds.facets[selector];\\r\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\r\\n                    // only useful if immutable functions exist\\r\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\r\\n                    // replace selector with last selector in ds.facets\\r\\n                    // gets the last selector\\r\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\r\\n                    if (lastSelector != selector) {\\r\\n                        // update last selector slot position info\\r\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\r\\n                    }\\r\\n                    delete ds.facets[selector];\\r\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\r\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\r\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\r\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\r\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\r\\n                }\\r\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\r\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    oldSelectorSlot =\\r\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                    // update storage with the modified slot\\r\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\r\\n                } else {\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    _selectorSlot =\\r\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                }\\r\\n                if (selectorInSlotIndex == 0) {\\r\\n                    delete ds.selectorSlots[selectorSlotCount];\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    selectorIndex++;\\r\\n                }\\r\\n            }\\r\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\r\\n        } else {\\r\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\r\\n        }\\r\\n        return (_selectorCount, _selectorSlot);\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            return;\\r\\n        }\\r\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\r\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n        if (!success) {\\r\\n            if (error.length > 0) {\\r\\n                // bubble up error\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(error)\\r\\n                    revert(add(32, error), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert InitializationFunctionReverted(_init, _calldata);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7fca745d21eff0e2824b1211a84b9b2e2f3bfd629369449e9d380a1fece9550f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610fd0908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c631f931c1c1461002857600080fd5b3461034d57606036600319011261034d5767ffffffffffffffff6004351161034d5736602360043501121561034d5767ffffffffffffffff600435600401351161034d573660246004356004013560051b60043501011161034d576024356001600160a01b038116900361034d5767ffffffffffffffff6044351161034d5736602360443501121561034d5767ffffffffffffffff604435600401351161034d573660246044356004013560443501011161034d577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b03163303610cda577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e5461ffff81168060009260078116610cae575b5060005b6004356004013581106103cb57508103610377575b60078116610352575b50506040516060810160608252600435600401359052608081019060806004356004013560051b820101916024600435019060005b60043560040135811061025d5761025b856000867f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67360209160018060a01b0360243516838201528085036040820152604435600401358552828160246044350196604435600401358884830137600460443501358181018401889052601f01601f191601030190a161023861023360443560040135610dd0565b610d95565b600460443501358082529093828501376044356004013583010152602435610e4d565b005b909193607f19848203018352843560821960043536030181121561034d576004350160248101356001600160a01b0381169081900361034d5782526044810135600381101561034d57602083015260648101356042198236030181121561034d57019067ffffffffffffffff60248301351161034d57602482013560051b3603604483011361034d57806060604060809301526060810160248401359052019060448101906000905b6024810135821061032557505050602080600192960193019101610199565b90919260208060019263ffffffff60e01b61033f88610dbb565b168152019401920190610306565b600080fd5b60031c600052600080516020610f7b8339815191526020526040600020558080610164565b61ffff811661ffff197fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e5416177fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e5561015b565b916103e58360049593953560040135602460043501610d27565b35906001600160a01b038216820361034d57602061040f8560043560040135602460043501610d27565b0135600381101561034d576104308560043560040135602460043501610d27565b91601e19833603016040840135121561034d5767ffffffffffffffff60408401358401351161034d5760408301358301803560051b360360209091011361034d576104876020604085013585013560051b01610d95565b6040840135840180358083529194916020808701923660059390931b01011161034d5760206040830135830101905b60408301358301803560051b016020018210610c9657505050809491835115610c3d578061068e575050926105296104ec610d5f565b602481527f4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20602082015263636f646560e01b604082015284610f2d565b6000935b825185101561067c576001600160e01b03196105498685610df9565b511680600052600080516020610f5b83398151915260205260406000205460601c6106195780600052600080516020610f5b833981519152602052826001600160601b03198660601b161760406000205560e08360051b161c9063ffffffff60e01b60e08460051b161c1916179060e0808260051b16146105f1575b60001981146105db57600194850194019061052d565b634e487b7160e01b600052601160045260246000fd5b908160031c600052600080516020610f7b8339815191526020526040600020556000906105c5565b60405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b6064820152608490fd5b9150949250600191505b939201610146565b9396919592949293600181036108c15750506106ec6106ab610d5f565b602881527f4c69624469616d6f6e644375743a205265706c61636520666163657420686173602082015267206e6f20636f646560c01b604082015287610f2d565b60005b84518110156108b3576001600160e01b031961070b8287610df9565b51169081600052600080516020610f5b8339815191526020526040600020548060601c308114610856576001600160a01b038a1681146107eb571561078057600192600052600080516020610f5b8339815191526020526001600160601b0380198a60601b16911617604060002055016106ef565b60405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e207468617420646f65736e277420657869737400000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e00000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602f60248201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60448201526e3aba30b1363290333ab731ba34b7b760891b6064820152608490fd5b509250935091600190610686565b600291949693509691949614600014610be8576001600160a01b0316610b84579060078160031c9116916000925b8651841015610b595781610b4657505061090890610dec565b9081600052600080516020610f7b833981519152602052604060002054906007905b6001600160e01b031961093d8289610df9565b511680600052600080516020610f5b8339815191526020526040600020548060601c8015610adb573014610a7f5763ffffffff60e01b858560051b1b1691808303610a43575b6000908152600080516020610f5b8339815191526020526040812055600381901c611fff16868114610a2057600052600080516020610f7b83398151915260205260e06040600020549160051b1691821c9163ffffffff60e01b901c1916176040600020555b81156109fb575b6001019291906108ef565b6000848152600080516020610f7b8339815191526020526040812081905592506109f0565b5060e0906005959293951b1691821c9163ffffffff60e01b901c191617916109e9565b82600052600080516020610f5b8339815191526020526001600160601b0319604060002054166001600160601b03831617604060002055610983565b60405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b6064820152608490fd5b60405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e27742065786973740000000000000000006064820152608490fd5b610b539093919293610dec565b9061092a565b91925094508160031b91808304600814901517156105db5780820182116105db576001910193610686565b60405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b6064820152608490fd5b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b6064820152608490fd5b60208091610ca384610dbb565b8152019101906104b6565b611fff91935060031c16600052600080516020610f7b8339815191526020526040600020549183610142565b62461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b6064820152608490fd5b9190811015610d495760051b81013590605e198136030182121561034d570190565b634e487b7160e01b600052603260045260246000fd5b604051906060820182811067ffffffffffffffff821117610d7f57604052565b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff811183821017610d7f57604052565b35906001600160e01b03198216820361034d57565b67ffffffffffffffff8111610d7f57601f01601f191660200190565b80156105db576000190190565b8051821015610d495760209160051b010190565b919082519283825260005b848110610e39575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610e18565b6001600160a01b03811691908215610f285760008091610eaf610e6e610d5f565b602881527f4c69624469616d6f6e644375743a205f696e6974206164647265737320686173602082015267206e6f20636f646560c01b604082015282610f2d565b83519060208501905af4913d15610f20573d92610ece61023385610dd0565b9384523d6000602086013e5b15610ee457505050565b825115610ef357825160208401fd5b610f1c60405192839263192105d760e01b84526004840152604060248401526044830190610e0d565b0390fd5b606092610eda565b505050565b3b15610f365750565b60405162461bcd60e51b815260206004820152908190610f1c906024830190610e0d56fec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131cc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131da2646970667358221220403e777668cfd434e70ca7bfbe8875f8e99daa7f9a24f75cb7b059fa51d206be64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}