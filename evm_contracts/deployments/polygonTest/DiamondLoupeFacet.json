{
  "address": "0x7210147ca51315238Ad7be5C7921a3Da6613AB17",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "_facetFunctionSelectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d40c662042f91f1748bf792972925dfbde5307600e3ab687523e97a8bbb290e",
  "receipt": {
    "to": null,
    "from": "0xF66468335Ee9D5a5B9296fA653fa47348B57e754",
    "contractAddress": "0x7210147ca51315238Ad7be5C7921a3Da6613AB17",
    "transactionIndex": 4,
    "gasUsed": "621821",
    "logsBloom": "0x
    "blockHash": "0x34e0245163f8f907c527f29a7990888bf3f88f7f94f041434c203060fff0166d",
    "transactionHash": "0x6d40c662042f91f1748bf792972925dfbde5307600e3ab687523e97a8bbb290e",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 31691846,
        "transactionHash": "0x6d40c662042f91f1748bf792972925dfbde5307600e3ab687523e97a8bbb290e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f66468335ee9d5a5b9296fa653fa47348b57e754",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000036147d852a880000000000000000000000000000000000000000000000000033771cbc5ec2df4000000000000000000000000000000000000000000002995eecc70633260572f00000000000000000000000000000000000000000000000003341083ed998574000000000000000000000000000000000000000000002995eecfd1ab0ab2ffaf",
        "logIndex": 9,
        "blockHash": "0x34e0245163f8f907c527f29a7990888bf3f88f7f94f041434c203060fff0166d"
      }
    ],
    "blockNumber": 31691846,
    "cumulativeGasUsed": "818758",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "08541191232a20d41dd2483aa4db3f2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_facetFunctionSelectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"_facetFunctionSelectors\":\"The selectors associated with a facet address.\"}},\"facets()\":{\"returns\":{\"facets_\":\"Facet\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors supported by a specific facet.\"},\"facets()\":{\"notice\":\"Gets all facets and their selectors.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamond_base/facets/DiamondLoupeFacet.sol\":\"DiamondLoupeFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/diamond_base/facets/DiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { LibDiamond } from  \\\"../libraries/LibDiamond.sol\\\";\\r\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\r\\nimport { IERC165 } from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\n\\r\\n// The functions in DiamondLoupeFacet MUST be added to a diamond.\\r\\n// The EIP-2535 Diamond standard requires these functions\\r\\n\\r\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\r\\n    // Diamond Loupe Functions\\r\\n    ////////////////////////////////////////////////////////////////////\\r\\n    /// These functions are expected to be called frequently by tools.\\r\\n    //\\r\\n    // struct Facet {\\r\\n    //     address facetAddress;\\r\\n    //     bytes4[] functionSelectors;\\r\\n    // }\\r\\n    /// @notice Gets all facets and their selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external override view returns (Facet[] memory facets_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facets_ = new Facet[](ds.selectorCount);\\r\\n        uint16[] memory numFacetSelectors = new uint16[](ds.selectorCount);\\r\\n        uint256 numFacets;\\r\\n        uint256 selectorIndex;\\r\\n        // loop through function selectors\\r\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\r\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\r\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\r\\n                selectorIndex++;\\r\\n                if (selectorIndex > ds.selectorCount) {\\r\\n                    break;\\r\\n                }\\r\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\r\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\r\\n                bool continueLoop;\\r\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\r\\n                    if (facets_[facetIndex].facetAddress == facetAddress_) {\\r\\n                        facets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\\r\\n                        // probably will never have more than 256 functions from one facet contract\\r\\n                        require(numFacetSelectors[facetIndex] < 255);\\r\\n                        numFacetSelectors[facetIndex]++;\\r\\n                        continueLoop = true;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                if (continueLoop) {\\r\\n                    continue;\\r\\n                }\\r\\n                facets_[numFacets].facetAddress = facetAddress_;\\r\\n                facets_[numFacets].functionSelectors = new bytes4[](ds.selectorCount);\\r\\n                facets_[numFacets].functionSelectors[0] = selector;\\r\\n                numFacetSelectors[numFacets] = 1;\\r\\n                numFacets++;\\r\\n            }\\r\\n        }\\r\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\r\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\r\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\r\\n            // setting the number of selectors\\r\\n            assembly {\\r\\n                mstore(selectors, numSelectors)\\r\\n            }\\r\\n        }\\r\\n        // setting the number of facets\\r\\n        assembly {\\r\\n            mstore(facets_, numFacets)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all the function selectors supported by a specific facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return _facetFunctionSelectors The selectors associated with a facet address.\\r\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory _facetFunctionSelectors) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        uint256 numSelectors;\\r\\n        _facetFunctionSelectors = new bytes4[](ds.selectorCount);\\r\\n        uint256 selectorIndex;\\r\\n        // loop through function selectors\\r\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\r\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\r\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\r\\n                selectorIndex++;\\r\\n                if (selectorIndex > ds.selectorCount) {\\r\\n                    break;\\r\\n                }\\r\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\r\\n                address facet = address(bytes20(ds.facets[selector]));\\r\\n                if (_facet == facet) {\\r\\n                    _facetFunctionSelectors[numSelectors] = selector;\\r\\n                    numSelectors++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // Set the number of selectors in the array\\r\\n        assembly {\\r\\n            mstore(_facetFunctionSelectors, numSelectors)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetAddresses_ = new address[](ds.selectorCount);\\r\\n        uint256 numFacets;\\r\\n        uint256 selectorIndex;\\r\\n        // loop through function selectors\\r\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\r\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\r\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\r\\n                selectorIndex++;\\r\\n                if (selectorIndex > ds.selectorCount) {\\r\\n                    break;\\r\\n                }\\r\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\r\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\r\\n                bool continueLoop;\\r\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\r\\n                    if (facetAddress_ == facetAddresses_[facetIndex]) {\\r\\n                        continueLoop = true;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                if (continueLoop) {                    \\r\\n                    continue;\\r\\n                }\\r\\n                facetAddresses_[numFacets] = facetAddress_;\\r\\n                numFacets++;\\r\\n            }\\r\\n        }\\r\\n        // Set the number of facet addresses in the array\\r\\n        assembly {\\r\\n            mstore(facetAddresses_, numFacets)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        facetAddress_ = address(bytes20(ds.facets[_functionSelector]));\\r\\n    }\\r\\n\\r\\n    // This implements ERC-165.\\r\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n        return ds.supportedInterfaces[_interfaceId];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0112a426b78b1792e0c2c2b3f643fa6d59c6e7c4d134a201ef155ef8a5f5300b\",\"license\":\"UNLICENSED\"},\"contracts/diamond_base/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\",\"keccak256\":\"0x59a77a62405fbd58832187b294c0b415cff5c0fc84edf3162915b24a00eb07a2\",\"license\":\"UNLICENSED\"},\"contracts/diamond_base/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// A loupe is a small magnifying glass used to look at diamonds.\\r\\n// These functions look at diamonds\\r\\ninterface IDiamondLoupe {\\r\\n    /// These functions are expected to be called frequently\\r\\n    /// by tools.\\r\\n\\r\\n    struct Facet {\\r\\n        address facetAddress;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external view returns (Facet[] memory facets_);\\r\\n\\r\\n    /// @notice Gets all the function selectors supported by a specific facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return facetFunctionSelectors_\\r\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\r\\n}\",\"keccak256\":\"0xb4e8b24a4cf2060ad5b30651b923854793eb780255922fbbaa132929e1c62522\",\"license\":\"UNLICENSED\"},\"contracts/diamond_base/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n\\r\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\r\\n// The loupe functions are required by the EIP2535 Diamonds standard\\r\\n\\r\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\r\\n\\r\\nlibrary LibDiamond {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selectors to the facets that execute the functions.\\r\\n        // and maps the selectors to their position in the selectorSlots array.\\r\\n        // func selector => address facet, selector position\\r\\n        mapping(bytes4 => bytes32) facets;\\r\\n        // array of slots of function selectors.\\r\\n        // each slot holds 8 function selectors.\\r\\n        mapping(uint256 => bytes32) selectorSlots;\\r\\n        // The number of function selectors in selectorSlots\\r\\n        uint16 selectorCount;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\r\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    // This code is almost the same as the external diamondCut,\\r\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\r\\n    // 'Facet[] calldata _diamondCut'.\\r\\n    // The code is duplicated to prevent copying calldata to memory which\\r\\n    // causes an error for a two dimensional array.\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        uint256 originalSelectorCount = ds.selectorCount;\\r\\n        uint256 selectorCount = originalSelectorCount;\\r\\n        bytes32 selectorSlot;\\r\\n        // Check if last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // get last selectorSlot\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\r\\n        }\\r\\n        // loop through diamond cut\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\r\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\r\\n                selectorCount,\\r\\n                selectorSlot,\\r\\n                _diamondCut[facetIndex].facetAddress,\\r\\n                _diamondCut[facetIndex].action,\\r\\n                _diamondCut[facetIndex].functionSelectors\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                facetIndex++;\\r\\n            }\\r\\n        }\\r\\n        if (selectorCount != originalSelectorCount) {\\r\\n            ds.selectorCount = uint16(selectorCount);\\r\\n        }\\r\\n        // If last selector slot is not full\\r\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\" \\r\\n        if (selectorCount & 7 > 0) {\\r\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\r\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addReplaceRemoveFacetSelectors(\\r\\n        uint256 _selectorCount,\\r\\n        bytes32 _selectorSlot,\\r\\n        address _newFacetAddress,\\r\\n        IDiamondCut.FacetCutAction _action,\\r\\n        bytes4[] memory _selectors\\r\\n    ) internal returns (uint256, bytes32) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\r\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\r\\n                // add facet for selector\\r\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\r\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\r\\n                // clear selector position in slot and add selector\\r\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\r\\n                // if slot is full then write it to storage\\r\\n                if (selectorInSlotPosition == 224) {\\r\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\r\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n                _selectorCount++;\\r\\n\\r\\n                unchecked {\\r\\n                    selectorIndex++;\\r\\n                }\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\r\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\r\\n                bytes4 selector = _selectors[selectorIndex];\\r\\n                bytes32 oldFacet = ds.facets[selector];\\r\\n                address oldFacetAddress = address(bytes20(oldFacet));\\r\\n                // only useful if immutable functions exist\\r\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\r\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\r\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\r\\n                // replace old facet address\\r\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\r\\n\\r\\n                unchecked {\\r\\n                    selectorIndex++;\\r\\n                }\\r\\n            }\\r\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\r\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\r\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\r\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\r\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\" \\r\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\r\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\r\\n                if (_selectorSlot == 0) {\\r\\n                    // get last selectorSlot\\r\\n                    selectorSlotCount--;\\r\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\r\\n                    selectorInSlotIndex = 7;\\r\\n                } else {\\r\\n                    selectorInSlotIndex--;\\r\\n                }\\r\\n                bytes4 lastSelector;\\r\\n                uint256 oldSelectorsSlotCount;\\r\\n                uint256 oldSelectorInSlotPosition;\\r\\n                // adding a block here prevents stack too deep error\\r\\n                {\\r\\n                    bytes4 selector = _selectors[selectorIndex];\\r\\n                    bytes32 oldFacet = ds.facets[selector];\\r\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\r\\n                    // only useful if immutable functions exist\\r\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\r\\n                    // replace selector with last selector in ds.facets\\r\\n                    // gets the last selector\\r\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\r\\n                    if (lastSelector != selector) {\\r\\n                        // update last selector slot position info\\r\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\r\\n                    }\\r\\n                    delete ds.facets[selector];\\r\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\r\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\r\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\r\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\" \\r\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\r\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\r\\n                }\\r\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\r\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    oldSelectorSlot =\\r\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                    // update storage with the modified slot\\r\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\r\\n                } else {\\r\\n                    // clears the selector we are deleting and puts the last selector in its place.\\r\\n                    _selectorSlot =\\r\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\r\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\r\\n                }\\r\\n                if (selectorInSlotIndex == 0) {\\r\\n                    delete ds.selectorSlots[selectorSlotCount];\\r\\n                    _selectorSlot = 0;\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    selectorIndex++;\\r\\n                }\\r\\n            }\\r\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\r\\n        } else {\\r\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\r\\n        }\\r\\n        return (_selectorCount, _selectorSlot);\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            return;\\r\\n        }\\r\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\r\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n        if (!success) {\\r\\n            if (error.length > 0) {\\r\\n                // bubble up error\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(error)\\r\\n                    revert(add(32, error), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert InitializationFunctionReverted(_init, _calldata);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7fca745d21eff0e2824b1211a84b9b2e2f3bfd629369449e9d380a1fece9550f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610a48908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461007757806352ef6b2c1461006e5780637a0ed62714610065578063adfca15e1461005c5763cdffacc61461005457600080fd5b61000e610805565b5061000e6106b2565b5061000e6103b5565b5061000e610131565b3461000e576001600160e01b031961008e366100ca565b166000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f60205260ff60406000205416151560805260206080f35b602090600319011261000e576004356001600160e01b03198116810361000e5790565b6020908160408183019282815285518094520193019160005b828110610114575050505090565b83516001600160a01b031685529381019392810192600101610106565b503461000e576000806003193601126102fa5761017a6101737fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e5461ffff1690565b61ffff1690565b9061018482610915565b908080815b8582106101a557838552604051806101a187826100ed565b0390f35b6101d8816000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604060002090565b5483905b600882106101f5575b50506101f090610954565b610189565b91959396909261020490610954565b948186116102ed5761024261023c61022963ffffffff60e01b868860051b1b16610970565b546bffffffffffffffffffffffff191690565b60601c90565b886001600160a01b038216815b8481106102a4575b505061029957816102816102869261027261028c958a6109d5565b6001600160a01b039091169052565b610954565b93610954565b90969395919492946101dc565b509261028c90610954565b6102cd6102c16102b4838c6109d5565b516001600160a01b031690565b6001600160a01b031690565b82146102e1576102dc90610954565b61024f565b50505060013880610257565b94928197949692506101e5565b80fd5b602080820190808352835180925260409283810182858560051b840101960194600080935b86851061033457505050505050505090565b909192939480969798603f198382030186528951826060818885019360018060a01b038151168652015193888382015284518094520192019085905b8082106103915750505090806001929a019501950193969594929190610322565b82516001600160e01b03191684528a94938401939092019160019190910190610370565b503461000e576000806003193601126102fa576103f76101737fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e5461ffff1690565b6104008161089b565b9061040a81610915565b92809181825b828210610469575050505b81811061043357818352604051806101a185826102fd565b8061044f61017361044761046494886109d5565b5161ffff1690565b602061045b83876109d5565b51015152610954565b61041b565b61049c816000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604060002090565b5484905b600882106104b9575b50506104b490610954565b610410565b90939196926104ca90989598610954565b958287116106605763ffffffff60e01b828660051b1b166104f061023c61022983610970565b8a6001600160a01b038216815b8581106105a7575b505061059b57916105736105869261053461058c95610524858b6109d5565b516001600160a01b039091169052565b61056361054088610915565b6020908161054e878d6109d5565b51015261055b858b6109d5565b5101516109bf565b6001600160e01b03199091169052565b610281610580828a6109d5565b60019052565b94610954565b909794979691939592966104a0565b50509361058c90610954565b8a858a846105c96102c16105bb87856109d5565b51516001600160a01b031690565b146105df575050506105da90610954565b6104fd565b6106579550838095506106479361062161064294610563602061060861064e9a610447986109d5565b51015161061b61017361044788886109d5565b906109d5565b61063d60ff61ffff61063661044786866109d5565b16106109f7565b6109d5565b6109fe565b918b6109d5565b9061ffff169052565b60013880610505565b95929691939794976104a9565b6020908160408183019282815285518094520193019160005b828110610694575050505090565b83516001600160e01b03191685529381019392810192600101610686565b503461000e57602036600319011261000e576004356001600160a01b0381169081900361000e5760009061070b6101737fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e5461ffff1690565b9161071583610915565b918190825b85831061073257838552604051806101a1878261066d565b610765816000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604060002090565b546000905b60088210610783575b505061077e90610954565b61071a565b9196909592949361079390610954565b958187116107f75763ffffffff60e01b838260051b1b166107bc6102c161023c61022984610970565b87146107da575b506107cd90610954565b909691959394929561076a565b856102816107f0926105636107cd9599896109d5565b94906107c3565b819792509593949295610773565b503461000e57602061081e610819366100ca565b610970565b5460601c604051908152f35b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761086757604052565b61086f61082a565b604052565b60209067ffffffffffffffff811161088e575b60051b0190565b61089661082a565b610887565b906108ad6108a883610874565b610841565b82815280926108be601f1991610874565b0190600090815b8381106108d25750505050565b60209060408051908082019082821067ffffffffffffffff831117610908575b52848152826060818301528285010152016108c5565b61091061082a565b6108f2565b906109226108a883610874565b8281528092610933601f1991610874565b0190602036910137565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114610964570190565b61096c61093d565b0190565b63ffffffff60e01b166000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602052604060002090565b50634e487b7160e01b600052603260045260246000fd5b6020908051156109cd570190565b61096c6109a8565b60209181518110156109ea575b60051b010190565b6109f26109a8565b6109e2565b1561000e57565b60019061ffff80911690811461096457019056fea26469706673582212201706a700ef01a0fe306d21c00cddbf835db32aef7cdd53577cb08437f89d833464736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461007757806352ef6b2c1461006e5780637a0ed62714610065578063adfca15e1461005c5763cdffacc61461005457600080fd5b61000e610805565b5061000e6106b2565b5061000e6103b5565b5061000e610131565b3461000e576001600160e01b031961008e366100ca565b166000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f60205260ff60406000205416151560805260206080f35b602090600319011261000e576004356001600160e01b03198116810361000e5790565b6020908160408183019282815285518094520193019160005b828110610114575050505090565b83516001600160a01b031685529381019392810192600101610106565b503461000e576000806003193601126102fa5761017a6101737fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e5461ffff1690565b61ffff1690565b9061018482610915565b908080815b8582106101a557838552604051806101a187826100ed565b0390f35b6101d8816000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604060002090565b5483905b600882106101f5575b50506101f090610954565b610189565b91959396909261020490610954565b948186116102ed5761024261023c61022963ffffffff60e01b868860051b1b16610970565b546bffffffffffffffffffffffff191690565b60601c90565b886001600160a01b038216815b8481106102a4575b505061029957816102816102869261027261028c958a6109d5565b6001600160a01b039091169052565b610954565b93610954565b90969395919492946101dc565b509261028c90610954565b6102cd6102c16102b4838c6109d5565b516001600160a01b031690565b6001600160a01b031690565b82146102e1576102dc90610954565b61024f565b50505060013880610257565b94928197949692506101e5565b80fd5b602080820190808352835180925260409283810182858560051b840101960194600080935b86851061033457505050505050505090565b909192939480969798603f198382030186528951826060818885019360018060a01b038151168652015193888382015284518094520192019085905b8082106103915750505090806001929a019501950193969594929190610322565b82516001600160e01b03191684528a94938401939092019160019190910190610370565b503461000e576000806003193601126102fa576103f76101737fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e5461ffff1690565b6104008161089b565b9061040a81610915565b92809181825b828210610469575050505b81811061043357818352604051806101a185826102fd565b8061044f61017361044761046494886109d5565b5161ffff1690565b602061045b83876109d5565b51015152610954565b61041b565b61049c816000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604060002090565b5484905b600882106104b9575b50506104b490610954565b610410565b90939196926104ca90989598610954565b958287116106605763ffffffff60e01b828660051b1b166104f061023c61022983610970565b8a6001600160a01b038216815b8581106105a7575b505061059b57916105736105869261053461058c95610524858b6109d5565b516001600160a01b039091169052565b61056361054088610915565b6020908161054e878d6109d5565b51015261055b858b6109d5565b5101516109bf565b6001600160e01b03199091169052565b610281610580828a6109d5565b60019052565b94610954565b909794979691939592966104a0565b50509361058c90610954565b8a858a846105c96102c16105bb87856109d5565b51516001600160a01b031690565b146105df575050506105da90610954565b6104fd565b6106579550838095506106479361062161064294610563602061060861064e9a610447986109d5565b51015161061b61017361044788886109d5565b906109d5565b61063d60ff61ffff61063661044786866109d5565b16106109f7565b6109d5565b6109fe565b918b6109d5565b9061ffff169052565b60013880610505565b95929691939794976104a9565b6020908160408183019282815285518094520193019160005b828110610694575050505090565b83516001600160e01b03191685529381019392810192600101610686565b503461000e57602036600319011261000e576004356001600160a01b0381169081900361000e5760009061070b6101737fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e5461ffff1690565b9161071583610915565b918190825b85831061073257838552604051806101a1878261066d565b610765816000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604060002090565b546000905b60088210610783575b505061077e90610954565b61071a565b9196909592949361079390610954565b958187116107f75763ffffffff60e01b838260051b1b166107bc6102c161023c61022984610970565b87146107da575b506107cd90610954565b909691959394929561076a565b856102816107f0926105636107cd9599896109d5565b94906107c3565b819792509593949295610773565b503461000e57602061081e610819366100ca565b610970565b5460601c604051908152f35b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761086757604052565b61086f61082a565b604052565b60209067ffffffffffffffff811161088e575b60051b0190565b61089661082a565b610887565b906108ad6108a883610874565b610841565b82815280926108be601f1991610874565b0190600090815b8381106108d25750505050565b60209060408051908082019082821067ffffffffffffffff831117610908575b52848152826060818301528285010152016108c5565b61091061082a565b6108f2565b906109226108a883610874565b8281528092610933601f1991610874565b0190602036910137565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114610964570190565b61096c61093d565b0190565b63ffffffff60e01b166000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602052604060002090565b50634e487b7160e01b600052603260045260246000fd5b6020908051156109cd570190565b61096c6109a8565b60209181518110156109ea575b60051b010190565b6109f26109a8565b6109e2565b1561000e57565b60019061ffff80911690811461096457019056fea26469706673582212201706a700ef01a0fe306d21c00cddbf835db32aef7cdd53577cb08437f89d833464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "facetAddress(bytes4)": {
        "details": "If facet is not found return address(0).",
        "params": {
          "_functionSelector": "The function selector."
        },
        "returns": {
          "facetAddress_": "The facet address."
        }
      },
      "facetAddresses()": {
        "returns": {
          "facetAddresses_": "facetAddresses_"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "_facet": "The facet address."
        },
        "returns": {
          "_facetFunctionSelectors": "The selectors associated with a facet address."
        }
      },
      "facets()": {
        "returns": {
          "facets_": "Facet"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "facetAddress(bytes4)": {
        "notice": "Gets the facet that supports the given selector."
      },
      "facetAddresses()": {
        "notice": "Get all the facet addresses used by a diamond."
      },
      "facetFunctionSelectors(address)": {
        "notice": "Gets all the function selectors supported by a specific facet."
      },
      "facets()": {
        "notice": "Gets all facets and their selectors."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}