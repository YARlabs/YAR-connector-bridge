{
  "address": "0x2A188d20fba3660B7D96c78A2e6D3091b2B91bE7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuedTokenImplementation",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_regesteredChains",
          "type": "string[]"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x53cd32962c9dea71eb92148a070bf1f3fbf89dc34227c5a8adfe5e246df8e993",
  "receipt": {
    "to": null,
    "from": "0xF66468335Ee9D5a5B9296fA653fa47348B57e754",
    "contractAddress": "0x2A188d20fba3660B7D96c78A2e6D3091b2B91bE7",
    "transactionIndex": 10,
    "gasUsed": "155823",
    "logsBloom": "0x
    "blockHash": "0xd1b6620638d01f14ddf8e27a66328a06231f42b7d63c91e5a5d90fc4a184dfd3",
    "transactionHash": "0x53cd32962c9dea71eb92148a070bf1f3fbf89dc34227c5a8adfe5e246df8e993",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 31691864,
        "transactionHash": "0x53cd32962c9dea71eb92148a070bf1f3fbf89dc34227c5a8adfe5e246df8e993",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f66468335ee9d5a5b9296fa653fa47348b57e754",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000d4948dd5c051000000000000000000000000000000000000000000000000031e2ce3e0b9365b0000000000000000000000000000000000000000000019621822d851b0a22973000000000000000000000000000000000000000000000000031d584f52e3760a0000000000000000000000000000000000000000000019621823ace63e77e9c4",
        "logIndex": 38,
        "blockHash": "0xd1b6620638d01f14ddf8e27a66328a06231f42b7d63c91e5a5d90fc4a184dfd3"
      }
    ],
    "blockNumber": 31691864,
    "cumulativeGasUsed": "5284011",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "08541191232a20d41dd2483aa4db3f2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuedTokenImplementation\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_regesteredChains\",\"type\":\"string[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal_bridge/upgradeInitializers/ERC20DriverInit.sol\":\"ERC20DriverInit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/universal_bridge/interfaces/IIssuedToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IIssuedToken {\\r\\n    function initialize(\\r\\n        string memory _originalChainName,\\r\\n        string memory _originalTokenAddress,\\r\\n        string memory _originalTokenName,\\r\\n        string memory _originalTokenSymbol,\\r\\n        uint8 _originalTokenDecimals\\r\\n    ) external;\\r\\n\\r\\n    function getOriginalTokenInfo() external view returns (string memory, string memory);\\r\\n\\r\\n    function mint(address _recipient, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _from, uint256 _amount) external;\\r\\n\\r\\n    function permissionedTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3af511845f6d828ce5986be2ab8b474e7f6b5be24609f1b3b0ed64b6c9049d66\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/libraries/LibChainInfo.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary LibChainInfo {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"LibChainInfo.storage\\\");\\r\\n\\r\\n    struct ChainInfoStorage {\\r\\n        string chainName;\\r\\n        bool isProxyChain;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (ChainInfoStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function chainName() internal view returns (string memory) {\\r\\n        return diamondStorage().chainName;\\r\\n    }\\r\\n\\r\\n    function setChainName(string memory _chainName) internal {\\r\\n        diamondStorage().chainName = _chainName;\\r\\n    }\\r\\n\\r\\n    function isProxyChain() internal view returns (bool) {\\r\\n        return diamondStorage().isProxyChain;\\r\\n    }\\r\\n\\r\\n    function setIsProxyChain(bool _isProxyChain) internal {\\r\\n        diamondStorage().isProxyChain = _isProxyChain;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb7a0c465727f8625fb7ce43943cd130518ec7771505cf7a05d1d27494a46c8a6\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/libraries/LibERC20Driver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { ERC1967Proxy } from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { IIssuedToken } from \\\"../interfaces/IIssuedToken.sol\\\";\\r\\nimport { LibChainInfo } from \\\"./LibChainInfo.sol\\\";\\r\\n\\r\\nlibrary LibERC20Driver {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"LibERC20Driver.storage\\\");\\r\\n\\r\\n    struct ERC20DriverStorage {\\r\\n        uint256 initialBlockNumber;\\r\\n        address issuedTokenImplementation;\\r\\n        mapping(bytes32 => address) issuedTokenByTokenId;\\r\\n        mapping(address => bytes32) tokenIdByIssuedToken;\\r\\n        uint256 withdrawNonce;\\r\\n        uint256 crossTheBridgeNonce;\\r\\n        mapping(string => bool) registeredChains;\\r\\n        mapping(string => address) originalTokenAddressByString;\\r\\n        uint256 nonce;\\r\\n        mapping(string => mapping(uint256 => bool)) registeredExternalNoncesByChainName;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (ERC20DriverStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event ERC20DriverPublishedToken(\\r\\n        string originalChainName,\\r\\n        string originalTokenAddress,\\r\\n        bytes32 indexed tokenId,\\r\\n        address createdToken\\r\\n    );\\r\\n\\r\\n    struct TokenCreateInfo {\\r\\n        string tokenName;\\r\\n        string tokenSymbol;\\r\\n        uint8 tokenDecimals;\\r\\n    }\\r\\n\\r\\n    function balances(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress,\\r\\n        address _account\\r\\n    ) internal view returns (uint256) {\\r\\n        ERC20DriverStorage storage ds = diamondStorage();\\r\\n        LibChainInfo.ChainInfoStorage storage chainInfoStorage = LibChainInfo.diamondStorage();\\r\\n\\r\\n        bytes32 currentChainNameHash = keccak256(abi.encodePacked(chainInfoStorage.chainName));\\r\\n        bytes32 originalChainNameHash = keccak256(abi.encodePacked(_originalChainName));\\r\\n\\r\\n        address tokenInCurrentChain = currentChainNameHash == originalChainNameHash\\r\\n            ? ds.originalTokenAddressByString[_originalTokenAddress]\\r\\n            : getIssuedTokenAddress(_originalChainName, _originalTokenAddress);\\r\\n\\r\\n        if (tokenInCurrentChain != address(0)) {\\r\\n            return IERC20(tokenInCurrentChain).balanceOf(_account);\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function initialBlockNumber() internal view returns (uint256) {\\r\\n        return diamondStorage().initialBlockNumber;\\r\\n    }\\r\\n\\r\\n    function setChainRegistration(string calldata _chainName, bool _value) internal {\\r\\n        diamondStorage().registeredChains[_chainName] = _value;\\r\\n    }\\r\\n\\r\\n    function setIssuedTokenImplementation(address _issuedTokenImplementation) internal {\\r\\n        diamondStorage().issuedTokenImplementation = _issuedTokenImplementation;\\r\\n    }\\r\\n\\r\\n    function getTranferId(uint256 _nonce, string memory _initialChainName) internal pure returns(bytes32) {\\r\\n        return keccak256(abi.encodePacked(_nonce, _initialChainName));\\r\\n    }\\r\\n\\r\\n    function publishNewToken(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress,\\r\\n        TokenCreateInfo calldata _tokenCreateInfo\\r\\n    ) internal returns (address) {\\r\\n        // Connect to storage\\r\\n        ERC20DriverStorage storage ds = diamondStorage();\\r\\n\\r\\n        // Get token info\\r\\n        bytes32 tokenId = getTokenId(_originalChainName, _originalTokenAddress);\\r\\n        address issuedTokenAddress = ds.issuedTokenByTokenId[tokenId];\\r\\n\\r\\n        // Check already published\\r\\n        require(issuedTokenAddress == address(0), \\\"Token already published\\\");\\r\\n        // Check create data\\r\\n        require(!isEmptyTokenCreateInfo(_tokenCreateInfo), \\\"Not has token create info!\\\");\\r\\n\\r\\n        // Deploy new token\\r\\n        issuedTokenAddress = address(\\r\\n            new ERC1967Proxy(\\r\\n                ds.issuedTokenImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    IIssuedToken.initialize.selector,\\r\\n                    _originalChainName,\\r\\n                    _originalTokenAddress,\\r\\n                    _tokenCreateInfo.tokenName,\\r\\n                    _tokenCreateInfo.tokenSymbol,\\r\\n                    _tokenCreateInfo.tokenDecimals\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // Save token info to storage\\r\\n        ds.tokenIdByIssuedToken[issuedTokenAddress] = tokenId;\\r\\n        ds.issuedTokenByTokenId[tokenId] = issuedTokenAddress;\\r\\n        // Send event\\r\\n        emit ERC20DriverPublishedToken(\\r\\n            _originalChainName,\\r\\n            _originalTokenAddress,\\r\\n            tokenId,\\r\\n            issuedTokenAddress\\r\\n        );\\r\\n\\r\\n        return issuedTokenAddress;\\r\\n    }\\r\\n\\r\\n    function getIssuedTokenAddress(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress\\r\\n    ) internal view returns (address) {\\r\\n        bytes32 tokenId = getTokenId(_originalChainName, _originalTokenAddress);\\r\\n        return diamondStorage().issuedTokenByTokenId[tokenId];\\r\\n    }\\r\\n\\r\\n    function isExternalNonceAlreadyRegistered(\\r\\n        string calldata _initialChainName,\\r\\n        uint256 _externalNonce\\r\\n    ) internal view returns (bool) {\\r\\n        return\\r\\n            diamondStorage().registeredExternalNoncesByChainName[_initialChainName][_externalNonce];\\r\\n    }\\r\\n\\r\\n    function isIssuedTokenCreated(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress\\r\\n    ) internal view returns (bool) {\\r\\n        return getIssuedTokenAddress(_originalChainName, _originalTokenAddress) != address(0);\\r\\n    }\\r\\n\\r\\n    function isEmptyTokenCreateInfo(TokenCreateInfo calldata _tokenCreateInfo)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes memory tokenInfoBytes = abi.encodePacked(\\r\\n            _tokenCreateInfo.tokenName,\\r\\n            _tokenCreateInfo.tokenSymbol,\\r\\n            _tokenCreateInfo.tokenDecimals\\r\\n        );\\r\\n        return tokenInfoBytes.length <= 32 && bytes32(tokenInfoBytes) == \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function getTokenId(string calldata _originalChainName, string calldata _originalTokenAddress)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return keccak256(abi.encodePacked(_originalChainName, _originalTokenAddress));\\r\\n    }\\r\\n\\r\\n    function getIssuedTokenAddressOrPublishTokenIfNotExists(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress,\\r\\n        TokenCreateInfo calldata _tokenCreateInfo\\r\\n    ) internal returns (address) {\\r\\n        bytes32 tokenId = getTokenId(_originalChainName, _originalTokenAddress);\\r\\n        address issuedTokenAddress = diamondStorage().issuedTokenByTokenId[tokenId];\\r\\n\\r\\n        // If token not exists, deploy new contract\\r\\n        if (issuedTokenAddress == address(0)) {\\r\\n            issuedTokenAddress = publishNewToken(\\r\\n                _originalChainName,\\r\\n                _originalTokenAddress,\\r\\n                _tokenCreateInfo\\r\\n            );\\r\\n        }\\r\\n        return issuedTokenAddress;\\r\\n    }\\r\\n\\r\\n    function nonce() internal view returns (uint256) {\\r\\n        return diamondStorage().nonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ce30753378305a3c65e178560c1eaae8cb5d09f138258d7379df6473af6bce8\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/upgradeInitializers/ERC20DriverInit.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { LibERC20Driver } from \\\"../libraries/LibERC20Driver.sol\\\";\\r\\n\\r\\ncontract ERC20DriverInit {\\r\\n    function init(address _issuedTokenImplementation, string[] calldata _regesteredChains)\\r\\n        external\\r\\n    {\\r\\n        LibERC20Driver.ERC20DriverStorage storage ds = LibERC20Driver.diamondStorage();\\r\\n        ds.issuedTokenImplementation = _issuedTokenImplementation;\\r\\n        ds.initialBlockNumber = block.number;\\r\\n        uint256 l = _regesteredChains.length;\\r\\n        for (uint256 i; i < l; i++) {\\r\\n            LibERC20Driver.setChainRegistration(_regesteredChains[i], true);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x68f7c83a7d662fddac5d585604af9a34976ad56962ca68eea156d82293106ad2\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576101da908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c638a76d99e1461002c57600080fd5b346101a057816003193601126101a05780356001600160a01b038116919082900361019c5760249267ffffffffffffffff908435828111610198573660238201121561019857808401359083821161019457600595368884891b84010111610190577f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3380546001600160a01b0319169091179055437f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3255909436829003604219019190885b8781106100fc578980f35b8881831b840101358481121561018c578301898101359087821161018857604401813603811361018857602090828851938492833781017f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f38815203019020600160ff198254161790556000198114610176576001016100f1565b634e487b7160e01b8a5260118752888afd5b8b80fd5b8a80fd5b8880fd5b8780fd5b8680fd5b8380fd5b8280fdfea264697066735822122099615ee848826efdbeb951f3cde4113bd47e9f7be0d24b7cf67883603f26f74164736f6c63430008110033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c638a76d99e1461002c57600080fd5b346101a057816003193601126101a05780356001600160a01b038116919082900361019c5760249267ffffffffffffffff908435828111610198573660238201121561019857808401359083821161019457600595368884891b84010111610190577f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3380546001600160a01b0319169091179055437f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3255909436829003604219019190885b8781106100fc578980f35b8881831b840101358481121561018c578301898101359087821161018857604401813603811361018857602090828851938492833781017f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f38815203019020600160ff198254161790556000198114610176576001016100f1565b634e487b7160e01b8a5260118752888afd5b8b80fd5b8a80fd5b8880fd5b8780fd5b8680fd5b8380fd5b8280fdfea264697066735822122099615ee848826efdbeb951f3cde4113bd47e9f7be0d24b7cf67883603f26f74164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}