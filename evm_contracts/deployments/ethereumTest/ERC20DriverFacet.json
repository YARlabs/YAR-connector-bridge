{
  "address": "0xb1205Da599C346E599784BE5d9241D79D440C9A4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "originalChainName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "originalTokenAddress",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "createdToken",
          "type": "address"
        }
      ],
      "name": "ERC20DriverPublishedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "externalNonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "originalChainName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "originalTokenAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "initialChainName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "targetChainName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sender",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "recipient",
          "type": "string"
        }
      ],
      "name": "ERC20DriverTransferFromOtherChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "initialChainName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "originalChainName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "originalTokenAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "targetChainName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sender",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "recipient",
          "type": "string"
        }
      ],
      "name": "ERC20DriverTransferToOtherChain",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_originalChainName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_originalTokenAddress",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balancesERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_originalChainName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_originalTokenAddress",
          "type": "string"
        }
      ],
      "name": "getIssuedTokenAddressERC20",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_originalChainName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_originalTokenAddress",
          "type": "string"
        }
      ],
      "name": "getTokenIdERC20",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_initialChainName",
          "type": "string"
        }
      ],
      "name": "getTranferIdERC20",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialBlockNumberERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_initialChainName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_externalNonce",
          "type": "uint256"
        }
      ],
      "name": "isExternalNonceAlreadyRegisteredERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_originalChainName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_originalTokenAddress",
          "type": "string"
        }
      ],
      "name": "isIssuedTokenCreatedERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonceERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_chainName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_value",
          "type": "bool"
        }
      ],
      "name": "setChainRegistrationERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuedTokenImplementation",
          "type": "address"
        }
      ],
      "name": "setIssuedTokenImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_externalNonce",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_originalChainName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_originalTokenAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initialChainName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_targetChainName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_sender",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "evmAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "noEvmAddress",
              "type": "string"
            }
          ],
          "internalType": "struct UniversalAddressUtils.UniversalAddress",
          "name": "_recipient",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct LibERC20Driver.TokenCreateInfo",
          "name": "_tokenCreateInfo",
          "type": "tuple"
        }
      ],
      "name": "tranferFromOtherChainERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_targetChainName",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "evmAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "noEvmAddress",
              "type": "string"
            }
          ],
          "internalType": "struct UniversalAddressUtils.UniversalAddress",
          "name": "_recipient",
          "type": "tuple"
        }
      ],
      "name": "tranferToOtherChainERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ebaef5eceb34a235386205ed4e2f1d022de59969ec9741f866aeb06842ae87f",
  "receipt": {
    "to": null,
    "from": "0xF66468335Ee9D5a5B9296fA653fa47348B57e754",
    "contractAddress": "0xb1205Da599C346E599784BE5d9241D79D440C9A4",
    "transactionIndex": 47,
    "gasUsed": "2120337",
    "logsBloom": "0x
    "blockHash": "0x86a8a6237fa23d331b68539e5cadcf111407f0cdd614656fab21241313d5418e",
    "transactionHash": "0x3ebaef5eceb34a235386205ed4e2f1d022de59969ec9741f866aeb06842ae87f",
    "logs": [],
    "blockNumber": 8427076,
    "cumulativeGasUsed": "13795910",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "08541191232a20d41dd2483aa4db3f2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"originalChainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"originalTokenAddress\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"createdToken\",\"type\":\"address\"}],\"name\":\"ERC20DriverPublishedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"originalChainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"originalTokenAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"initialChainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetChainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sender\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"}],\"name\":\"ERC20DriverTransferFromOtherChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"initialChainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"originalChainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"originalTokenAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetChainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sender\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"}],\"name\":\"ERC20DriverTransferToOtherChain\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_originalChainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_originalTokenAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balancesERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_originalChainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_originalTokenAddress\",\"type\":\"string\"}],\"name\":\"getIssuedTokenAddressERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_originalChainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_originalTokenAddress\",\"type\":\"string\"}],\"name\":\"getTokenIdERC20\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_initialChainName\",\"type\":\"string\"}],\"name\":\"getTranferIdERC20\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBlockNumberERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_initialChainName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_externalNonce\",\"type\":\"uint256\"}],\"name\":\"isExternalNonceAlreadyRegisteredERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_originalChainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_originalTokenAddress\",\"type\":\"string\"}],\"name\":\"isIssuedTokenCreatedERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonceERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setChainRegistrationERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuedTokenImplementation\",\"type\":\"address\"}],\"name\":\"setIssuedTokenImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_externalNonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_originalChainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_originalTokenAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initialChainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_targetChainName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_sender\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"noEvmAddress\",\"type\":\"string\"}],\"internalType\":\"struct UniversalAddressUtils.UniversalAddress\",\"name\":\"_recipient\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct LibERC20Driver.TokenCreateInfo\",\"name\":\"_tokenCreateInfo\",\"type\":\"tuple\"}],\"name\":\"tranferFromOtherChainERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_targetChainName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"noEvmAddress\",\"type\":\"string\"}],\"internalType\":\"struct UniversalAddressUtils.UniversalAddress\",\"name\":\"_recipient\",\"type\":\"tuple\"}],\"name\":\"tranferToOtherChainERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/universal_bridge/facets/ERC20DriverFacet.sol\":\"ERC20DriverFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/universal_bridge/facets/ERC20DriverFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { LibERC20Driver } from \\\"../libraries/LibERC20Driver.sol\\\";\\r\\nimport { LibValidatorController } from \\\"../libraries/LibValidatorController.sol\\\";\\r\\nimport { LibChainInfo } from \\\"../libraries/LibChainInfo.sol\\\";\\r\\nimport { IERC20Driver } from \\\"../interfaces/IERC20Driver.sol\\\";\\r\\nimport { IIssuedToken } from \\\"../interfaces/IIssuedToken.sol\\\";\\r\\nimport { UniversalAddressUtils } from \\\"../../utils/UniversalAddressUtils.sol\\\";\\r\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ncontract ERC20DriverFacet is IERC20Driver {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function getIssuedTokenAddressERC20(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress\\r\\n    ) external view returns (address) {\\r\\n        return LibERC20Driver.getIssuedTokenAddress(_originalChainName, _originalTokenAddress);\\r\\n    }\\r\\n\\r\\n    function getTokenIdERC20(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress\\r\\n    ) external pure returns (bytes32) {\\r\\n        return LibERC20Driver.getTokenId(_originalChainName, _originalTokenAddress);\\r\\n    }\\r\\n\\r\\n    function isIssuedTokenCreatedERC20(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress\\r\\n    ) external view returns (bool) {\\r\\n        return LibERC20Driver.isIssuedTokenCreated(_originalChainName, _originalTokenAddress);\\r\\n    }\\r\\n\\r\\n    function initialBlockNumberERC20() external view returns (uint256) {\\r\\n        return LibERC20Driver.initialBlockNumber();\\r\\n    }\\r\\n\\r\\n    function isExternalNonceAlreadyRegisteredERC20(\\r\\n        string calldata _initialChainName,\\r\\n        uint256 _externalNonce\\r\\n    ) external view returns (bool) {\\r\\n        return LibERC20Driver.isExternalNonceAlreadyRegistered(_initialChainName, _externalNonce);\\r\\n    }\\r\\n\\r\\n    function tranferToOtherChainERC20(\\r\\n        address _transferedToken,\\r\\n        uint256 _amount,\\r\\n        string calldata _targetChainName,\\r\\n        UniversalAddressUtils.UniversalAddress calldata _recipient\\r\\n    ) external {\\r\\n        // Connect to storage\\r\\n        LibERC20Driver.ERC20DriverStorage storage ds = LibERC20Driver.diamondStorage();\\r\\n        LibChainInfo.ChainInfoStorage storage chainInfoStorage = LibChainInfo.diamondStorage();\\r\\n\\r\\n        require(_amount > 0, \\\"LibERC20Driver.tranferToOtherChain: amount <= 0\\\");\\r\\n\\r\\n        require(\\r\\n            ds.registeredChains[_targetChainName],\\r\\n            \\\"LibERC20Driver.tranferToOtherChain: chain not registered\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            UniversalAddressUtils.isValidUniversalAddress(_recipient),\\r\\n            \\\"LibERC20Driver.tranferToOtherChain: recipient address not valid\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 tokenId = ds.tokenIdByIssuedToken[_transferedToken];\\r\\n\\r\\n        string memory initialChainName = chainInfoStorage.chainName;\\r\\n        string memory originalChainName;\\r\\n        string memory originalTokenAddress;\\r\\n\\r\\n        if (tokenId != 0) {\\r\\n            // There ISSUED token\\r\\n            IIssuedToken issuedToken = IIssuedToken(_transferedToken);\\r\\n            (originalChainName, originalTokenAddress) = issuedToken.getOriginalTokenInfo();\\r\\n\\r\\n            bytes32 originalChainNameHash = keccak256(abi.encodePacked(originalChainName));\\r\\n            bytes32 targetChainNameHash = keccak256(abi.encodePacked(_targetChainName));\\r\\n\\r\\n            if (originalChainNameHash != targetChainNameHash && chainInfoStorage.isProxyChain) {\\r\\n                // In proxy chain\\r\\n                // LOCK ISSUED TOKENS\\r\\n                issuedToken.permissionedTransferFrom(msg.sender, address(this), _amount);\\r\\n            } else {\\r\\n                // BURN ISSUED TOKENS\\r\\n                issuedToken.burn(msg.sender, _amount);\\r\\n            }\\r\\n        } else {\\r\\n            // There ORIGINAL token\\r\\n            originalChainName = initialChainName;\\r\\n            originalTokenAddress = Strings.toHexString(_transferedToken);\\r\\n\\r\\n            ds.originalTokenAddressByString[originalTokenAddress] = _transferedToken;\\r\\n\\r\\n            // LOCK ORIGIANL TOKENS\\r\\n            // Need approve first\\r\\n            IERC20(_transferedToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        }\\r\\n\\r\\n        // Send event to validator [required]\\r\\n        uint256 nonce = ds.nonce++;\\r\\n        emit ERC20DriverTransferToOtherChain(\\r\\n            LibERC20Driver.getTranferId(nonce, initialChainName),\\r\\n            nonce,\\r\\n            initialChainName,\\r\\n            originalChainName,\\r\\n            originalTokenAddress,\\r\\n            _targetChainName,\\r\\n            _amount,\\r\\n            UniversalAddressUtils.toString(msg.sender),\\r\\n            UniversalAddressUtils.toString(_recipient)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function tranferFromOtherChainERC20(\\r\\n        uint256 _externalNonce,\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress,\\r\\n        string calldata _initialChainName,\\r\\n        string calldata _targetChainName,\\r\\n        uint256 _amount,\\r\\n        string calldata _sender,\\r\\n        UniversalAddressUtils.UniversalAddress calldata _recipient,\\r\\n        LibERC20Driver.TokenCreateInfo calldata _tokenCreateInfo\\r\\n    ) external {\\r\\n        // Only Validator\\r\\n        LibValidatorController.enforceIsValidator();\\r\\n\\r\\n        // Connect to storage\\r\\n        LibERC20Driver.ERC20DriverStorage storage ds = LibERC20Driver.diamondStorage();\\r\\n\\r\\n        require(\\r\\n            !ds.registeredExternalNoncesByChainName[_initialChainName][_externalNonce],\\r\\n            \\\"LibERC20Driver: nonce already registered\\\"\\r\\n        );\\r\\n        ds.registeredExternalNoncesByChainName[_initialChainName][_externalNonce] = true;\\r\\n\\r\\n        require(\\r\\n            UniversalAddressUtils.isValidUniversalAddress(_recipient),\\r\\n            \\\"LibERC20Driver.tranferFromOtherChain: recipient address not valid\\\"\\r\\n        );\\r\\n\\r\\n        LibChainInfo.ChainInfoStorage storage chainInfoStorage = LibChainInfo.diamondStorage();\\r\\n        bytes32 currentChainNameHash = keccak256(abi.encodePacked(chainInfoStorage.chainName));\\r\\n        bytes32 originalChainNameHash = keccak256(abi.encodePacked(_originalChainName));\\r\\n        bytes32 targetChainNameHash = keccak256(abi.encodePacked(_targetChainName));\\r\\n        bytes32 initialChainNameHash = keccak256(abi.encodePacked(_initialChainName));\\r\\n\\r\\n        require(\\r\\n            initialChainNameHash != currentChainNameHash,\\r\\n            \\\"LibERC20Driver.tranferFromOtherChain: Initial chain can not be equal current chain\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            ds.registeredChains[_initialChainName],\\r\\n            \\\"LibERC20Driver.tranferFromOtherChain: Initial chain not registered\\\"\\r\\n        );\\r\\n\\r\\n        if (currentChainNameHash == targetChainNameHash) {\\r\\n            // This target chain\\r\\n\\r\\n            require(\\r\\n                UniversalAddressUtils.hasEvmAddress(_recipient),\\r\\n                \\\"LibERC20Driver: recipient not has evm address\\\"\\r\\n            );\\r\\n\\r\\n            if (currentChainNameHash == originalChainNameHash) {\\r\\n                // This Original chain\\r\\n                // Withdraw original tokens\\r\\n                IERC20(ds.originalTokenAddressByString[_originalTokenAddress]).safeTransfer(\\r\\n                    _recipient.evmAddress,\\r\\n                    _amount\\r\\n                );\\r\\n            } else {\\r\\n                // This Secondary chain\\r\\n                // Mint issued tokens\\r\\n\\r\\n                address issuedTokenAddress = LibERC20Driver\\r\\n                    .getIssuedTokenAddressOrPublishTokenIfNotExists(\\r\\n                        _originalChainName,\\r\\n                        _originalTokenAddress,\\r\\n                        _tokenCreateInfo\\r\\n                    );\\r\\n\\r\\n                IIssuedToken(issuedTokenAddress).mint(_recipient.evmAddress, _amount);\\r\\n            }\\r\\n\\r\\n            emit ERC20DriverTransferFromOtherChain(\\r\\n                LibERC20Driver.getTranferId(_externalNonce, _initialChainName),\\r\\n                _externalNonce,\\r\\n                _originalChainName,\\r\\n                _originalTokenAddress,\\r\\n                _initialChainName,\\r\\n                _targetChainName,\\r\\n                _amount,\\r\\n                _sender,\\r\\n                UniversalAddressUtils.toString(_recipient)\\r\\n            );\\r\\n        } else {\\r\\n            // This Proxy chain\\r\\n            // Mint and lock issued tokens\\r\\n            // And send event to target bridge\\r\\n            require(\\r\\n                chainInfoStorage.isProxyChain,\\r\\n                \\\"LibERC20Driver: Only proxy bridge can be currentChainName != targetChainName\\\"\\r\\n            );\\r\\n\\r\\n            address issuedTokenAddress = LibERC20Driver\\r\\n                .getIssuedTokenAddressOrPublishTokenIfNotExists(\\r\\n                    _originalChainName,\\r\\n                    _originalTokenAddress,\\r\\n                    _tokenCreateInfo\\r\\n                );\\r\\n\\r\\n            if (targetChainNameHash == originalChainNameHash) {\\r\\n                // BURN PROXY ISSUED TOKENS\\r\\n                IIssuedToken(issuedTokenAddress).burn(address(this), _amount);\\r\\n            } else if (initialChainNameHash == originalChainNameHash) {\\r\\n                // LOCK PROXY ISSUED TOKENS\\r\\n                IIssuedToken(issuedTokenAddress).mint(address(this), _amount);\\r\\n            }\\r\\n\\r\\n            // Send event to validator [required]\\r\\n            emit ERC20DriverTransferToOtherChain(\\r\\n                LibERC20Driver.getTranferId(_externalNonce, _initialChainName),\\r\\n                _externalNonce,\\r\\n                _initialChainName,\\r\\n                _originalChainName,\\r\\n                _originalTokenAddress,\\r\\n                _targetChainName,\\r\\n                _amount,\\r\\n                _sender,\\r\\n                UniversalAddressUtils.toString(_recipient)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setChainRegistrationERC20(string calldata _chainName, bool _value) external {\\r\\n        // Only Validator\\r\\n        LibValidatorController.enforceIsValidator();\\r\\n        LibERC20Driver.setChainRegistration(_chainName, _value);\\r\\n    }\\r\\n\\r\\n    function nonceERC20() external view returns (uint256) {\\r\\n        return LibERC20Driver.nonce();\\r\\n    }\\r\\n\\r\\n    function balancesERC20(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress,\\r\\n        address _account\\r\\n    ) external view returns (uint256) {\\r\\n        return LibERC20Driver.balances(_originalChainName, _originalTokenAddress, _account);\\r\\n    }\\r\\n\\r\\n    function setIssuedTokenImplementation(address _issuedTokenImplementation) external {\\r\\n        // Only Validator\\r\\n        LibValidatorController.enforceIsValidator();\\r\\n\\r\\n        LibERC20Driver.setIssuedTokenImplementation(_issuedTokenImplementation);\\r\\n    }\\r\\n\\r\\n    function getTranferIdERC20(uint256 _nonce, string calldata _initialChainName)\\r\\n        external\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return LibERC20Driver.getTranferId(_nonce, _initialChainName);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x77f9a8ca6a99a4e0eaaa554a6e0a16685554b6a9ae374b5af1224f07cecacde3\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/interfaces/IERC20Driver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { UniversalAddressUtils } from \\\"../../utils/UniversalAddressUtils.sol\\\";\\r\\nimport { LibERC20Driver } from \\\"../libraries/LibERC20Driver.sol\\\";\\r\\n\\r\\ninterface IERC20Driver {\\r\\n    event ERC20DriverPublishedToken(\\r\\n        string originalChainName,\\r\\n        string originalTokenAddress,\\r\\n        bytes32 indexed tokenId,\\r\\n        address createdToken\\r\\n    );\\r\\n\\r\\n    event ERC20DriverTransferToOtherChain(\\r\\n        bytes32 indexed transferId,\\r\\n        uint256 nonce,\\r\\n        string initialChainName,\\r\\n        string originalChainName,\\r\\n        string originalTokenAddress,\\r\\n        string targetChainName,\\r\\n        uint256 tokenAmount,\\r\\n        string sender,\\r\\n        string recipient\\r\\n    );\\r\\n\\r\\n    event ERC20DriverTransferFromOtherChain(\\r\\n        bytes32 indexed transferId,\\r\\n        uint256 externalNonce,\\r\\n        string originalChainName,\\r\\n        string originalTokenAddress,\\r\\n        string initialChainName,\\r\\n        string targetChainName,\\r\\n        uint256 amount,\\r\\n        string sender,\\r\\n        string recipient\\r\\n    );\\r\\n\\r\\n    function getIssuedTokenAddressERC20(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function getTokenIdERC20(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress\\r\\n    ) external pure returns (bytes32);\\r\\n\\r\\n    function isIssuedTokenCreatedERC20(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function tranferToOtherChainERC20(\\r\\n        address _transferedToken,\\r\\n        uint256 _amount,\\r\\n        string calldata _targetChainName,\\r\\n        UniversalAddressUtils.UniversalAddress calldata _recipient\\r\\n    ) external;\\r\\n\\r\\n    function tranferFromOtherChainERC20(\\r\\n        uint256 _externalNonce,\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress,\\r\\n        string calldata _initialChainName,\\r\\n        string calldata _targetChainName,\\r\\n        uint256 _amount,\\r\\n        string calldata _sender,\\r\\n        UniversalAddressUtils.UniversalAddress calldata _recipient,\\r\\n        LibERC20Driver.TokenCreateInfo calldata _tokenCreateInfo\\r\\n    ) external;\\r\\n\\r\\n    function initialBlockNumberERC20() external view returns (uint256);\\r\\n\\r\\n    function isExternalNonceAlreadyRegisteredERC20(\\r\\n        string calldata _initialChainName,\\r\\n        uint256 _externalNonce\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function setChainRegistrationERC20(string calldata _chainName, bool _value) external;\\r\\n\\r\\n    function nonceERC20() external view returns (uint256);\\r\\n\\r\\n    function balancesERC20(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress,\\r\\n        address _account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function setIssuedTokenImplementation(address _issuedTokenImplementation) external;\\r\\n\\r\\n    function getTranferIdERC20(uint256 _nonce, string calldata _initialChainName) external pure returns(bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x43c49c2b735677f8a6503dc757d5113c5598f85caebac97a00bbde4101c06f11\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/interfaces/IIssuedToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IIssuedToken {\\r\\n    function initialize(\\r\\n        string memory _originalChainName,\\r\\n        string memory _originalTokenAddress,\\r\\n        string memory _originalTokenName,\\r\\n        string memory _originalTokenSymbol,\\r\\n        uint8 _originalTokenDecimals\\r\\n    ) external;\\r\\n\\r\\n    function getOriginalTokenInfo() external view returns (string memory, string memory);\\r\\n\\r\\n    function mint(address _recipient, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _from, uint256 _amount) external;\\r\\n\\r\\n    function permissionedTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3af511845f6d828ce5986be2ab8b474e7f6b5be24609f1b3b0ed64b6c9049d66\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/libraries/LibChainInfo.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary LibChainInfo {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"LibChainInfo.storage\\\");\\r\\n\\r\\n    struct ChainInfoStorage {\\r\\n        string chainName;\\r\\n        bool isProxyChain;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (ChainInfoStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function chainName() internal view returns (string memory) {\\r\\n        return diamondStorage().chainName;\\r\\n    }\\r\\n\\r\\n    function setChainName(string memory _chainName) internal {\\r\\n        diamondStorage().chainName = _chainName;\\r\\n    }\\r\\n\\r\\n    function isProxyChain() internal view returns (bool) {\\r\\n        return diamondStorage().isProxyChain;\\r\\n    }\\r\\n\\r\\n    function setIsProxyChain(bool _isProxyChain) internal {\\r\\n        diamondStorage().isProxyChain = _isProxyChain;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb7a0c465727f8625fb7ce43943cd130518ec7771505cf7a05d1d27494a46c8a6\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/libraries/LibERC20Driver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { ERC1967Proxy } from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { IIssuedToken } from \\\"../interfaces/IIssuedToken.sol\\\";\\r\\nimport { LibChainInfo } from \\\"./LibChainInfo.sol\\\";\\r\\n\\r\\nlibrary LibERC20Driver {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"LibERC20Driver.storage\\\");\\r\\n\\r\\n    struct ERC20DriverStorage {\\r\\n        uint256 initialBlockNumber;\\r\\n        address issuedTokenImplementation;\\r\\n        mapping(bytes32 => address) issuedTokenByTokenId;\\r\\n        mapping(address => bytes32) tokenIdByIssuedToken;\\r\\n        uint256 withdrawNonce;\\r\\n        uint256 crossTheBridgeNonce;\\r\\n        mapping(string => bool) registeredChains;\\r\\n        mapping(string => address) originalTokenAddressByString;\\r\\n        uint256 nonce;\\r\\n        mapping(string => mapping(uint256 => bool)) registeredExternalNoncesByChainName;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (ERC20DriverStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event ERC20DriverPublishedToken(\\r\\n        string originalChainName,\\r\\n        string originalTokenAddress,\\r\\n        bytes32 indexed tokenId,\\r\\n        address createdToken\\r\\n    );\\r\\n\\r\\n    struct TokenCreateInfo {\\r\\n        string tokenName;\\r\\n        string tokenSymbol;\\r\\n        uint8 tokenDecimals;\\r\\n    }\\r\\n\\r\\n    function balances(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress,\\r\\n        address _account\\r\\n    ) internal view returns (uint256) {\\r\\n        ERC20DriverStorage storage ds = diamondStorage();\\r\\n        LibChainInfo.ChainInfoStorage storage chainInfoStorage = LibChainInfo.diamondStorage();\\r\\n\\r\\n        bytes32 currentChainNameHash = keccak256(abi.encodePacked(chainInfoStorage.chainName));\\r\\n        bytes32 originalChainNameHash = keccak256(abi.encodePacked(_originalChainName));\\r\\n\\r\\n        address tokenInCurrentChain = currentChainNameHash == originalChainNameHash\\r\\n            ? ds.originalTokenAddressByString[_originalTokenAddress]\\r\\n            : getIssuedTokenAddress(_originalChainName, _originalTokenAddress);\\r\\n\\r\\n        if (tokenInCurrentChain != address(0)) {\\r\\n            return IERC20(tokenInCurrentChain).balanceOf(_account);\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function initialBlockNumber() internal view returns (uint256) {\\r\\n        return diamondStorage().initialBlockNumber;\\r\\n    }\\r\\n\\r\\n    function setChainRegistration(string calldata _chainName, bool _value) internal {\\r\\n        diamondStorage().registeredChains[_chainName] = _value;\\r\\n    }\\r\\n\\r\\n    function setIssuedTokenImplementation(address _issuedTokenImplementation) internal {\\r\\n        diamondStorage().issuedTokenImplementation = _issuedTokenImplementation;\\r\\n    }\\r\\n\\r\\n    function getTranferId(uint256 _nonce, string memory _initialChainName) internal pure returns(bytes32) {\\r\\n        return keccak256(abi.encodePacked(_nonce, _initialChainName));\\r\\n    }\\r\\n\\r\\n    function publishNewToken(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress,\\r\\n        TokenCreateInfo calldata _tokenCreateInfo\\r\\n    ) internal returns (address) {\\r\\n        // Connect to storage\\r\\n        ERC20DriverStorage storage ds = diamondStorage();\\r\\n\\r\\n        // Get token info\\r\\n        bytes32 tokenId = getTokenId(_originalChainName, _originalTokenAddress);\\r\\n        address issuedTokenAddress = ds.issuedTokenByTokenId[tokenId];\\r\\n\\r\\n        // Check already published\\r\\n        require(issuedTokenAddress == address(0), \\\"Token already published\\\");\\r\\n        // Check create data\\r\\n        require(!isEmptyTokenCreateInfo(_tokenCreateInfo), \\\"Not has token create info!\\\");\\r\\n\\r\\n        // Deploy new token\\r\\n        issuedTokenAddress = address(\\r\\n            new ERC1967Proxy(\\r\\n                ds.issuedTokenImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    IIssuedToken.initialize.selector,\\r\\n                    _originalChainName,\\r\\n                    _originalTokenAddress,\\r\\n                    _tokenCreateInfo.tokenName,\\r\\n                    _tokenCreateInfo.tokenSymbol,\\r\\n                    _tokenCreateInfo.tokenDecimals\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // Save token info to storage\\r\\n        ds.tokenIdByIssuedToken[issuedTokenAddress] = tokenId;\\r\\n        ds.issuedTokenByTokenId[tokenId] = issuedTokenAddress;\\r\\n        // Send event\\r\\n        emit ERC20DriverPublishedToken(\\r\\n            _originalChainName,\\r\\n            _originalTokenAddress,\\r\\n            tokenId,\\r\\n            issuedTokenAddress\\r\\n        );\\r\\n\\r\\n        return issuedTokenAddress;\\r\\n    }\\r\\n\\r\\n    function getIssuedTokenAddress(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress\\r\\n    ) internal view returns (address) {\\r\\n        bytes32 tokenId = getTokenId(_originalChainName, _originalTokenAddress);\\r\\n        return diamondStorage().issuedTokenByTokenId[tokenId];\\r\\n    }\\r\\n\\r\\n    function isExternalNonceAlreadyRegistered(\\r\\n        string calldata _initialChainName,\\r\\n        uint256 _externalNonce\\r\\n    ) internal view returns (bool) {\\r\\n        return\\r\\n            diamondStorage().registeredExternalNoncesByChainName[_initialChainName][_externalNonce];\\r\\n    }\\r\\n\\r\\n    function isIssuedTokenCreated(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress\\r\\n    ) internal view returns (bool) {\\r\\n        return getIssuedTokenAddress(_originalChainName, _originalTokenAddress) != address(0);\\r\\n    }\\r\\n\\r\\n    function isEmptyTokenCreateInfo(TokenCreateInfo calldata _tokenCreateInfo)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes memory tokenInfoBytes = abi.encodePacked(\\r\\n            _tokenCreateInfo.tokenName,\\r\\n            _tokenCreateInfo.tokenSymbol,\\r\\n            _tokenCreateInfo.tokenDecimals\\r\\n        );\\r\\n        return tokenInfoBytes.length <= 32 && bytes32(tokenInfoBytes) == \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function getTokenId(string calldata _originalChainName, string calldata _originalTokenAddress)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return keccak256(abi.encodePacked(_originalChainName, _originalTokenAddress));\\r\\n    }\\r\\n\\r\\n    function getIssuedTokenAddressOrPublishTokenIfNotExists(\\r\\n        string calldata _originalChainName,\\r\\n        string calldata _originalTokenAddress,\\r\\n        TokenCreateInfo calldata _tokenCreateInfo\\r\\n    ) internal returns (address) {\\r\\n        bytes32 tokenId = getTokenId(_originalChainName, _originalTokenAddress);\\r\\n        address issuedTokenAddress = diamondStorage().issuedTokenByTokenId[tokenId];\\r\\n\\r\\n        // If token not exists, deploy new contract\\r\\n        if (issuedTokenAddress == address(0)) {\\r\\n            issuedTokenAddress = publishNewToken(\\r\\n                _originalChainName,\\r\\n                _originalTokenAddress,\\r\\n                _tokenCreateInfo\\r\\n            );\\r\\n        }\\r\\n        return issuedTokenAddress;\\r\\n    }\\r\\n\\r\\n    function nonce() internal view returns (uint256) {\\r\\n        return diamondStorage().nonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ce30753378305a3c65e178560c1eaae8cb5d09f138258d7379df6473af6bce8\",\"license\":\"UNLICENSED\"},\"contracts/universal_bridge/libraries/LibValidatorController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary LibValidatorController {\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"validatorController.storage\\\");\\r\\n\\r\\n    struct ValidatorControllerStorage {\\r\\n        address validator;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (ValidatorControllerStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event ValidatorTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function enforceIsValidator() internal view {\\r\\n        require(\\r\\n            msg.sender == diamondStorage().validator,\\r\\n            \\\"LibValidatorController: Must be validator\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setValidator(address _newValidator) internal {\\r\\n        ValidatorControllerStorage storage ds = diamondStorage();\\r\\n        address previousValidator = ds.validator;\\r\\n        ds.validator = _newValidator;\\r\\n        emit ValidatorTransferred(previousValidator, _newValidator);\\r\\n    }\\r\\n\\r\\n    function validator() internal view returns (address) {\\r\\n        return diamondStorage().validator;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fbcfd22ae4cac441cc2bc0f5fecbc21ef02a22d757d94068bc45ac4639b851e\",\"license\":\"UNLICENSED\"},\"contracts/utils/UniversalAddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nlibrary UniversalAddressUtils {\\r\\n    struct UniversalAddress {\\r\\n        address evmAddress;\\r\\n        string noEvmAddress;\\r\\n    }\\r\\n\\r\\n    function isValidUniversalAddress(UniversalAddress calldata _universalAddress)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            (_universalAddress.evmAddress == address(0)) !=\\r\\n            (bytes(_universalAddress.noEvmAddress).length == 0);\\r\\n    }\\r\\n\\r\\n    function toString(UniversalAddress calldata _universalAddress) internal pure returns(string memory) {\\r\\n        if(hasEvmAddress(_universalAddress)) {\\r\\n            return toString(_universalAddress.evmAddress);\\r\\n        } else {\\r\\n            return _universalAddress.noEvmAddress;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function toString(address _account) internal pure returns(string memory) {\\r\\n        return Strings.toHexString(_account);\\r\\n    }\\r\\n    \\r\\n    function hasEvmAddress(UniversalAddress calldata _universalAddress) internal pure returns(bool ) {\\r\\n        return _universalAddress.evmAddress != address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd8d77c09842178f481aba3b51175c2a799c8fd4459fb9ea8109cc54ae25ce5ca\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612576908161001c8239f35b600080fdfe608060405260043610156200001357600080fd5b6000803560e01c80632751ed8c146200128f57806339126238146200124d5780633acaf5ec1462000b915780633b9549b31462000b3557806342ec61c81462000acc57806349a759ad1462000a8d57806365a6e6a71462000a49578063690622b81462000a0a5780637958b3c5146200099f578063803a8225146200097d578063d1cd7a8914620001095763f4fb387414620000ae57600080fd5b34620001065760403660031901126200010657602435906001600160401b03821162000106576020620000fe620000f5620000ed36600487016200130d565b369162001982565b60043562001b8a565b604051908152f35b80fd5b503462000106576003196101203682011262000674576001600160401b036024358181116200097957620001429036906004016200130d565b6044939193358381116200097557620001609036906004016200130d565b909260643585811162000971576200017d9036906004016200130d565b9590966084358281116200096d576200019b9036906004016200130d565b909760c4358481116200096557620001b89036906004016200130d565b9590948060e43511620009695760408260e4353603011262000969576101043511620009655760609061010435360301126200050257620001f86200200f565b62000204818b620013e2565b6004358c5260205260ff60408c2054166200090f5762000225818b620013e2565b6004358c5260205260408b20600160ff198254161790556200024c60e4356004016200209a565b156200089a5760405162000277816200026860208201620018bb565b03601f198101835282620014b9565b602081519101208b604051620002a5602082818101948d8a87378d82019083820152038084520182620014b9565b519020908c8c8c6040518760208201928337620002d26020828a81018783820152038084520182620014b9565b51902091620002fc60206040518093898383019687378982019083820152038084520182620014b9565b51902090828214620008145760ff620003178f8790620013aa565b5416156200079e578281036200057057506001600160a01b03905062000342600460e4350162001a3c565b161562000515570362000432577f277405b64a3261050d82a2a3317c85db9f75f3d2e172674de0474f649a9a78e8986200042c969594939291620003f4620003df6001600160a01b03620003978a8e6200141a565b5416620003ee620003ad60e43560040162001a3c565b60405163a9059cbb60e01b60208201526001600160a01b03909116602482015260a43560448201529283906064820190565b03601f198101845283620014b9565b620015b1565b62000405620000f536838f62001982565b9b6200041660e435600401620020c7565b976040519b8c9b60a435978d60043590620019be565b0390a280f35b8a6001600160a01b036200045060046101043501898c8c8962001bfe565b166200046160e43560040162001a3c565b90803b1562000511576040516340c10f1960e01b81526001600160a01b0392909216600483015260a435602483015282908290604490829084905af180156200050657620004de575b5050907f277405b64a3261050d82a2a3317c85db9f75f3d2e172674de0474f649a9a78e8986200042c9695949392620003f4565b620004f090979695949392976200148f565b620005025790919293948a38620004aa565b8a80fd5b6040513d84823e3d90fd5b8280fd5b60405162461bcd60e51b815260206004820152602d60248201527f4c696245524332304472697665723a20726563697069656e74206e6f7420686160448201526c732065766d206164647265737360981b6064820152608490fd5b91509160ff7f1ac0c65048e05abc6ec58fabb62503cd4926ef6a22676f8a0942f241754a9ba69d969b9d9a99949a5416156200071e578d9281620005c08f878f918e610104356004019362001bfe565b9303620006785750506001600160a01b0316803b156200067457604051632770a7eb60e21b815230600482015260a43560248201529082908290604490829084905af18015620005065762000650575b5050907fb9c175d2cd95c2ccff290252181cf6c9d56e2d758e27e3a611af2b4608da1f7a986200042c96959493925b62000405620000f5368b8762001982565b6200066290979695949392976200148f565b620005025790919293948a3862000610565b5080fd5b14620006b3575b5050907fb9c175d2cd95c2ccff290252181cf6c9d56e2d758e27e3a611af2b4608da1f7a986200042c96959493926200063f565b6001600160a01b0316803b1562000674576040516340c10f1960e01b815230600482015260a43560248201529082908290604490829084905af180156200050657156200067f576200070c90979695949392976200148f565b620005025790919293948a386200067f565b60405162461bcd60e51b815260206004820152604c60248201527f4c696245524332304472697665723a204f6e6c792070726f787920627269646760448201527f652063616e2062652063757272656e74436861696e4e616d6520213d2074617260648201526b676574436861696e4e616d6560a01b608482015260a490fd5b60405162461bcd60e51b815260206004820152604260248201527f4c696245524332304472697665722e7472616e66657246726f6d4f746865724360448201527f6861696e3a20496e697469616c20636861696e206e6f74207265676973746572606482015261195960f21b608482015260a490fd5b60405162461bcd60e51b815260206004820152605260248201527f4c696245524332304472697665722e7472616e66657246726f6d4f746865724360448201527f6861696e3a20496e697469616c20636861696e2063616e206e6f74206265206560648201527138bab0b61031bab93932b73a1031b430b4b760711b608482015260a490fd5b60405162461bcd60e51b815260206004820152604160248201527f4c696245524332304472697665722e7472616e66657246726f6d4f746865724360448201527f6861696e3a20726563697069656e742061646472657373206e6f742076616c696064820152601960fa1b608482015260a490fd5b60405162461bcd60e51b815260206004820152602860248201527f4c696245524332304472697665723a206e6f6e636520616c726561647920726560448201526719da5cdd195c995960c21b6064820152608490fd5b8b80fd5b8c80fd5b8980fd5b8780fd5b8580fd5b8380fd5b503462000106576020620000fe620009953662001359565b9291909162001bc8565b50346200010657604036600319011262000106576004356001600160401b0381116200067457620009d59036906004016200130d565b90602435918215158093036200097957620009fa91620009f46200200f565b620013aa565b9060ff8019835416911617905580f35b5034620001065780600319360112620001065760207f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3254604051908152f35b5034620001065760209062000a62620009953662001359565b8152600080516020620025218339815191528252604060018060a01b03912054161515604051908152f35b5034620001065780600319360112620001065760207f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3a54604051908152f35b503462000106576020366003190112620001065762000aea62001342565b62000af46200200f565b7f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3380546001600160a01b0319166001600160a01b0390921691909117905580f35b50346200010657604036600319011262000106576004356001600160401b0381116200067457604060209262000b7d62000b7660ff9436906004016200130d565b90620013e2565b602435825284522054166040519015158152f35b5034620001065760031990608036830112620001065762000bb162001342565b6001600160401b039290604435848111620009795762000bd69036906004016200130d565b92606435908682116200097557604090823603011262001249576024918235918215620011ed5760ff62000c0b8784620013aa565b54161562001183576004019062000c22826200209a565b1562001119576001600160a01b03851660009081527f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f356020526040902054956040519588977f1ac0c65048e05abc6ec58fabb62503cd4926ef6a22676f8a0942f241754a9ba58881549a62000c978c62001452565b9283835260019c8d81169081600014620010f5575060011462001095575b5062000cc492500389620014b9565b1562000fdc57604051634c4f708d60e11b81526001600160a01b0391909116979089816004818c5afa90811562000eed578a9b8b9262000f7e575b5050978a8a6040519160209262000d3584828162000d278183019687815193849201620014db565b8101038084520182620014b9565b5190209162000d5e604051918281810194898b87378982019083820152038084520182620014b9565b51902014158062000f52575b1562000ef857803b156200096d5760405163ab1a63cd60e01b815233600482015230602482015260448101879052908a908290606490829084905af1801562000eed57908a9162000ed1575b50505b7f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3a90815496600019881462000ebf575062000eb0936200042c96937fb9c175d2cd95c2ccff290252181cf6c9d56e2d758e27e3a611af2b4608da1f7a9a9b9c969362000e9c938a01905562000e8d62000e338b8b62001b8a565b9c62000e7e62000e4e62000e47336200177f565b97620020c7565b9962000e6f6040519e8f9e8f90815261010090816020820152019062001569565b8d810360408f01529062001569565b908b820360608d015262001569565b9189830360808b015262001590565b9160a087015285820360c087015262001569565b9083820360e085015262001569565b634e487b7160e01b8b5260116004528afd5b62000edc906200148f565b62000ee957883862000db6565b8880fd5b6040513d8c823e3d90fd5b803b156200096d57604051632770a7eb60e21b815233600482015260248101879052908a908290604490829084905af1801562000eed5762000f3c575b5062000db9565b62000f4a909991996200148f565b973862000f35565b5060ff7f1ac0c65048e05abc6ec58fabb62503cd4926ef6a22676f8a0942f241754a9ba6541662000d6a565b91509a503d808b8d3e62000f93818d620014b9565b8b019060408c83031262000502578b5181811162000965578262000fb9918e016200151c565b9b6020810151918211620009655762000fd49291016200151c565b388062000cff565b96985085986200108f62000ff0896200177f565b986200100c60208b8160405193828580945193849201620014db565b7f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f399082019081520301902080546001600160a01b0319166001600160a01b039092169182179055604080516323b872dd60e01b602080830191909152338b830190815230918101919091529182018990529190620003ee908390606001620003df565b62000db9565b8d5250908b908b7fdc5d12dbc606c4b58c1834e3ea9b4bb05648cd8e6f9896a777fa9708701729e75b828410620010db5750505090602062000cc4928201013862000cb5565b60209294838583549201015201910190918b8b93620010be565b90506020925062000cc494915060ff191682840152151560051b8201013862000cb5565b60405162461bcd60e51b815260206004820152603f818601527f4c696245524332304472697665722e7472616e666572546f4f7468657243686160448201527f696e3a20726563697069656e742061646472657373206e6f742076616c6964006064820152608490fd5b60405162461bcd60e51b8152602060048201526038818601527f4c696245524332304472697665722e7472616e666572546f4f7468657243686160448201527f696e3a20636861696e206e6f74207265676973746572656400000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602f818601527f4c696245524332304472697665722e7472616e666572546f4f7468657243686160448201526e0696e3a20616d6f756e74203c3d203608c1b6064820152608490fd5b8480fd5b5034620001065760209062001266620009953662001359565b8152600080516020620025218339815191528252604060018060a01b0391205416604051908152f35b50346200010657606036600319011262000106576001600160401b036004358181116200051157620012c69036906004016200130d565b916024359081116200097957620012e29036906004016200130d565b6044359490939192906001600160a01b038616860362000106576020620000fe878787878762001a51565b9181601f840112156200133d578235916001600160401b0383116200133d57602083818601950101116200133d57565b600080fd5b600435906001600160a01b03821682036200133d57565b60406003198201126200133d576001600160401b03916004358381116200133d578262001389916004016200130d565b939093926024359182116200133d57620013a6916004016200130d565b9091565b60209082604051938492833781017f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3881520301902090565b60209082604051938492833781017f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3b81520301902090565b60209082604051938492833781017f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3981520301902090565b90600182811c9216801562001484575b60208310146200146e57565b634e487b7160e01b600052602260045260246000fd5b91607f169162001462565b6001600160401b038111620014a357604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b03821117620014a357604052565b60005b838110620014ef5750506000910152565b8181015183820152602001620014de565b6001600160401b038111620014a357601f01601f191660200190565b81601f820112156200133d578051620015358162001500565b92620015456040519485620014b9565b818452602082840101116200133d57620015669160208085019101620014db565b90565b906020916200158481518092818552858086019101620014db565b601f01601f1916010190565b908060209392818452848401376000828201840152601f01601f1916010190565b60018060a01b03169060405160408101908082106001600160401b03831117620014a35762001648916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af13d15620016d8573d916200162a8362001500565b926200163a6040519485620014b9565b83523d868885013e620016dc565b80518062001657575b50505050565b81849181010312620006745782015190811591821503620001065750620016815780808062001651565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6060915b91929015620017415750815115620016f2575090565b3b15620016fc5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015620017555750805190602001fd5b60405162461bcd60e51b8152602060048201529081906200177b90602483019062001569565b0390fd5b604051906001600160a01b0316606082016001600160401b03811183821017620014a357604052602a82526020908183016040368237835115620018a557603090538251600190811015620018a557607860218501536029905b8082116200182f575050620017ec575090565b6064906040519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156200189057855184101562001890576f181899199a1a9b1b9c1cb0b131b232b360811b901a85840185015360041c9180156200187b576000190190620017d9565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b634e487b7160e01b600052603260045260246000fd5b906000917f1ac0c65048e05abc6ec58fabb62503cd4926ef6a22676f8a0942f241754a9ba5908154620018ee8162001452565b926001918083169081156200196657506001146200190c5750505050565b9091929394506000527fdc5d12dbc606c4b58c1834e3ea9b4bb05648cd8e6f9896a777fa9708701729e7906000915b848310620019525750505001903880808062001651565b81816020925485870152019201916200193b565b60ff191684525050508115159091020191503880808062001651565b929192620019908262001500565b91620019a06040519384620014b9565b8294818452818301116200133d578281602093846000960137010152565b9b97948c62001a0a91620015669f9d999396620019fb62001a199a9662001a2d9f9e999862000e8d99865261010080602088015286019162001590565b92604081850391015262001590565b8c810360608e01529162001590565b9260a087015285830360c087015262001590565b9160e081840391015262001569565b356001600160a01b03811681036200133d5790565b93919092604051936020948581019062001a70816200026884620018bb565b5190209560405196868801838382378389019862001a9d898260009c8d83820152038084520182620014b9565b5190200362001b5557506001600160a01b039262001abd9291506200141a565b54165b6001600160a01b03908116918262001ad9575050505090565b6040516370a0823160e01b8152911660048201529192908390839060249082905afa92831562001b4857819362001b11575b50505090565b9091809350813d831162001b40575b62001b2c8183620014b9565b810103126200010657505138808062001b0b565b503d62001b20565b50604051903d90823e3d90fd5b9062001b62939162001bc8565b835260008051602062002521833981519152825260408320546001600160a01b031662001ac0565b9062001bc26040805180936020820195865262001bb18151809260208686019101620014db565b8101036020810184520182620014b9565b51902090565b929162001bc2918360209260405195838794868601998a37840191858301600081523701600083820152038084520182620014b9565b939091929362001c118585858462001bc8565b926000938452600080516020620025218339815191529460209580875260018060a01b0397604092898489205416998a1562001c55575b5050505050505050505090565b9091929394959697989a995062001c6f8383888a62001bc8565b97888a52848c5281868b20541662001f8757858c8b62001c90848062001fcb565b928086019362001cef602162001ca7878a62001fcb565b93909884818c019a62001cba8c62002000565b9251968488958a87019b8c378501918983018c815237019060ff60f81b9060f81b1686820152036001810184520182620014b9565b519181831115938462001f5a575b5050505062001f16578989928f92867f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3354169562001d3c818062001fcb565b9262001d49919262001fcb565b91909362001d579062002000565b948d51978897637cfc672b60e01b908901526024880160a0905260c488019062001d819262001590565b92602319938488820301604489015262001d9d908d8d62001590565b908488830301606489015262001db39262001590565b9185830301608486015262001dc89262001590565b9060ff1660a483015203601f198101825262001de59082620014b9565b86519161041690818401918483106001600160401b0384111762001f02578f928a62001e239487969482946200210b89398352820152019062001569565b03908af0801562001ef857918562001ee194927f4e26b9e79b6d53886b2814dc5d5ec399638c0de5b33b2c6e54bf478a5027e3499a9b9c9d94169b8c968c62001e9d8960018060a01b03166000527f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f35602052604060002090565b558c8252855220856bffffffffffffffffffffffff60a01b82541617905562001ed3865198899860608a5260608a019162001590565b928784039088015262001590565b918301520390a23880808080808080808062001c48565b85513d8b823e3d90fd5b634e487b7160e01b8e52604160045260248efd5b875162461bcd60e51b8152600481018f9052601a60248201527f4e6f742068617320746f6b656e2063726561746520696e666f210000000000006044820152606490fd5b505192509081811062001f75575b505015388f818f62001cfd565b600019910360031b1b168e3862001f68565b855162461bcd60e51b8152600481018d9052601760248201527f546f6b656e20616c7265616479207075626c69736865640000000000000000006044820152606490fd5b903590601e19813603018212156200133d57018035906001600160401b0382116200133d576020019181360383136200133d57565b3560ff811681036200133d5790565b7f0d39ce5c7c188987150498f1f6b834805bd8d7ecf27e970807b2a7a1a5207023546001600160a01b031633036200204357565b60405162461bcd60e51b815260206004820152602960248201527f4c696256616c696461746f72436f6e74726f6c6c65723a204d757374206265206044820152683b30b634b230ba37b960b91b6064820152608490fd5b620020bf6001600160a01b03620020b18362001a3c565b161591602081019062001fcb565b905015141590565b6001600160a01b03620020da8262001a3c565b1615620020f657620020f0620015669162001a3c565b6200177f565b620000ed8160206200156693019062001fcb56fe604060808152610416908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160d190816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe608060405236156054577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f3fea264697066735822122064a19d9702f4c0cafcae104799296bb333bea4a6f73053ad2d6b4326dd6fd25264736f6c6343000811003346bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f34a2646970667358221220fb609b06a6ccab32b90e6f86134d5c3650ecd3a3bc542a448c3edaa73e6dabd764736f6c63430008110033",
  "deployedBytecode": "0x608060405260043610156200001357600080fd5b6000803560e01c80632751ed8c146200128f57806339126238146200124d5780633acaf5ec1462000b915780633b9549b31462000b3557806342ec61c81462000acc57806349a759ad1462000a8d57806365a6e6a71462000a49578063690622b81462000a0a5780637958b3c5146200099f578063803a8225146200097d578063d1cd7a8914620001095763f4fb387414620000ae57600080fd5b34620001065760403660031901126200010657602435906001600160401b03821162000106576020620000fe620000f5620000ed36600487016200130d565b369162001982565b60043562001b8a565b604051908152f35b80fd5b503462000106576003196101203682011262000674576001600160401b036024358181116200097957620001429036906004016200130d565b6044939193358381116200097557620001609036906004016200130d565b909260643585811162000971576200017d9036906004016200130d565b9590966084358281116200096d576200019b9036906004016200130d565b909760c4358481116200096557620001b89036906004016200130d565b9590948060e43511620009695760408260e4353603011262000969576101043511620009655760609061010435360301126200050257620001f86200200f565b62000204818b620013e2565b6004358c5260205260ff60408c2054166200090f5762000225818b620013e2565b6004358c5260205260408b20600160ff198254161790556200024c60e4356004016200209a565b156200089a5760405162000277816200026860208201620018bb565b03601f198101835282620014b9565b602081519101208b604051620002a5602082818101948d8a87378d82019083820152038084520182620014b9565b519020908c8c8c6040518760208201928337620002d26020828a81018783820152038084520182620014b9565b51902091620002fc60206040518093898383019687378982019083820152038084520182620014b9565b51902090828214620008145760ff620003178f8790620013aa565b5416156200079e578281036200057057506001600160a01b03905062000342600460e4350162001a3c565b161562000515570362000432577f277405b64a3261050d82a2a3317c85db9f75f3d2e172674de0474f649a9a78e8986200042c969594939291620003f4620003df6001600160a01b03620003978a8e6200141a565b5416620003ee620003ad60e43560040162001a3c565b60405163a9059cbb60e01b60208201526001600160a01b03909116602482015260a43560448201529283906064820190565b03601f198101845283620014b9565b620015b1565b62000405620000f536838f62001982565b9b6200041660e435600401620020c7565b976040519b8c9b60a435978d60043590620019be565b0390a280f35b8a6001600160a01b036200045060046101043501898c8c8962001bfe565b166200046160e43560040162001a3c565b90803b1562000511576040516340c10f1960e01b81526001600160a01b0392909216600483015260a435602483015282908290604490829084905af180156200050657620004de575b5050907f277405b64a3261050d82a2a3317c85db9f75f3d2e172674de0474f649a9a78e8986200042c9695949392620003f4565b620004f090979695949392976200148f565b620005025790919293948a38620004aa565b8a80fd5b6040513d84823e3d90fd5b8280fd5b60405162461bcd60e51b815260206004820152602d60248201527f4c696245524332304472697665723a20726563697069656e74206e6f7420686160448201526c732065766d206164647265737360981b6064820152608490fd5b91509160ff7f1ac0c65048e05abc6ec58fabb62503cd4926ef6a22676f8a0942f241754a9ba69d969b9d9a99949a5416156200071e578d9281620005c08f878f918e610104356004019362001bfe565b9303620006785750506001600160a01b0316803b156200067457604051632770a7eb60e21b815230600482015260a43560248201529082908290604490829084905af18015620005065762000650575b5050907fb9c175d2cd95c2ccff290252181cf6c9d56e2d758e27e3a611af2b4608da1f7a986200042c96959493925b62000405620000f5368b8762001982565b6200066290979695949392976200148f565b620005025790919293948a3862000610565b5080fd5b14620006b3575b5050907fb9c175d2cd95c2ccff290252181cf6c9d56e2d758e27e3a611af2b4608da1f7a986200042c96959493926200063f565b6001600160a01b0316803b1562000674576040516340c10f1960e01b815230600482015260a43560248201529082908290604490829084905af180156200050657156200067f576200070c90979695949392976200148f565b620005025790919293948a386200067f565b60405162461bcd60e51b815260206004820152604c60248201527f4c696245524332304472697665723a204f6e6c792070726f787920627269646760448201527f652063616e2062652063757272656e74436861696e4e616d6520213d2074617260648201526b676574436861696e4e616d6560a01b608482015260a490fd5b60405162461bcd60e51b815260206004820152604260248201527f4c696245524332304472697665722e7472616e66657246726f6d4f746865724360448201527f6861696e3a20496e697469616c20636861696e206e6f74207265676973746572606482015261195960f21b608482015260a490fd5b60405162461bcd60e51b815260206004820152605260248201527f4c696245524332304472697665722e7472616e66657246726f6d4f746865724360448201527f6861696e3a20496e697469616c20636861696e2063616e206e6f74206265206560648201527138bab0b61031bab93932b73a1031b430b4b760711b608482015260a490fd5b60405162461bcd60e51b815260206004820152604160248201527f4c696245524332304472697665722e7472616e66657246726f6d4f746865724360448201527f6861696e3a20726563697069656e742061646472657373206e6f742076616c696064820152601960fa1b608482015260a490fd5b60405162461bcd60e51b815260206004820152602860248201527f4c696245524332304472697665723a206e6f6e636520616c726561647920726560448201526719da5cdd195c995960c21b6064820152608490fd5b8b80fd5b8c80fd5b8980fd5b8780fd5b8580fd5b8380fd5b503462000106576020620000fe620009953662001359565b9291909162001bc8565b50346200010657604036600319011262000106576004356001600160401b0381116200067457620009d59036906004016200130d565b90602435918215158093036200097957620009fa91620009f46200200f565b620013aa565b9060ff8019835416911617905580f35b5034620001065780600319360112620001065760207f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3254604051908152f35b5034620001065760209062000a62620009953662001359565b8152600080516020620025218339815191528252604060018060a01b03912054161515604051908152f35b5034620001065780600319360112620001065760207f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3a54604051908152f35b503462000106576020366003190112620001065762000aea62001342565b62000af46200200f565b7f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3380546001600160a01b0319166001600160a01b0390921691909117905580f35b50346200010657604036600319011262000106576004356001600160401b0381116200067457604060209262000b7d62000b7660ff9436906004016200130d565b90620013e2565b602435825284522054166040519015158152f35b5034620001065760031990608036830112620001065762000bb162001342565b6001600160401b039290604435848111620009795762000bd69036906004016200130d565b92606435908682116200097557604090823603011262001249576024918235918215620011ed5760ff62000c0b8784620013aa565b54161562001183576004019062000c22826200209a565b1562001119576001600160a01b03851660009081527f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f356020526040902054956040519588977f1ac0c65048e05abc6ec58fabb62503cd4926ef6a22676f8a0942f241754a9ba58881549a62000c978c62001452565b9283835260019c8d81169081600014620010f5575060011462001095575b5062000cc492500389620014b9565b1562000fdc57604051634c4f708d60e11b81526001600160a01b0391909116979089816004818c5afa90811562000eed578a9b8b9262000f7e575b5050978a8a6040519160209262000d3584828162000d278183019687815193849201620014db565b8101038084520182620014b9565b5190209162000d5e604051918281810194898b87378982019083820152038084520182620014b9565b51902014158062000f52575b1562000ef857803b156200096d5760405163ab1a63cd60e01b815233600482015230602482015260448101879052908a908290606490829084905af1801562000eed57908a9162000ed1575b50505b7f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3a90815496600019881462000ebf575062000eb0936200042c96937fb9c175d2cd95c2ccff290252181cf6c9d56e2d758e27e3a611af2b4608da1f7a9a9b9c969362000e9c938a01905562000e8d62000e338b8b62001b8a565b9c62000e7e62000e4e62000e47336200177f565b97620020c7565b9962000e6f6040519e8f9e8f90815261010090816020820152019062001569565b8d810360408f01529062001569565b908b820360608d015262001569565b9189830360808b015262001590565b9160a087015285820360c087015262001569565b9083820360e085015262001569565b634e487b7160e01b8b5260116004528afd5b62000edc906200148f565b62000ee957883862000db6565b8880fd5b6040513d8c823e3d90fd5b803b156200096d57604051632770a7eb60e21b815233600482015260248101879052908a908290604490829084905af1801562000eed5762000f3c575b5062000db9565b62000f4a909991996200148f565b973862000f35565b5060ff7f1ac0c65048e05abc6ec58fabb62503cd4926ef6a22676f8a0942f241754a9ba6541662000d6a565b91509a503d808b8d3e62000f93818d620014b9565b8b019060408c83031262000502578b5181811162000965578262000fb9918e016200151c565b9b6020810151918211620009655762000fd49291016200151c565b388062000cff565b96985085986200108f62000ff0896200177f565b986200100c60208b8160405193828580945193849201620014db565b7f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f399082019081520301902080546001600160a01b0319166001600160a01b039092169182179055604080516323b872dd60e01b602080830191909152338b830190815230918101919091529182018990529190620003ee908390606001620003df565b62000db9565b8d5250908b908b7fdc5d12dbc606c4b58c1834e3ea9b4bb05648cd8e6f9896a777fa9708701729e75b828410620010db5750505090602062000cc4928201013862000cb5565b60209294838583549201015201910190918b8b93620010be565b90506020925062000cc494915060ff191682840152151560051b8201013862000cb5565b60405162461bcd60e51b815260206004820152603f818601527f4c696245524332304472697665722e7472616e666572546f4f7468657243686160448201527f696e3a20726563697069656e742061646472657373206e6f742076616c6964006064820152608490fd5b60405162461bcd60e51b8152602060048201526038818601527f4c696245524332304472697665722e7472616e666572546f4f7468657243686160448201527f696e3a20636861696e206e6f74207265676973746572656400000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602f818601527f4c696245524332304472697665722e7472616e666572546f4f7468657243686160448201526e0696e3a20616d6f756e74203c3d203608c1b6064820152608490fd5b8480fd5b5034620001065760209062001266620009953662001359565b8152600080516020620025218339815191528252604060018060a01b0391205416604051908152f35b50346200010657606036600319011262000106576001600160401b036004358181116200051157620012c69036906004016200130d565b916024359081116200097957620012e29036906004016200130d565b6044359490939192906001600160a01b038616860362000106576020620000fe878787878762001a51565b9181601f840112156200133d578235916001600160401b0383116200133d57602083818601950101116200133d57565b600080fd5b600435906001600160a01b03821682036200133d57565b60406003198201126200133d576001600160401b03916004358381116200133d578262001389916004016200130d565b939093926024359182116200133d57620013a6916004016200130d565b9091565b60209082604051938492833781017f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3881520301902090565b60209082604051938492833781017f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3b81520301902090565b60209082604051938492833781017f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3981520301902090565b90600182811c9216801562001484575b60208310146200146e57565b634e487b7160e01b600052602260045260246000fd5b91607f169162001462565b6001600160401b038111620014a357604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b03821117620014a357604052565b60005b838110620014ef5750506000910152565b8181015183820152602001620014de565b6001600160401b038111620014a357601f01601f191660200190565b81601f820112156200133d578051620015358162001500565b92620015456040519485620014b9565b818452602082840101116200133d57620015669160208085019101620014db565b90565b906020916200158481518092818552858086019101620014db565b601f01601f1916010190565b908060209392818452848401376000828201840152601f01601f1916010190565b60018060a01b03169060405160408101908082106001600160401b03831117620014a35762001648916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af13d15620016d8573d916200162a8362001500565b926200163a6040519485620014b9565b83523d868885013e620016dc565b80518062001657575b50505050565b81849181010312620006745782015190811591821503620001065750620016815780808062001651565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6060915b91929015620017415750815115620016f2575090565b3b15620016fc5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015620017555750805190602001fd5b60405162461bcd60e51b8152602060048201529081906200177b90602483019062001569565b0390fd5b604051906001600160a01b0316606082016001600160401b03811183821017620014a357604052602a82526020908183016040368237835115620018a557603090538251600190811015620018a557607860218501536029905b8082116200182f575050620017ec575090565b6064906040519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156200189057855184101562001890576f181899199a1a9b1b9c1cb0b131b232b360811b901a85840185015360041c9180156200187b576000190190620017d9565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b634e487b7160e01b600052603260045260246000fd5b906000917f1ac0c65048e05abc6ec58fabb62503cd4926ef6a22676f8a0942f241754a9ba5908154620018ee8162001452565b926001918083169081156200196657506001146200190c5750505050565b9091929394506000527fdc5d12dbc606c4b58c1834e3ea9b4bb05648cd8e6f9896a777fa9708701729e7906000915b848310620019525750505001903880808062001651565b81816020925485870152019201916200193b565b60ff191684525050508115159091020191503880808062001651565b929192620019908262001500565b91620019a06040519384620014b9565b8294818452818301116200133d578281602093846000960137010152565b9b97948c62001a0a91620015669f9d999396620019fb62001a199a9662001a2d9f9e999862000e8d99865261010080602088015286019162001590565b92604081850391015262001590565b8c810360608e01529162001590565b9260a087015285830360c087015262001590565b9160e081840391015262001569565b356001600160a01b03811681036200133d5790565b93919092604051936020948581019062001a70816200026884620018bb565b5190209560405196868801838382378389019862001a9d898260009c8d83820152038084520182620014b9565b5190200362001b5557506001600160a01b039262001abd9291506200141a565b54165b6001600160a01b03908116918262001ad9575050505090565b6040516370a0823160e01b8152911660048201529192908390839060249082905afa92831562001b4857819362001b11575b50505090565b9091809350813d831162001b40575b62001b2c8183620014b9565b810103126200010657505138808062001b0b565b503d62001b20565b50604051903d90823e3d90fd5b9062001b62939162001bc8565b835260008051602062002521833981519152825260408320546001600160a01b031662001ac0565b9062001bc26040805180936020820195865262001bb18151809260208686019101620014db565b8101036020810184520182620014b9565b51902090565b929162001bc2918360209260405195838794868601998a37840191858301600081523701600083820152038084520182620014b9565b939091929362001c118585858462001bc8565b926000938452600080516020620025218339815191529460209580875260018060a01b0397604092898489205416998a1562001c55575b5050505050505050505090565b9091929394959697989a995062001c6f8383888a62001bc8565b97888a52848c5281868b20541662001f8757858c8b62001c90848062001fcb565b928086019362001cef602162001ca7878a62001fcb565b93909884818c019a62001cba8c62002000565b9251968488958a87019b8c378501918983018c815237019060ff60f81b9060f81b1686820152036001810184520182620014b9565b519181831115938462001f5a575b5050505062001f16578989928f92867f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f3354169562001d3c818062001fcb565b9262001d49919262001fcb565b91909362001d579062002000565b948d51978897637cfc672b60e01b908901526024880160a0905260c488019062001d819262001590565b92602319938488820301604489015262001d9d908d8d62001590565b908488830301606489015262001db39262001590565b9185830301608486015262001dc89262001590565b9060ff1660a483015203601f198101825262001de59082620014b9565b86519161041690818401918483106001600160401b0384111762001f02578f928a62001e239487969482946200210b89398352820152019062001569565b03908af0801562001ef857918562001ee194927f4e26b9e79b6d53886b2814dc5d5ec399638c0de5b33b2c6e54bf478a5027e3499a9b9c9d94169b8c968c62001e9d8960018060a01b03166000527f46bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f35602052604060002090565b558c8252855220856bffffffffffffffffffffffff60a01b82541617905562001ed3865198899860608a5260608a019162001590565b928784039088015262001590565b918301520390a23880808080808080808062001c48565b85513d8b823e3d90fd5b634e487b7160e01b8e52604160045260248efd5b875162461bcd60e51b8152600481018f9052601a60248201527f4e6f742068617320746f6b656e2063726561746520696e666f210000000000006044820152606490fd5b505192509081811062001f75575b505015388f818f62001cfd565b600019910360031b1b168e3862001f68565b855162461bcd60e51b8152600481018d9052601760248201527f546f6b656e20616c7265616479207075626c69736865640000000000000000006044820152606490fd5b903590601e19813603018212156200133d57018035906001600160401b0382116200133d576020019181360383136200133d57565b3560ff811681036200133d5790565b7f0d39ce5c7c188987150498f1f6b834805bd8d7ecf27e970807b2a7a1a5207023546001600160a01b031633036200204357565b60405162461bcd60e51b815260206004820152602960248201527f4c696256616c696461746f72436f6e74726f6c6c65723a204d757374206265206044820152683b30b634b230ba37b960b91b6064820152608490fd5b620020bf6001600160a01b03620020b18362001a3c565b161591602081019062001fcb565b905015141590565b6001600160a01b03620020da8262001a3c565b1615620020f657620020f0620015669162001a3c565b6200177f565b620000ed8160206200156693019062001fcb56fe604060808152610416908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160d190816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe608060405236156054577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f3fea264697066735822122064a19d9702f4c0cafcae104799296bb333bea4a6f73053ad2d6b4326dd6fd25264736f6c6343000811003346bc5be21f6ba06b486f29ccd1182724e01483672510527c7bbd2f354bf91f34a2646970667358221220fb609b06a6ccab32b90e6f86134d5c3650ecd3a3bc542a448c3edaa73e6dabd764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}