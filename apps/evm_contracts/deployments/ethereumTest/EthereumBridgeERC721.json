{
  "address": "0x602AC8d56Fc88d90Fe24D8F12348e02E9Fe8d575",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_currentChain",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isProxyChain",
          "type": "bool"
        },
        {
          "internalType": "bytes32[]",
          "name": "_registeredChains",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "_issuedTokenImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "externalNonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "originalChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "originalToken",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "initialChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "targetChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sender",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipient",
          "type": "bytes"
        }
      ],
      "name": "TransferFromOtherChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "initialChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "originalChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "originalTokenAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "targetChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sender",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipient",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "TransferToOtherChain",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_originalChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_originalToken",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentChain",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_originalChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_originalToken",
          "type": "bytes"
        }
      ],
      "name": "getIssuedTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_initialChain",
          "type": "bytes32"
        }
      ],
      "name": "getTranferId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_initialChain",
          "type": "bytes32"
        }
      ],
      "name": "getTransferId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuedToken",
          "type": "address"
        }
      ],
      "name": "isIssuedTokenPublished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isProxyChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuedTokenImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "issuedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "registeredChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chain",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_value",
          "type": "bool"
        }
      ],
      "name": "setChainRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newValidator",
          "type": "address"
        }
      ],
      "name": "setValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_externalNonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_originalChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_originalToken",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_initialChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_targetChain",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sender",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_recipient",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct BridgeERC721.TokenInfo",
          "name": "_tokenInfo",
          "type": "tuple"
        }
      ],
      "name": "tranferFromOtherChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_targetChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_recipient",
          "type": "bytes"
        }
      ],
      "name": "tranferToOtherChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ce84d8c3fab200a2c7f3d25db167e77dcb99db43bf9c10cac4a6c4d634ee5fe",
  "receipt": {
    "to": null,
    "from": "0xd74e8903131F56e6b20d806525ba958cE7B71F85",
    "contractAddress": "0x602AC8d56Fc88d90Fe24D8F12348e02E9Fe8d575",
    "transactionIndex": 42,
    "gasUsed": "1969421",
    "logsBloom": "0x
    "blockHash": "0xf69f54a68f1ccf2f5cf74db3f17237755f9d51e448aa7c0d1641850851f5b644",
    "transactionHash": "0x7ce84d8c3fab200a2c7f3d25db167e77dcb99db43bf9c10cac4a6c4d634ee5fe",
    "logs": [],
    "blockNumber": 8831377,
    "cumulativeGasUsed": "7355545",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf9b1779dd736d62f9a5815f9f11cb752f6342e8584a01f22e1b19b9a8cb5694e",
    false,
    [
      "0xc5a260213bed973cb2f8d4637aa3ef27b0571649e067f5604af98967165ee957",
      "0x88243e88525a258200bf5ca869571208956d07a0fa57c175fe0c198c7a0c5c26",
      "0x888ddba0dff61733aea9d240a62a83cee02ac4a5c8e58fbc448c21d3b250d4bb",
      "0x7319d77b282d06f1398943db85efac6f25008b7706c519a44e88de5e3c6f0a9e"
    ],
    "0xa2238a2160d44fbf2E53B4AED998Db5148b23EA5",
    "0xd74e8903131F56e6b20d806525ba958cE7B71F85"
  ],
  "numDeployments": 2,
  "solcInputHash": "d20b48e94a7cc765be5a22fd4c193467",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currentChain\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isProxyChain\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"_registeredChains\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_issuedTokenImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"originalChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"originalToken\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"initialChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"targetChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"TransferFromOtherChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"initialChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"originalChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"originalTokenAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"targetChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"TransferToOtherChain\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_originalChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_originalToken\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentChain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_originalChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_originalToken\",\"type\":\"bytes\"}],\"name\":\"getIssuedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_initialChain\",\"type\":\"bytes32\"}],\"name\":\"getTranferId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_initialChain\",\"type\":\"bytes32\"}],\"name\":\"getTransferId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuedToken\",\"type\":\"address\"}],\"name\":\"isIssuedTokenPublished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProxyChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuedTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"issuedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"registeredChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chain\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setChainRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValidator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_externalNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_originalChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_originalToken\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_initialChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_targetChain\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_recipient\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct BridgeERC721.TokenInfo\",\"name\":\"_tokenInfo\",\"type\":\"tuple\"}],\"name\":\"tranferFromOtherChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_targetChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_recipient\",\"type\":\"bytes\"}],\"name\":\"tranferToOtherChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeERC721.sol\":\"BridgeERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BridgeERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport { IERC721Receiver } from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\nimport { ERC1967ProxyCreate2 } from \\\"./utils/ERC1967ProxyCreate2.sol\\\";\\r\\nimport { IIssuedERC721 } from \\\"./interfaces/IIssuedERC721.sol\\\";\\r\\n\\r\\ncontract BridgeERC721 is IERC721Receiver {\\r\\n\\r\\n    address public validator;\\r\\n\\r\\n    bytes32 public currentChain;\\r\\n\\r\\n    uint256 public nonce;\\r\\n\\r\\n    bool public isProxyChain;\\r\\n\\r\\n    mapping(bytes32 => bool) public registeredChains;\\r\\n\\r\\n    mapping(address => bool) public issuedTokens;\\r\\n\\r\\n    mapping(bytes32 => mapping(uint256 => bool)) public registeredNonces;\\r\\n\\r\\n    address public issuedTokenImplementation;\\r\\n\\r\\n    uint256 public initBlock;\\r\\n\\r\\n    event TransferToOtherChain(\\r\\n        bytes32 indexed transferId,\\r\\n        uint256 nonce,\\r\\n        bytes32 initialChain,\\r\\n        bytes32 originalChain,\\r\\n        bytes originalTokenAddress,\\r\\n        bytes32 targetChain,\\r\\n        uint256 tokenId,\\r\\n        bytes sender,\\r\\n        bytes recipient,\\r\\n        string tokenName,\\r\\n        string tokenSymbol\\r\\n    );\\r\\n\\r\\n    event TransferFromOtherChain(\\r\\n        bytes32 indexed transferId,\\r\\n        uint256 externalNonce,\\r\\n        bytes32 originalChain,\\r\\n        bytes originalToken,\\r\\n        bytes32 initialChain,\\r\\n        bytes32 targetChain,\\r\\n        uint256 tokenId,\\r\\n        bytes sender,\\r\\n        bytes recipient\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        bytes32 _currentChain,\\r\\n        bool _isProxyChain,\\r\\n        bytes32[] memory _registeredChains,\\r\\n        address _issuedTokenImplementation,\\r\\n        address _validator\\r\\n    ) {\\r\\n        initBlock = block.number;\\r\\n        currentChain = _currentChain;\\r\\n        isProxyChain = _isProxyChain;\\r\\n        issuedTokenImplementation = _issuedTokenImplementation;\\r\\n        validator = _validator;\\r\\n\\r\\n        uint256 l = _registeredChains.length;\\r\\n        for (uint256 i; i < l; i++) {\\r\\n            registeredChains[_registeredChains[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _tokenId,\\r\\n        bytes calldata _data\\r\\n    ) external pure returns (bytes4) {\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    function setChainRegister(bytes32 _chain, bool _value) external {\\r\\n        enforceIsValidator(msg.sender);\\r\\n        registeredChains[_chain] = _value;\\r\\n    }\\r\\n\\r\\n    function enforceIsValidator(address account) internal view {\\r\\n        require(account == validator, \\\"BridgeERC721: Only validator!\\\");\\r\\n    }\\r\\n\\r\\n    function setValidator(address _newValidator) external {\\r\\n        enforceIsValidator(msg.sender);\\r\\n        validator = _newValidator;\\r\\n    }\\r\\n\\r\\n    function getTransferId(uint256 _nonce, bytes32 _initialChain) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_nonce, _initialChain));\\r\\n    }\\r\\n\\r\\n    function tranferToOtherChain(\\r\\n        address _transferedToken,\\r\\n        uint256 _tokenId,\\r\\n        bytes32 _targetChain,\\r\\n        bytes calldata _recipient\\r\\n    ) external {\\r\\n        require(registeredChains[_targetChain], \\\"BridgeERC721: chain not registered\\\");\\r\\n\\r\\n        bool isIssuedToken = issuedTokens[_transferedToken];\\r\\n        bytes32 initialChain = currentChain;\\r\\n        uint256 _nonce = nonce++;\\r\\n        bytes32 originalChain;\\r\\n        bytes memory originalToken;\\r\\n        string memory tokenName;\\r\\n        string memory tokenSymbol;\\r\\n\\r\\n        if (isIssuedToken) {\\r\\n            // There ISSUED token\\r\\n            IIssuedERC721 issuedToken = IIssuedERC721(_transferedToken);\\r\\n            (originalChain, originalToken, tokenName, tokenSymbol) = issuedToken\\r\\n                .getOriginalTokenInfo();\\r\\n            if (originalChain == _targetChain && isProxyChain) {\\r\\n                issuedToken.permissionedTransferFrom(msg.sender, address(this), _tokenId);\\r\\n            } else {\\r\\n                issuedToken.burn(_tokenId);\\r\\n            }\\r\\n        } else {\\r\\n            // There ORIGINAL token\\r\\n            IERC721Metadata token = IERC721Metadata(_transferedToken);\\r\\n            originalChain = initialChain;\\r\\n            originalToken = abi.encode(_transferedToken);\\r\\n            try token.name() returns (string memory _tokenName) {\\r\\n                tokenName = _tokenName;\\r\\n            } catch {\\r\\n                tokenName = \\\"\\\";\\r\\n            }\\r\\n            try token.symbol() returns (string memory _tokenSymbol) {\\r\\n                tokenSymbol = _tokenSymbol;\\r\\n            } catch {\\r\\n                tokenSymbol = \\\"\\\";\\r\\n            }\\r\\n            token.safeTransferFrom(msg.sender, address(this), _tokenId);\\r\\n        }\\r\\n\\r\\n        emit TransferToOtherChain(\\r\\n            getTransferId(_nonce, initialChain),\\r\\n            _nonce,\\r\\n            initialChain,\\r\\n            originalChain,\\r\\n            originalToken,\\r\\n            _targetChain,\\r\\n            _tokenId,\\r\\n            abi.encode(msg.sender),\\r\\n            _recipient,\\r\\n            tokenName,\\r\\n            tokenSymbol\\r\\n        );\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        string name;\\r\\n        string symbol;\\r\\n    }\\r\\n\\r\\n    function tranferFromOtherChain(\\r\\n        uint256 _externalNonce,\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken,\\r\\n        bytes32 _initialChain,\\r\\n        bytes32 _targetChain,\\r\\n        uint256 _tokenId,\\r\\n        bytes calldata _sender,\\r\\n        bytes calldata _recipient,\\r\\n        TokenInfo calldata _tokenInfo\\r\\n    ) external {\\r\\n        enforceIsValidator(msg.sender);\\r\\n\\r\\n        require(\\r\\n            !registeredNonces[_initialChain][_externalNonce],\\r\\n            \\\"BridgeERC721: nonce already registered\\\"\\r\\n        );\\r\\n\\r\\n        registeredNonces[_initialChain][_externalNonce] = true;\\r\\n\\r\\n        bytes32 _currentChain = currentChain;\\r\\n\\r\\n        require(_initialChain != _currentChain, \\\"BridgeERC721: initialChain == currentChain\\\");\\r\\n\\r\\n        require(registeredChains[_initialChain], \\\"BridgeERC721: Initial chain not registered\\\");\\r\\n\\r\\n        if (_currentChain == _targetChain) {\\r\\n            // This is TARGET chain\\r\\n            address recipientAddress = abi.decode(_recipient, (address));\\r\\n\\r\\n            if (currentChain == _originalChain) {\\r\\n                // This is ORIGINAL chain\\r\\n                address originalTokenAddress = abi.decode(_originalToken, (address));\\r\\n                IERC721Metadata(originalTokenAddress).safeTransferFrom(address(this), recipientAddress, _tokenId);\\r\\n            } else {\\r\\n                // This is SECONDARY chain\\r\\n                address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n                if (!isIssuedTokenPublished(issuedTokenAddress))\\r\\n                    publishNewToken(_originalChain, _originalToken, _tokenInfo);\\r\\n                IIssuedERC721(issuedTokenAddress).mint(recipientAddress, _tokenId);\\r\\n            }\\r\\n\\r\\n            emit TransferFromOtherChain(\\r\\n                getTransferId(_externalNonce, _initialChain),\\r\\n                _externalNonce,\\r\\n                _originalChain,\\r\\n                _originalToken,\\r\\n                _initialChain,\\r\\n                _targetChain,\\r\\n                _tokenId,\\r\\n                _sender,\\r\\n                _recipient\\r\\n            );\\r\\n\\r\\n        } else {\\r\\n            // This is PROXY chain\\r\\n            require(isProxyChain, \\\"BridgeERC721: Only proxy bridge!\\\");\\r\\n\\r\\n            address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n            if (!isIssuedTokenPublished(issuedTokenAddress))\\r\\n                publishNewToken(_originalChain, _originalToken, _tokenInfo);\\r\\n\\r\\n            if (_targetChain == _originalChain) {\\r\\n                // BURN PROXY ISSUED TOKENS\\r\\n                IIssuedERC721(issuedTokenAddress).burn(_tokenId);\\r\\n            } else if(_initialChain == _originalChain) {\\r\\n                // LOCK PROXY ISSUED TOKENS\\r\\n                IIssuedERC721(issuedTokenAddress).mint(address(this), _tokenId);\\r\\n            }\\r\\n\\r\\n            bytes memory sender = _sender; // TODO: fix Error HH600\\r\\n            emit TransferToOtherChain(\\r\\n                getTransferId(_externalNonce, _initialChain),\\r\\n                _externalNonce,\\r\\n                _initialChain,\\r\\n                _originalChain,\\r\\n                _originalToken,\\r\\n                _targetChain,\\r\\n                _tokenId,\\r\\n                sender,\\r\\n                _recipient,\\r\\n                _tokenInfo.name,\\r\\n                _tokenInfo.symbol\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isIssuedTokenPublished(address _issuedToken) public view returns (bool) {\\r\\n        return issuedTokens[_issuedToken];\\r\\n    }\\r\\n\\r\\n    function getIssuedTokenAddress(\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken\\r\\n    ) public view returns (address) {\\r\\n        bytes32 salt = keccak256(abi.encodePacked(_originalChain, _originalToken));\\r\\n        return\\r\\n            address(\\r\\n                uint160(\\r\\n                    uint(\\r\\n                        keccak256(\\r\\n                            abi.encodePacked(\\r\\n                                bytes1(0xff),\\r\\n                                address(this),\\r\\n                                salt,\\r\\n                                keccak256(abi.encodePacked(type(ERC1967ProxyCreate2).creationCode))\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function publishNewToken(\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken,\\r\\n        TokenInfo calldata _tokenInfo\\r\\n    ) internal returns (address) {\\r\\n        bytes32 salt = keccak256(abi.encodePacked(_originalChain, _originalToken));\\r\\n        ERC1967ProxyCreate2 issuedToken = new ERC1967ProxyCreate2{ salt: salt }();\\r\\n        issuedToken.init(\\r\\n            issuedTokenImplementation,\\r\\n            abi.encodeWithSelector(\\r\\n                IIssuedERC721.initialize.selector,\\r\\n                _originalChain,\\r\\n                _originalToken,\\r\\n                _tokenInfo.name,\\r\\n                _tokenInfo.symbol\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address issuedTokenAddress = address(issuedToken);\\r\\n        issuedTokens[issuedTokenAddress] = true;\\r\\n        return issuedTokenAddress;\\r\\n    }\\r\\n\\r\\n    function getTranferId(uint256 _nonce, bytes32 _initialChain) external pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_nonce, _initialChain));\\r\\n    }\\r\\n\\r\\n    function balances(\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken,\\r\\n        address _account\\r\\n    ) external view returns (uint256) {\\r\\n        if (currentChain == _originalChain)\\r\\n            return IERC721Metadata(abi.decode(_originalToken, (address))).balanceOf(_account);\\r\\n\\r\\n        address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n\\r\\n        if (!isIssuedTokenPublished(issuedTokenAddress)) return 0;\\r\\n        return IERC721Metadata(issuedTokenAddress).balanceOf(_account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1fb890311c4fd91ada373f2d1ddc3db6e30548eef07dc14dd9c616086adcec6c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IIssuedERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IIssuedERC721 {\\r\\n    function initialize(\\r\\n        bytes32 _originalChain,\\r\\n        bytes memory _originalToken,\\r\\n        string memory _originalTokenName,\\r\\n        string memory _originalTokenSymbol\\r\\n    ) external;\\r\\n\\r\\n    function getOriginalTokenInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32, bytes memory, string memory, string memory);\\r\\n\\r\\n    function mint(address _recipient, uint256 _tokenId) external;\\r\\n\\r\\n    function burn(uint256 _tokenId) external;\\r\\n\\r\\n    function permissionedTransferFrom(address _from, address _to, uint256 _tokenId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x82208ed389fdb5568249b3163974ecc8f6d9cf767fe56996b49804babc7173dc\",\"license\":\"UNLICENSED\"},\"contracts/utils/ERC1967ProxyCreate2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { Proxy } from \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\r\\nimport { ERC1967Upgrade } from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\r\\n\\r\\ncontract ERC1967ProxyCreate2 is Proxy, ERC1967Upgrade {\\r\\n    /**\\r\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\r\\n     *\\r\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\r\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\r\\n     */\\r\\n    bool internal isInit;\\r\\n\\r\\n    function init(address _logic, bytes memory _data) external {\\r\\n        require(!isInit, \\\"ERC1967ProxyCreate2: already init\\\");\\r\\n        _upgradeToAndCall(_logic, _data, false);\\r\\n        isInit = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _implementation() internal view virtual override returns (address impl) {\\r\\n        return ERC1967Upgrade._getImplementation();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf9d383bb46a39bfdc26b951d92e4025151a43208d2dce1b673941e239dc6cab5\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60406080815234620001915762002114803803806200001e81620001ac565b928339810160a0828203126200019157815191602080820151908115158092036200019157828601516001600160401b0390818111620001915784019480601f8701121562000191578551918211620001965760059582871b90848062000087818501620001ac565b809681520192820101928311620001915784809101915b838310620001805750505050620000c66080620000be60608701620001d2565b9501620001d2565b9343600855600196875560ff199360ff856003541691161760035560018060a01b038060018060a01b031992168260075416176007556000951690855416178455805194845b86811062000123578851611f2c9081620001e88239f35b82518110156200016c5780821b830184015186526004845288862080548616891790556000198114620001585787016200010c565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b86526032600452602486fd5b82518152918101918591016200009e565b600080fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176200019657604052565b51906001600160a01b0382168203620001915756fe608080604052600436101561001357600080fd5b6000803560e01c9182630c1ab73014610aa657508163101c575a14610a7e57816311921fad14610a505781631327d3d814610a10578163150b7a02146109b157816328177228146109565781633a5381b5146109305781633da998fa14610913578163457322b91461080e57816348b4fa58146108f15781635d05125b146108d45781639a573d5d146108845781639d95a7921461084c578163a0b498a41461080e578163affed0e0146107f1578163b00a0be6146107ac578163deddb93c1461010457508063e3cd51e5146100fb5763f7e03bad146100f3575b600080fd5b6100ee610f5c565b506100ee610f5c565b346107a957600319610120368201126107a5576001600160401b03906044358281116105ae57610138903690600401610f2f565b60c4358481116107a157610150903690600401610f2f565b949060e43582811161079d5761016a903690600401610f2f565b959092610104351161079d5760409061010435360301126103395761018e33610f7e565b6064358752600660205260408720600435885260205260ff604088205416610749576064358752600660205260408720600435885260205260408720600160ff1982541617905560015480606435146106f1576064358852600460205260ff60408920541615610699576084350361042057866001600160a01b03610215848801856111bd565b166024356001541460001461034c576001600160a01b03610238878701886111bd565b16803b1561034857604051632142170760e11b81523060048201526001600160a01b0392909216602483015260a435604483015282908290606490829084905af1801561033d57610321575b5050907f93ed05a8c697097712ecd9a75d512ed9bd401c4d006f5050685cfe71a6371a259461030d61031b935b6102bf60643560043561105a565b986102e76040519889986004358a5260243560208b01526101008060408c01528a019161116a565b916064356060890152608435608089015260a43560a089015287830360c089015261116a565b9184830360e086015261116a565b0390a280f35b61032d90939293610fda565b61033957908688610284565b8680fd5b6040513d84823e3d90fd5b8280fd5b6001600160a01b0361036186886024356111dc565b16808352600560205260ff60408420541615610406575b803b15610348576040516340c10f1960e01b81526001600160a01b0392909216600483015260a435602483015282908290604490829084905af1801561033d576103ee575b5050907f93ed05a8c697097712ecd9a75d512ed9bd401c4d006f5050685cfe71a6371a259461030d61031b936102b1565b6103fa90939293610fda565b610339579086886103bd565b61041a6101043560040187896024356112a4565b50610378565b909460ff60035416156106555786916001600160a01b0361044485876024356111dc565b16808452600560205260ff6040852054161561063b575b608435602435036105d157803b156105ae57838091602460405180948193630852cd8d60e31b835260a43560048401525af19081156105c65784916105b2575b50505b6104a78261108e565b916104b56040519384611039565b80835236818301116105ae577f15df3afa97c0595fdf464d97e786a4abd28c060186309d1ff13284f5b7efbdca9661031b9460208361059f9461058296838901378601015261053161059061050e60643560043561105a565b9a6101043560040193610521858061118b565b949095602461010435019061118b565b9790986105646040519d8e9d8e60043581526064356020820152602435604082015261014090816060820152019161116a565b60843560808e015260a43560a08e01528c810360c08e015290611145565b918a830360e08c015261116a565b9187830361010089015261116a565b9184830361012086015261116a565b8380fd5b6105bb90610fda565b61034857828961049b565b6040513d86823e3d90fd5b602435606435146105e3575b5061049e565b803b156105ae576040516340c10f1960e01b815230600482015260a43560248201529084908290604490829084905af19081156105c6578491610627575b506105dd565b61063090610fda565b610348578289610621565b61064f6101043560040186886024356112a4565b5061045b565b606460405162461bcd60e51b815260206004820152602060248201527f4272696467654552433732313a204f6e6c792070726f787920627269646765216044820152fd5b60405162461bcd60e51b815260206004820152602a60248201527f4272696467654552433732313a20496e697469616c20636861696e206e6f74206044820152691c9959da5cdd195c995960b21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602a60248201527f4272696467654552433732313a20696e697469616c436861696e203d3d206375604482015269393932b73a21b430b4b760b11b6064820152608490fd5b60405162461bcd60e51b815260206004820152602660248201527f4272696467654552433732313a206e6f6e636520616c726561647920726567696044820152651cdd195c995960d21b6064820152608490fd5b8780fd5b8580fd5b5080fd5b80fd5b346107a95760403660031901126107a9576024358015158091036107a5576107d333610f7e565b60043582526004602052604082209060ff8019835416911617905580f35b346107a957806003193601126107a9576020600254604051908152f35b346107a95760203660031901126107a95760209060ff906040906001600160a01b03610838610f19565b168152600584522054166040519015158152f35b346107a95760403660031901126107a95760ff6040602092600435815260068452818120602435825284522054166040519015158152f35b346107a95760403660031901126107a957602435906001600160401b0382116107a95760206108c26108b93660048601610f2f565b906004356111dc565b6040516001600160a01b039091168152f35b346107a957806003193601126107a9576020600854604051908152f35b346107a957806003193601126107a957602060ff600354166040519015158152f35b346107a957806003193601126107a9576020600154604051908152f35b346107a957806003193601126107a957546040516001600160a01b039091168152602090f35b346107a95760603660031901126107a9576024356001600160401b0381116107a557610986903690600401610f2f565b906044356001600160a01b03811681036100ee576020926109a992600435611432565b604051908152f35b346107a95760803660031901126107a9576109ca610f19565b506024356001600160a01b038116036100ee576064356001600160401b0381116107a5576109fc903690600401610f2f565b5050604051630a85bd0160e11b8152602090f35b346107a95760203660031901126107a957610a29610f19565b610a3233610f7e565b81546001600160a01b0319166001600160a01b039190911617815580f35b346107a95760203660031901126107a95760ff60406020926004358152600484522054166040519015158152f35b346107a957806003193601126107a9576007546040516001600160a01b039091168152602090f35b346107a55760803660031901126107a557610abf610f19565b60243591906001600160401b036064358181116107a157610ae4903690600401610f2f565b9490604435938488526020956004875260ff60408a20541615610ecc57506001600160a01b031680885260058652604088205460015460025492989296909160ff166000198814610eb8576001880160025515610d7d57604051634c4f708d60e11b8152948a866004818d5afa998a15610d72578b809b8198829a8392610ce8575b5050989791848d1480610cdc575b15610c9157803b156107a55760405163ab1a63cd60e01b8152336004820152306024820152604481018590529082908290606490829084905af1801561033d57610c79575b50505b610bc6848a61105a565b9a60405194338c8701528b8652610bdc86611003565b6040519b8c9b8c528b015260408a01526101408060608b01528901610c0091611145565b91608089015260a088015286810360c0880152610c1c91611145565b9085820360e0870152610c2e9261116a565b838103610100850152610c4091611145565b828103610120840152610c5291611145565b037f15df3afa97c0595fdf464d97e786a4abd28c060186309d1ff13284f5b7efbdca91a280f35b610c8290610fda565b610c8d578b8d610bb9565b8b80fd5b803b156107a557818091602460405180948193630852cd8d60e31b83528960048401525af1801561033d57610cc8575b5050610bbc565b610cd190610fda565b610c8d578b8d610cc1565b5060ff60035416610b74565b99509950505099503d808c893e610cff8189611039565b8701996080888c0312610c8d578b8851988b8101518981116103485781018d601f82011215610348578d818e610d37935191016110cc565b9c60408201518a81116105ae5781610d50918401611103565b9960608301519081116105ae57610d679201611103565b989b97988e80610b66565b6040513d8d823e3d90fd5b97945080976040518689820152888152610d9681611003565b946040516306fdde0360e01b81528b816004818b5afa8c9181610e9b575b50610e955750604051610dc68161101e565b8b8152955b6040516395d89b4160e01b81528c80826004818d5afa90918282610e70575b5050610e6a5750604051610dfd8161101e565b8c8152975b803b15610e6657604051632142170760e11b815233600482015230602482015260448101849052908d908290606490829084905af18015610e5b57610e48575b50610bbc565b610e54909c919c610fda565b9a8c610e42565b6040513d8f823e3d90fd5b8c80fd5b97610e02565b610e8d9293503d8091833e610e858183611039565b810190611120565b908e8e610dea565b95610dcb565b610eb19192508d3d8091833e610e858183611039565b908d610db4565b634e487b7160e01b8b52601160045260248bfd5b62461bcd60e51b815260048101879052602260248201527f4272696467654552433732313a20636861696e206e6f74207265676973746572604482015261195960f21b6064820152608490fd5b600435906001600160a01b03821682036100ee57565b9181601f840112156100ee578235916001600160401b0383116100ee57602083818601950101116100ee57565b50346100ee5760403660031901126100ee5760206109a960243560043561105a565b6000546001600160a01b03908116911603610f9557565b60405162461bcd60e51b815260206004820152601d60248201527f4272696467654552433732313a204f6e6c792076616c696461746f72210000006044820152606490fd5b6001600160401b038111610fed57604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117610fed57604052565b602081019081106001600160401b03821117610fed57604052565b90601f801991011681019081106001600160401b03821117610fed57604052565b906040519060208201928352604082015260408152606081018181106001600160401b03821117610fed5760405251902090565b6001600160401b038111610fed57601f01601f191660200190565b60005b8381106110bc5750506000910152565b81810151838201526020016110ac565b909291926110d98161108e565b916110e76040519384611039565b8294828452828201116100ee5760206111019301906110a9565b565b9080601f830112156100ee57815161111d926020016110cc565b90565b906020828203126100ee5781516001600160401b0381116100ee5761111d9201611103565b9060209161115e815180928185528580860191016110a9565b601f01601f1916010190565b908060209392818452848401376000828201840152601f01601f1916010190565b903590601e19813603018212156100ee57018035906001600160401b0382116100ee576020019181360383136100ee57565b908160209103126100ee57356001600160a01b03811681036100ee5790565b91909160409161120d8380518381946020988984019788528484013781016000838201520386810184520182611039565b519020906104d1815161122285830182611039565b8181528481019161155583396112558584518093611248838301968792519283916110a9565b8101038084520182611039565b51902081519384019260ff60f81b84523060601b6021860152603585015260558401526055835260808301908382106001600160401b03831117610fed5752905190206001600160a01b031690565b9091604092835192602084016000948282528484888301376112d787828781018983820152036020810184520182611039565b51902085516104d1808201908282106001600160401b0383111761141e57908291611a268339039086f5958615611414576007546001600160a01b0397881697169261139f92916113919161136e90611382611343611336858061118b565b919095602081019061118b565b9490938d519b8c99630f29f33560e11b60208c015260248b0152608060448b015260a48a019161116a565b9060231995868984030160648a015261116a565b9285840301608486015261116a565b03601f198101845283611039565b843b15610348576113d29183918551938492839263c0d91eaf60e01b845260048401528760248401526044830190611145565b038183885af1801561140a576113fb575b50828152600560205220805460ff1916600117905590565b61140490610fda565b386113e3565b83513d84823e3d90fd5b85513d86823e3d90fd5b634e487b7160e01b88526041600452602488fd5b90929181600154146114e1576001600160a01b039384926114549291906111dc565b1690600092828452600560205260ff604085205416156114db57602460209260405194859384926370a0823160e01b84521660048301525afa9182156114cf57809261149f57505090565b9091506020823d82116114c7575b816114ba60209383611039565b810103126107a957505190565b3d91506114ad565b604051903d90823e3d90fd5b50505090565b91926020926001600160a01b039250602491839161150291908101906111bd565b169360405194859384926370a0823160e01b84521660048301525afa90811561154857600091611530575090565b906020823d82116114c757816114ba60209383611039565b6040513d6000823e3d90fdfe60808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c6343000811003360808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c63430008110033a264697066735822122025005707c2470ae9e993e8f384ac1b072060b7703f8197dc5962114e898b0bbe64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b6000803560e01c9182630c1ab73014610aa657508163101c575a14610a7e57816311921fad14610a505781631327d3d814610a10578163150b7a02146109b157816328177228146109565781633a5381b5146109305781633da998fa14610913578163457322b91461080e57816348b4fa58146108f15781635d05125b146108d45781639a573d5d146108845781639d95a7921461084c578163a0b498a41461080e578163affed0e0146107f1578163b00a0be6146107ac578163deddb93c1461010457508063e3cd51e5146100fb5763f7e03bad146100f3575b600080fd5b6100ee610f5c565b506100ee610f5c565b346107a957600319610120368201126107a5576001600160401b03906044358281116105ae57610138903690600401610f2f565b60c4358481116107a157610150903690600401610f2f565b949060e43582811161079d5761016a903690600401610f2f565b959092610104351161079d5760409061010435360301126103395761018e33610f7e565b6064358752600660205260408720600435885260205260ff604088205416610749576064358752600660205260408720600435885260205260408720600160ff1982541617905560015480606435146106f1576064358852600460205260ff60408920541615610699576084350361042057866001600160a01b03610215848801856111bd565b166024356001541460001461034c576001600160a01b03610238878701886111bd565b16803b1561034857604051632142170760e11b81523060048201526001600160a01b0392909216602483015260a435604483015282908290606490829084905af1801561033d57610321575b5050907f93ed05a8c697097712ecd9a75d512ed9bd401c4d006f5050685cfe71a6371a259461030d61031b935b6102bf60643560043561105a565b986102e76040519889986004358a5260243560208b01526101008060408c01528a019161116a565b916064356060890152608435608089015260a43560a089015287830360c089015261116a565b9184830360e086015261116a565b0390a280f35b61032d90939293610fda565b61033957908688610284565b8680fd5b6040513d84823e3d90fd5b8280fd5b6001600160a01b0361036186886024356111dc565b16808352600560205260ff60408420541615610406575b803b15610348576040516340c10f1960e01b81526001600160a01b0392909216600483015260a435602483015282908290604490829084905af1801561033d576103ee575b5050907f93ed05a8c697097712ecd9a75d512ed9bd401c4d006f5050685cfe71a6371a259461030d61031b936102b1565b6103fa90939293610fda565b610339579086886103bd565b61041a6101043560040187896024356112a4565b50610378565b909460ff60035416156106555786916001600160a01b0361044485876024356111dc565b16808452600560205260ff6040852054161561063b575b608435602435036105d157803b156105ae57838091602460405180948193630852cd8d60e31b835260a43560048401525af19081156105c65784916105b2575b50505b6104a78261108e565b916104b56040519384611039565b80835236818301116105ae577f15df3afa97c0595fdf464d97e786a4abd28c060186309d1ff13284f5b7efbdca9661031b9460208361059f9461058296838901378601015261053161059061050e60643560043561105a565b9a6101043560040193610521858061118b565b949095602461010435019061118b565b9790986105646040519d8e9d8e60043581526064356020820152602435604082015261014090816060820152019161116a565b60843560808e015260a43560a08e01528c810360c08e015290611145565b918a830360e08c015261116a565b9187830361010089015261116a565b9184830361012086015261116a565b8380fd5b6105bb90610fda565b61034857828961049b565b6040513d86823e3d90fd5b602435606435146105e3575b5061049e565b803b156105ae576040516340c10f1960e01b815230600482015260a43560248201529084908290604490829084905af19081156105c6578491610627575b506105dd565b61063090610fda565b610348578289610621565b61064f6101043560040186886024356112a4565b5061045b565b606460405162461bcd60e51b815260206004820152602060248201527f4272696467654552433732313a204f6e6c792070726f787920627269646765216044820152fd5b60405162461bcd60e51b815260206004820152602a60248201527f4272696467654552433732313a20496e697469616c20636861696e206e6f74206044820152691c9959da5cdd195c995960b21b6064820152608490fd5b60405162461bcd60e51b815260206004820152602a60248201527f4272696467654552433732313a20696e697469616c436861696e203d3d206375604482015269393932b73a21b430b4b760b11b6064820152608490fd5b60405162461bcd60e51b815260206004820152602660248201527f4272696467654552433732313a206e6f6e636520616c726561647920726567696044820152651cdd195c995960d21b6064820152608490fd5b8780fd5b8580fd5b5080fd5b80fd5b346107a95760403660031901126107a9576024358015158091036107a5576107d333610f7e565b60043582526004602052604082209060ff8019835416911617905580f35b346107a957806003193601126107a9576020600254604051908152f35b346107a95760203660031901126107a95760209060ff906040906001600160a01b03610838610f19565b168152600584522054166040519015158152f35b346107a95760403660031901126107a95760ff6040602092600435815260068452818120602435825284522054166040519015158152f35b346107a95760403660031901126107a957602435906001600160401b0382116107a95760206108c26108b93660048601610f2f565b906004356111dc565b6040516001600160a01b039091168152f35b346107a957806003193601126107a9576020600854604051908152f35b346107a957806003193601126107a957602060ff600354166040519015158152f35b346107a957806003193601126107a9576020600154604051908152f35b346107a957806003193601126107a957546040516001600160a01b039091168152602090f35b346107a95760603660031901126107a9576024356001600160401b0381116107a557610986903690600401610f2f565b906044356001600160a01b03811681036100ee576020926109a992600435611432565b604051908152f35b346107a95760803660031901126107a9576109ca610f19565b506024356001600160a01b038116036100ee576064356001600160401b0381116107a5576109fc903690600401610f2f565b5050604051630a85bd0160e11b8152602090f35b346107a95760203660031901126107a957610a29610f19565b610a3233610f7e565b81546001600160a01b0319166001600160a01b039190911617815580f35b346107a95760203660031901126107a95760ff60406020926004358152600484522054166040519015158152f35b346107a957806003193601126107a9576007546040516001600160a01b039091168152602090f35b346107a55760803660031901126107a557610abf610f19565b60243591906001600160401b036064358181116107a157610ae4903690600401610f2f565b9490604435938488526020956004875260ff60408a20541615610ecc57506001600160a01b031680885260058652604088205460015460025492989296909160ff166000198814610eb8576001880160025515610d7d57604051634c4f708d60e11b8152948a866004818d5afa998a15610d72578b809b8198829a8392610ce8575b5050989791848d1480610cdc575b15610c9157803b156107a55760405163ab1a63cd60e01b8152336004820152306024820152604481018590529082908290606490829084905af1801561033d57610c79575b50505b610bc6848a61105a565b9a60405194338c8701528b8652610bdc86611003565b6040519b8c9b8c528b015260408a01526101408060608b01528901610c0091611145565b91608089015260a088015286810360c0880152610c1c91611145565b9085820360e0870152610c2e9261116a565b838103610100850152610c4091611145565b828103610120840152610c5291611145565b037f15df3afa97c0595fdf464d97e786a4abd28c060186309d1ff13284f5b7efbdca91a280f35b610c8290610fda565b610c8d578b8d610bb9565b8b80fd5b803b156107a557818091602460405180948193630852cd8d60e31b83528960048401525af1801561033d57610cc8575b5050610bbc565b610cd190610fda565b610c8d578b8d610cc1565b5060ff60035416610b74565b99509950505099503d808c893e610cff8189611039565b8701996080888c0312610c8d578b8851988b8101518981116103485781018d601f82011215610348578d818e610d37935191016110cc565b9c60408201518a81116105ae5781610d50918401611103565b9960608301519081116105ae57610d679201611103565b989b97988e80610b66565b6040513d8d823e3d90fd5b97945080976040518689820152888152610d9681611003565b946040516306fdde0360e01b81528b816004818b5afa8c9181610e9b575b50610e955750604051610dc68161101e565b8b8152955b6040516395d89b4160e01b81528c80826004818d5afa90918282610e70575b5050610e6a5750604051610dfd8161101e565b8c8152975b803b15610e6657604051632142170760e11b815233600482015230602482015260448101849052908d908290606490829084905af18015610e5b57610e48575b50610bbc565b610e54909c919c610fda565b9a8c610e42565b6040513d8f823e3d90fd5b8c80fd5b97610e02565b610e8d9293503d8091833e610e858183611039565b810190611120565b908e8e610dea565b95610dcb565b610eb19192508d3d8091833e610e858183611039565b908d610db4565b634e487b7160e01b8b52601160045260248bfd5b62461bcd60e51b815260048101879052602260248201527f4272696467654552433732313a20636861696e206e6f74207265676973746572604482015261195960f21b6064820152608490fd5b600435906001600160a01b03821682036100ee57565b9181601f840112156100ee578235916001600160401b0383116100ee57602083818601950101116100ee57565b50346100ee5760403660031901126100ee5760206109a960243560043561105a565b6000546001600160a01b03908116911603610f9557565b60405162461bcd60e51b815260206004820152601d60248201527f4272696467654552433732313a204f6e6c792076616c696461746f72210000006044820152606490fd5b6001600160401b038111610fed57604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117610fed57604052565b602081019081106001600160401b03821117610fed57604052565b90601f801991011681019081106001600160401b03821117610fed57604052565b906040519060208201928352604082015260408152606081018181106001600160401b03821117610fed5760405251902090565b6001600160401b038111610fed57601f01601f191660200190565b60005b8381106110bc5750506000910152565b81810151838201526020016110ac565b909291926110d98161108e565b916110e76040519384611039565b8294828452828201116100ee5760206111019301906110a9565b565b9080601f830112156100ee57815161111d926020016110cc565b90565b906020828203126100ee5781516001600160401b0381116100ee5761111d9201611103565b9060209161115e815180928185528580860191016110a9565b601f01601f1916010190565b908060209392818452848401376000828201840152601f01601f1916010190565b903590601e19813603018212156100ee57018035906001600160401b0382116100ee576020019181360383136100ee57565b908160209103126100ee57356001600160a01b03811681036100ee5790565b91909160409161120d8380518381946020988984019788528484013781016000838201520386810184520182611039565b519020906104d1815161122285830182611039565b8181528481019161155583396112558584518093611248838301968792519283916110a9565b8101038084520182611039565b51902081519384019260ff60f81b84523060601b6021860152603585015260558401526055835260808301908382106001600160401b03831117610fed5752905190206001600160a01b031690565b9091604092835192602084016000948282528484888301376112d787828781018983820152036020810184520182611039565b51902085516104d1808201908282106001600160401b0383111761141e57908291611a268339039086f5958615611414576007546001600160a01b0397881697169261139f92916113919161136e90611382611343611336858061118b565b919095602081019061118b565b9490938d519b8c99630f29f33560e11b60208c015260248b0152608060448b015260a48a019161116a565b9060231995868984030160648a015261116a565b9285840301608486015261116a565b03601f198101845283611039565b843b15610348576113d29183918551938492839263c0d91eaf60e01b845260048401528760248401526044830190611145565b038183885af1801561140a576113fb575b50828152600560205220805460ff1916600117905590565b61140490610fda565b386113e3565b83513d84823e3d90fd5b85513d86823e3d90fd5b634e487b7160e01b88526041600452602488fd5b90929181600154146114e1576001600160a01b039384926114549291906111dc565b1690600092828452600560205260ff604085205416156114db57602460209260405194859384926370a0823160e01b84521660048301525afa9182156114cf57809261149f57505090565b9091506020823d82116114c7575b816114ba60209383611039565b810103126107a957505190565b3d91506114ad565b604051903d90823e3d90fd5b50505090565b91926020926001600160a01b039250602491839161150291908101906111bd565b169360405194859384926370a0823160e01b84521660048301525afa90811561154857600091611530575090565b906020823d82116114c757816114ba60209383611039565b6040513d6000823e3d90fdfe60808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c6343000811003360808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c63430008110033a264697066735822122025005707c2470ae9e993e8f384ac1b072060b7703f8197dc5962114e898b0bbe64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4772,
        "contract": "contracts/BridgeERC721.sol:BridgeERC721",
        "label": "validator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4774,
        "contract": "contracts/BridgeERC721.sol:BridgeERC721",
        "label": "currentChain",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 4776,
        "contract": "contracts/BridgeERC721.sol:BridgeERC721",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4778,
        "contract": "contracts/BridgeERC721.sol:BridgeERC721",
        "label": "isProxyChain",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4782,
        "contract": "contracts/BridgeERC721.sol:BridgeERC721",
        "label": "registeredChains",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4786,
        "contract": "contracts/BridgeERC721.sol:BridgeERC721",
        "label": "issuedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4792,
        "contract": "contracts/BridgeERC721.sol:BridgeERC721",
        "label": "registeredNonces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4794,
        "contract": "contracts/BridgeERC721.sol:BridgeERC721",
        "label": "issuedTokenImplementation",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4796,
        "contract": "contracts/BridgeERC721.sol:BridgeERC721",
        "label": "initBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}