{
  "address": "0x7207E5bE17217E4043073e2B24a22e5Aea6FddF5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_currentChain",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isProxyChain",
          "type": "bool"
        },
        {
          "internalType": "bytes32[]",
          "name": "_registeredChains",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "_issuedTokenImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "externalNonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "originalChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "originalToken",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "initialChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "targetChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sender",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipient",
          "type": "bytes"
        }
      ],
      "name": "BatchTransferFromOtherChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "initialChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "originalChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "originalTokenAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "targetChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sender",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipient",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "tokenUris",
          "type": "string[]"
        }
      ],
      "name": "BatchTransferToOtherChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "externalNonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "originalChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "originalToken",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "initialChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "targetChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sender",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipient",
          "type": "bytes"
        }
      ],
      "name": "TransferFromOtherChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "initialChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "originalChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "originalTokenAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "targetChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sender",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipient",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "name": "TransferToOtherChain",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_originalChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_originalToken",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_externalNonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_originalChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_originalToken",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_initialChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_targetChain",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_sender",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_recipient",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "_tokenUris",
          "type": "string[]"
        }
      ],
      "name": "batchTranferFromOtherChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferedToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "_targetChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_recipient",
          "type": "bytes"
        }
      ],
      "name": "batchTranferToOtherChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentChain",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_originalChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_originalToken",
          "type": "bytes"
        }
      ],
      "name": "getIssuedTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_initialChain",
          "type": "bytes32"
        }
      ],
      "name": "getTranferId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_initialChain",
          "type": "bytes32"
        }
      ],
      "name": "getTransferId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuedToken",
          "type": "address"
        }
      ],
      "name": "isIssuedTokenPublished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isProxyChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuedTokenImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "issuedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "registeredChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chain",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_value",
          "type": "bool"
        }
      ],
      "name": "setChainRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newValidator",
          "type": "address"
        }
      ],
      "name": "setValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_externalNonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_originalChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_originalToken",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_initialChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_targetChain",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sender",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_recipient",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_tokenUri",
          "type": "string"
        }
      ],
      "name": "tranferFromOtherChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_targetChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_recipient",
          "type": "bytes"
        }
      ],
      "name": "tranferToOtherChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6d06fe7a55763a09fdaf3277b0c83835a9fbb41c37675c93a9aa6282f1f33cb",
  "receipt": {
    "to": null,
    "from": "0xc01aABaf32bC56ab4c0F033fEA3B6935Eb7Ab8bb",
    "contractAddress": "0x7207E5bE17217E4043073e2B24a22e5Aea6FddF5",
    "transactionIndex": 2,
    "gasUsed": "2900430",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbc87e0703912e916ba6568f820d738b18c12d6a8d87ec37184e3db8458671230",
    "transactionHash": "0xc6d06fe7a55763a09fdaf3277b0c83835a9fbb41c37675c93a9aa6282f1f33cb",
    "logs": [],
    "blockNumber": 28953325,
    "cumulativeGasUsed": "4795870",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x888ddba0dff61733aea9d240a62a83cee02ac4a5c8e58fbc448c21d3b250d4bb",
    false,
    [
      "0xc5a260213bed973cb2f8d4637aa3ef27b0571649e067f5604af98967165ee957",
      "0x88243e88525a258200bf5ca869571208956d07a0fa57c175fe0c198c7a0c5c26",
      "0xf9b1779dd736d62f9a5815f9f11cb752f6342e8584a01f22e1b19b9a8cb5694e",
      "0x7319d77b282d06f1398943db85efac6f25008b7706c519a44e88de5e3c6f0a9e"
    ],
    "0x8dfDFa22A8A1D720FE9C3Ef5e94ec0cEd1DCe5A5",
    "0xc01aABaf32bC56ab4c0F033fEA3B6935Eb7Ab8bb"
  ],
  "numDeployments": 1,
  "solcInputHash": "03a9c54fc26d4d46e0442780ce9532f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currentChain\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isProxyChain\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"_registeredChains\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_issuedTokenImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"originalChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"originalToken\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"initialChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"targetChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"BatchTransferFromOtherChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"initialChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"originalChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"originalTokenAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"targetChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"tokenUris\",\"type\":\"string[]\"}],\"name\":\"BatchTransferToOtherChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"originalChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"originalToken\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"initialChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"targetChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"TransferFromOtherChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"initialChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"originalChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"originalTokenAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"targetChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"TransferToOtherChain\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_originalChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_originalToken\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_externalNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_originalChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_originalToken\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_initialChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_targetChain\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_recipient\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"_tokenUris\",\"type\":\"string[]\"}],\"name\":\"batchTranferFromOtherChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferedToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"_targetChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_recipient\",\"type\":\"bytes\"}],\"name\":\"batchTranferToOtherChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentChain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_originalChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_originalToken\",\"type\":\"bytes\"}],\"name\":\"getIssuedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_initialChain\",\"type\":\"bytes32\"}],\"name\":\"getTranferId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_initialChain\",\"type\":\"bytes32\"}],\"name\":\"getTransferId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuedToken\",\"type\":\"address\"}],\"name\":\"isIssuedTokenPublished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProxyChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuedTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"issuedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"registeredChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chain\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setChainRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValidator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_externalNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_originalChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_originalToken\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_initialChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_targetChain\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_recipient\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"}],\"name\":\"tranferFromOtherChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_targetChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_recipient\",\"type\":\"bytes\"}],\"name\":\"tranferToOtherChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeERC1155.sol\":\"BridgeERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BridgeERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IERC1155MetadataURI } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\r\\nimport { IERC1155Receiver } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\n\\r\\nimport { ERC1967ProxyCreate2 } from \\\"./utils/ERC1967ProxyCreate2.sol\\\";\\r\\nimport { IIssuedERC1155 } from \\\"./interfaces/IIssuedERC1155.sol\\\";\\r\\n\\r\\ncontract BridgeERC1155 is IERC1155Receiver {\\r\\n    address public validator;\\r\\n\\r\\n    bytes32 public currentChain;\\r\\n\\r\\n    uint256 public nonce;\\r\\n\\r\\n    bool public isProxyChain;\\r\\n\\r\\n    mapping(bytes32 => bool) public registeredChains;\\r\\n\\r\\n    mapping(address => bool) public issuedTokens;\\r\\n\\r\\n    mapping(bytes32 => mapping(uint256 => bool)) public registeredNonces;\\r\\n\\r\\n    address public issuedTokenImplementation;\\r\\n\\r\\n    uint256 public initBlock;\\r\\n\\r\\n    event TransferToOtherChain(\\r\\n        bytes32 indexed transferId,\\r\\n        uint256 nonce,\\r\\n        bytes32 initialChain,\\r\\n        bytes32 originalChain,\\r\\n        bytes originalTokenAddress,\\r\\n        bytes32 targetChain,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount,\\r\\n        bytes sender,\\r\\n        bytes recipient,\\r\\n        string tokenUri\\r\\n    );\\r\\n\\r\\n    event BatchTransferToOtherChain(\\r\\n        bytes32 indexed transferId,\\r\\n        uint256 nonce,\\r\\n        bytes32 initialChain,\\r\\n        bytes32 originalChain,\\r\\n        bytes originalTokenAddress,\\r\\n        bytes32 targetChain,\\r\\n        uint256[] tokenIds,\\r\\n        uint256[] amounts,\\r\\n        bytes sender,\\r\\n        bytes recipient,\\r\\n        string[] tokenUris\\r\\n    );\\r\\n\\r\\n    event TransferFromOtherChain(\\r\\n        bytes32 indexed transferId,\\r\\n        uint256 externalNonce,\\r\\n        bytes32 originalChain,\\r\\n        bytes originalToken,\\r\\n        bytes32 initialChain,\\r\\n        bytes32 targetChain,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount,\\r\\n        bytes sender,\\r\\n        bytes recipient\\r\\n    );\\r\\n\\r\\n    event BatchTransferFromOtherChain(\\r\\n        bytes32 indexed transferId,\\r\\n        uint256 externalNonce,\\r\\n        bytes32 originalChain,\\r\\n        bytes originalToken,\\r\\n        bytes32 initialChain,\\r\\n        bytes32 targetChain,\\r\\n        uint256[] tokenIds,\\r\\n        uint256[] amounts,\\r\\n        bytes sender,\\r\\n        bytes recipient\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        bytes32 _currentChain,\\r\\n        bool _isProxyChain,\\r\\n        bytes32[] memory _registeredChains,\\r\\n        address _issuedTokenImplementation,\\r\\n        address _validator\\r\\n    ) {\\r\\n        initBlock = block.number;\\r\\n        currentChain = _currentChain;\\r\\n        isProxyChain = _isProxyChain;\\r\\n        issuedTokenImplementation = _issuedTokenImplementation;\\r\\n        validator = _validator;\\r\\n\\r\\n        uint256 l = _registeredChains.length;\\r\\n        for (uint256 i; i < l; i++) {\\r\\n            registeredChains[_registeredChains[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID) external pure override returns (bool) {\\r\\n        return\\r\\n            interfaceID == 0x01ffc9a7 || // ERC-165\\r\\n            interfaceID == 0x4e2312e0; // ERC-1155\\r\\n    }\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC1155Receiver.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n\\r\\n    function setChainRegister(bytes32 _chain, bool _value) external {\\r\\n        enforceIsValidator(msg.sender);\\r\\n        registeredChains[_chain] = _value;\\r\\n    }\\r\\n\\r\\n    function enforceIsValidator(address account) internal view {\\r\\n        require(account == validator, \\\"BridgeERC1155: Only validator!\\\");\\r\\n    }\\r\\n\\r\\n    function setValidator(address _newValidator) external {\\r\\n        enforceIsValidator(msg.sender);\\r\\n        validator = _newValidator;\\r\\n    }\\r\\n\\r\\n    function getTransferId(uint256 _nonce, bytes32 _initialChain) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_nonce, _initialChain));\\r\\n    }\\r\\n\\r\\n    function tranferToOtherChain(\\r\\n        address _transferedToken,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _amount,\\r\\n        bytes32 _targetChain,\\r\\n        bytes calldata _recipient\\r\\n    ) external {\\r\\n        require(_tokenId > 0, \\\"BridgeERC1155: _tokenId < 0\\\");\\r\\n        require(registeredChains[_targetChain], \\\"BridgeERC1155: chain not registered\\\");\\r\\n\\r\\n        bool isIssuedToken = issuedTokens[_transferedToken];\\r\\n        bytes32 initialChain = currentChain;\\r\\n        uint256 _nonce = nonce++;\\r\\n        bytes32 originalChain;\\r\\n        bytes memory originalToken;\\r\\n        string memory tokenUri;\\r\\n\\r\\n        if (isIssuedToken) {\\r\\n            // There ISSUED token\\r\\n            IIssuedERC1155 issuedToken = IIssuedERC1155(_transferedToken);\\r\\n            (originalChain, originalToken) = issuedToken.getOriginalTokenInfo();\\r\\n            tokenUri = issuedToken.uri(_tokenId);\\r\\n            if (originalChain == _targetChain && isProxyChain) {\\r\\n                issuedToken.permissionedTransferFrom(msg.sender, address(this), _tokenId, _amount);\\r\\n            } else {\\r\\n                issuedToken.burn(msg.sender, _tokenId, _amount);\\r\\n            }\\r\\n        } else {\\r\\n            // There ORIGINAL token\\r\\n            IERC1155MetadataURI token = IERC1155MetadataURI(_transferedToken);\\r\\n            originalChain = initialChain;\\r\\n            originalToken = abi.encode(_transferedToken);\\r\\n            try token.uri(_tokenId) returns (string memory _tokenUri) {\\r\\n                tokenUri = _tokenUri;\\r\\n            } catch {\\r\\n                tokenUri = \\\"\\\";\\r\\n            }\\r\\n            token.safeTransferFrom(msg.sender, address(this), _tokenId, _amount, \\\"\\\");\\r\\n        }\\r\\n\\r\\n        emit TransferToOtherChain(\\r\\n            getTransferId(_nonce, initialChain),\\r\\n            _nonce,\\r\\n            initialChain,\\r\\n            originalChain,\\r\\n            originalToken,\\r\\n            _targetChain,\\r\\n            _tokenId,\\r\\n            _amount,\\r\\n            abi.encode(msg.sender),\\r\\n            _recipient,\\r\\n            tokenUri\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function batchTranferToOtherChain(\\r\\n        address _transferedToken,\\r\\n        uint256[] memory _tokenIds,\\r\\n        uint256[] memory _amounts,\\r\\n        bytes32 _targetChain,\\r\\n        bytes calldata _recipient\\r\\n    ) external {\\r\\n        require(_tokenIds.length > 0, \\\"BridgeERC1155: _tokenIds.length == 0\\\");\\r\\n        require(\\r\\n            _tokenIds.length == _amounts.length,\\r\\n            \\\"BridgeERC1155: _tokenIds.length != _amounts.length\\\"\\r\\n        );\\r\\n        require(registeredChains[_targetChain], \\\"BridgeERC1155: chain not registered\\\");\\r\\n\\r\\n        bool isIssuedToken = issuedTokens[_transferedToken];\\r\\n        bytes32 initialChain = currentChain;\\r\\n        uint256 _nonce = nonce++;\\r\\n        bytes32 originalChain;\\r\\n        bytes memory originalToken;\\r\\n        string[] memory tokenUris;\\r\\n\\r\\n        if (isIssuedToken) {\\r\\n            // There ISSUED token\\r\\n            IIssuedERC1155 issuedToken = IIssuedERC1155(_transferedToken);\\r\\n\\r\\n            (originalChain, originalToken) = issuedToken.getOriginalTokenInfo();\\r\\n            tokenUris = issuedToken.uriBatch(_tokenIds);\\r\\n            if (originalChain == _targetChain && isProxyChain) {\\r\\n                issuedToken.permissionedBatchTransferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    _tokenIds,\\r\\n                    _amounts\\r\\n                );\\r\\n            } else {\\r\\n                issuedToken.burnBatch(msg.sender, _tokenIds, _amounts);\\r\\n            }\\r\\n        } else {\\r\\n            // There ORIGINAL token\\r\\n            IERC1155MetadataURI token = IERC1155MetadataURI(_transferedToken);\\r\\n            originalChain = initialChain;\\r\\n            originalToken = abi.encode(_transferedToken);\\r\\n            uint256 l = _tokenIds.length;\\r\\n            tokenUris = new string[](l);\\r\\n            for (uint256 i; i < l; i++) {\\r\\n                try token.uri(_tokenIds[i]) returns (string memory _tokenUri) {\\r\\n                    tokenUris[i] = _tokenUri;\\r\\n                } catch {}\\r\\n            }\\r\\n            token.safeBatchTransferFrom(msg.sender, address(this), _tokenIds, _amounts, \\\"\\\");\\r\\n        }\\r\\n\\r\\n        emit BatchTransferToOtherChain(\\r\\n            getTransferId(_nonce, initialChain),\\r\\n            _nonce,\\r\\n            initialChain,\\r\\n            originalChain,\\r\\n            originalToken,\\r\\n            _targetChain,\\r\\n            _tokenIds,\\r\\n            _amounts,\\r\\n            abi.encode(msg.sender),\\r\\n            _recipient,\\r\\n            tokenUris\\r\\n        );\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        string uri;\\r\\n    }\\r\\n\\r\\n    function tranferFromOtherChain(\\r\\n        uint256 _externalNonce,\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken,\\r\\n        bytes32 _initialChain,\\r\\n        bytes32 _targetChain,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _amount,\\r\\n        bytes calldata _sender,\\r\\n        bytes calldata _recipient,\\r\\n        string calldata _tokenUri\\r\\n    ) external {\\r\\n        enforceIsValidator(msg.sender);\\r\\n\\r\\n        require(\\r\\n            !registeredNonces[_initialChain][_externalNonce],\\r\\n            \\\"BridgeERC1155: nonce already registered\\\"\\r\\n        );\\r\\n\\r\\n        registeredNonces[_initialChain][_externalNonce] = true;\\r\\n\\r\\n        bytes32 _currentChain = currentChain;\\r\\n\\r\\n        require(_initialChain != _currentChain, \\\"BridgeERC1155: initialChain == currentChain\\\");\\r\\n\\r\\n        require(registeredChains[_initialChain], \\\"BridgeERC1155: Initial chain not registered\\\");\\r\\n\\r\\n        if (_currentChain == _targetChain) {\\r\\n            // This is TARGET chain\\r\\n            address recipientAddress = abi.decode(_recipient, (address));\\r\\n\\r\\n            if (currentChain == _originalChain) {\\r\\n                // This is ORIGINAL chain\\r\\n                address originalTokenAddress = abi.decode(_originalToken, (address));\\r\\n                IERC1155MetadataURI(originalTokenAddress).safeTransferFrom(\\r\\n                    address(this),\\r\\n                    recipientAddress,\\r\\n                    _tokenId,\\r\\n                    _amount,\\r\\n                    \\\"\\\"\\r\\n                );\\r\\n            } else {\\r\\n                // This is SECONDARY chain\\r\\n                address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n                if (!isIssuedTokenPublished(issuedTokenAddress))\\r\\n                    publishNewToken(_originalChain, _originalToken);\\r\\n                IIssuedERC1155(issuedTokenAddress).mint(\\r\\n                    recipientAddress,\\r\\n                    _tokenId,\\r\\n                    _amount,\\r\\n                    _tokenUri\\r\\n                );\\r\\n            }\\r\\n\\r\\n            emit TransferFromOtherChain(\\r\\n                getTransferId(_externalNonce, _initialChain),\\r\\n                _externalNonce,\\r\\n                _originalChain,\\r\\n                _originalToken,\\r\\n                _initialChain,\\r\\n                _targetChain,\\r\\n                _tokenId,\\r\\n                _amount,\\r\\n                _sender,\\r\\n                _recipient\\r\\n            );\\r\\n        } else {\\r\\n            // This is PROXY chain\\r\\n            require(isProxyChain, \\\"BridgeERC1155: Only proxy bridge!\\\");\\r\\n\\r\\n            address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n            if (!isIssuedTokenPublished(issuedTokenAddress))\\r\\n                publishNewToken(_originalChain, _originalToken);\\r\\n\\r\\n            if (_targetChain == _originalChain) {\\r\\n                // BURN PROXY ISSUED TOKENS\\r\\n                IIssuedERC1155(issuedTokenAddress).burn(address(this), _tokenId, _amount);\\r\\n            } else if (_initialChain == _originalChain) {\\r\\n                // LOCK PROXY ISSUED TOKENS\\r\\n                IIssuedERC1155(issuedTokenAddress).mint(\\r\\n                    address(this),\\r\\n                    _tokenId,\\r\\n                    _amount,\\r\\n                    _tokenUri\\r\\n                );\\r\\n            }\\r\\n\\r\\n            bytes memory sender = _sender; // TODO: fix Error HH600\\r\\n            emit TransferToOtherChain(\\r\\n                getTransferId(_externalNonce, _initialChain),\\r\\n                _externalNonce,\\r\\n                _initialChain,\\r\\n                _originalChain,\\r\\n                _originalToken,\\r\\n                _targetChain,\\r\\n                _tokenId,\\r\\n                _amount,\\r\\n                sender,\\r\\n                _recipient,\\r\\n                _tokenUri\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchTranferFromOtherChain(\\r\\n        uint256 _externalNonce,\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken,\\r\\n        bytes32 _initialChain,\\r\\n        bytes32 _targetChain,\\r\\n        uint256[] memory _tokenIds,\\r\\n        uint256[] memory _amounts,\\r\\n        bytes calldata _sender,\\r\\n        bytes calldata _recipient,\\r\\n        string[] memory _tokenUris\\r\\n    ) external {\\r\\n        enforceIsValidator(msg.sender);\\r\\n\\r\\n        require(_tokenIds.length > 0, \\\"BridgeERC1155: _tokenIds.length == 0\\\");\\r\\n        require(\\r\\n            _tokenIds.length == _amounts.length,\\r\\n            \\\"BridgeERC1155: _tokenIds.length != _amounts.length\\\"\\r\\n        );\\r\\n        require(\\r\\n            !registeredNonces[_initialChain][_externalNonce],\\r\\n            \\\"BridgeERC1155: nonce already registered\\\"\\r\\n        );\\r\\n\\r\\n        registeredNonces[_initialChain][_externalNonce] = true;\\r\\n\\r\\n        bytes32 _currentChain = currentChain;\\r\\n\\r\\n        require(_initialChain != _currentChain, \\\"BridgeERC1155: initialChain == currentChain\\\");\\r\\n\\r\\n        require(registeredChains[_initialChain], \\\"BridgeERC1155: Initial chain not registered\\\");\\r\\n\\r\\n        if (_currentChain == _targetChain) {\\r\\n            // This is TARGET chain\\r\\n            address recipientAddress = abi.decode(_recipient, (address));\\r\\n\\r\\n            if (currentChain == _originalChain) {\\r\\n                // This is ORIGINAL chain\\r\\n                address originalTokenAddress = abi.decode(_originalToken, (address));\\r\\n                IERC1155MetadataURI(originalTokenAddress).safeBatchTransferFrom(\\r\\n                    address(this),\\r\\n                    recipientAddress,\\r\\n                    _tokenIds,\\r\\n                    _amounts,\\r\\n                    \\\"\\\"\\r\\n                );\\r\\n            } else {\\r\\n                // This is SECONDARY chain\\r\\n                address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n                if (!isIssuedTokenPublished(issuedTokenAddress))\\r\\n                    publishNewToken(_originalChain, _originalToken);\\r\\n\\r\\n                IIssuedERC1155(issuedTokenAddress).mintBatch(\\r\\n                    recipientAddress,\\r\\n                    _tokenIds,\\r\\n                    _amounts,\\r\\n                    _tokenUris\\r\\n                );\\r\\n            }\\r\\n\\r\\n            emit BatchTransferFromOtherChain(\\r\\n                getTransferId(_externalNonce, _initialChain),\\r\\n                _externalNonce,\\r\\n                _originalChain,\\r\\n                _originalToken,\\r\\n                _initialChain,\\r\\n                _targetChain,\\r\\n                _tokenIds,\\r\\n                _amounts,\\r\\n                _sender,\\r\\n                _recipient\\r\\n            );\\r\\n        } else {\\r\\n            // This is PROXY chain\\r\\n            require(isProxyChain, \\\"BridgeERC1155: Only proxy bridge!\\\");\\r\\n\\r\\n            address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n            if (!isIssuedTokenPublished(issuedTokenAddress))\\r\\n                publishNewToken(_originalChain, _originalToken);\\r\\n\\r\\n            if (_targetChain == _originalChain) {\\r\\n                // BURN PROXY ISSUED TOKENS\\r\\n                IIssuedERC1155(issuedTokenAddress).burnBatch(address(this), _tokenIds, _amounts);\\r\\n            } else if (_initialChain == _originalChain) {\\r\\n                // LOCK PROXY ISSUED TOKENS\\r\\n                IIssuedERC1155(issuedTokenAddress).mintBatch(\\r\\n                    address(this),\\r\\n                    _tokenIds,\\r\\n                    _amounts,\\r\\n                    _tokenUris\\r\\n                );\\r\\n            }\\r\\n\\r\\n            bytes memory sender = _sender; // TODO: fix Error HH600\\r\\n            emit BatchTransferToOtherChain(\\r\\n                getTransferId(_externalNonce, _initialChain),\\r\\n                _externalNonce,\\r\\n                _initialChain,\\r\\n                _originalChain,\\r\\n                _originalToken,\\r\\n                _targetChain,\\r\\n                _tokenIds,\\r\\n                _amounts,\\r\\n                sender,\\r\\n                _recipient,\\r\\n                _tokenUris\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isIssuedTokenPublished(address _issuedToken) public view returns (bool) {\\r\\n        return issuedTokens[_issuedToken];\\r\\n    }\\r\\n\\r\\n    function getIssuedTokenAddress(\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken\\r\\n    ) public view returns (address) {\\r\\n        bytes32 salt = keccak256(abi.encodePacked(_originalChain, _originalToken));\\r\\n        return\\r\\n            address(\\r\\n                uint160(\\r\\n                    uint(\\r\\n                        keccak256(\\r\\n                            abi.encodePacked(\\r\\n                                bytes1(0xff),\\r\\n                                address(this),\\r\\n                                salt,\\r\\n                                keccak256(abi.encodePacked(type(ERC1967ProxyCreate2).creationCode))\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function publishNewToken(\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken\\r\\n    ) internal returns (address) {\\r\\n        bytes32 salt = keccak256(abi.encodePacked(_originalChain, _originalToken));\\r\\n        ERC1967ProxyCreate2 issuedToken = new ERC1967ProxyCreate2{ salt: salt }();\\r\\n        issuedToken.init(\\r\\n            issuedTokenImplementation,\\r\\n            abi.encodeWithSelector(\\r\\n                IIssuedERC1155.initialize.selector,\\r\\n                _originalChain,\\r\\n                _originalToken\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address issuedTokenAddress = address(issuedToken);\\r\\n        issuedTokens[issuedTokenAddress] = true;\\r\\n        return issuedTokenAddress;\\r\\n    }\\r\\n\\r\\n    function getTranferId(uint256 _nonce, bytes32 _initialChain) external pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_nonce, _initialChain));\\r\\n    }\\r\\n\\r\\n    function balances(\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken,\\r\\n        address _account,\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (uint256) {\\r\\n        if (currentChain == _originalChain)\\r\\n            return\\r\\n                IERC1155MetadataURI(abi.decode(_originalToken, (address))).balanceOf(\\r\\n                    _account,\\r\\n                    _tokenId\\r\\n                );\\r\\n\\r\\n        address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n\\r\\n        if (!isIssuedTokenPublished(issuedTokenAddress)) return 0;\\r\\n        return IERC1155MetadataURI(issuedTokenAddress).balanceOf(_account, _tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0c4d8c684b77066a19b1b5587cf075ad77e4a534ea7701aa4ca17402024fb4c1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IIssuedERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IIssuedERC1155 {\\r\\n    function uri(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    function uriBatch(uint256[] memory _tokenIds) external view returns (string[] memory);\\r\\n\\r\\n    function initialize(bytes32 _originalChain, bytes memory _originalToken) external;\\r\\n\\r\\n    function getOriginalTokenInfo() external view returns (bytes32, bytes memory);\\r\\n\\r\\n    function mint(\\r\\n        address _recipient,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _amount,\\r\\n        string calldata _uri\\r\\n    ) external;\\r\\n\\r\\n    function mintBatch(\\r\\n        address _recipient,\\r\\n        uint256[] memory _tokenIds,\\r\\n        uint256[] memory _amounts,\\r\\n        string[] memory _uris\\r\\n    ) external;\\r\\n\\r\\n    function burn(address _account, uint256 _tokenId, uint256 _amount) external;\\r\\n\\r\\n    function burnBatch(\\r\\n        address _account,\\r\\n        uint256[] memory _tokenIds,\\r\\n        uint256[] memory _amounts\\r\\n    ) external;\\r\\n\\r\\n    function permissionedTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function permissionedBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] memory _tokenIds,\\r\\n        uint256[] memory _amounts\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2dc1337abc436cb8f5f4f76f5640aadafaa8e86fd2f44f4cc0852e77ddaa2227\",\"license\":\"UNLICENSED\"},\"contracts/utils/ERC1967ProxyCreate2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { Proxy } from \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\r\\nimport { ERC1967Upgrade } from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\r\\n\\r\\ncontract ERC1967ProxyCreate2 is Proxy, ERC1967Upgrade {\\r\\n    /**\\r\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\r\\n     *\\r\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\r\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\r\\n     */\\r\\n    bool internal isInit;\\r\\n\\r\\n    function init(address _logic, bytes memory _data) external {\\r\\n        require(!isInit, \\\"ERC1967ProxyCreate2: already init\\\");\\r\\n        _upgradeToAndCall(_logic, _data, false);\\r\\n        isInit = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _implementation() internal view virtual override returns (address impl) {\\r\\n        return ERC1967Upgrade._getImplementation();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf9d383bb46a39bfdc26b951d92e4025151a43208d2dce1b673941e239dc6cab5\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60406080815234620001915762003224803803806200001e81620001ac565b928339810160a0828203126200019157815191602080820151908115158092036200019157828601516001600160401b0390818111620001915784019480601f8701121562000191578551918211620001965760059582871b90848062000087818501620001ac565b809681520192820101928311620001915784809101915b838310620001805750505050620000c66080620000be60608701620001d2565b9501620001d2565b9343600855600196875560ff199360ff856003541691161760035560018060a01b038060018060a01b031992168260075416176007556000951690855416178455805194845b8681106200012357885161303c9081620001e88239f35b82518110156200016c5780821b830184015186526004845288862080548616891790556000198114620001585787016200010c565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b86526032600452602486fd5b82518152918101918591016200009e565b600080fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176200019657604052565b51906001600160a01b0382168203620001915756fe60c0806040526004361015610014575b600080fd5b6000908160a052813560e01c90816301ffc9a714611a6d57508063101c575a14611a4257806311921fad14611a0f5780631327d3d8146119ca5780633a5381b5146119a15780633da998fa14611981578063457322b9146112b557806348b4fa581461195c5780635d05125b1461193c5780638d8fc87d146113895780639a573d5d146113395780639d95a792146112f6578063a0b498a4146112b5578063affed0e014611295578063b00a0be61461124a578063bc197c81146111bf578063bd4aed311461115c578063dae5d0b014610c2f578063e3cd51e514610bcf578063f23a6e6114610bd9578063f7e03bad14610bcf578063f7e04b1a146105785763fdfc8b191461012357600080fd5b346103435760a03660031901126103435761013c611aca565b6001600160401b0391906084358381116103435761015e903690600401611bd0565b93906024948535801561053457606435908160a051526020956004875261018d60ff604060a051205416611d31565b60018060a01b0316978860a051526005875260ff604060a0512054169560015498600254976101bb89611d89565b6002551561041457505060405198634c4f708d60e11b8a5260a0518a600481845afa80156103365760a0519a8b916103ed575b50918a916040516303a24d0760e21b815285600482015260a051818481855afa801561033657879160a051916103cc575b509c14806103c0575b1561034957803b156103435760405191630762b29d60e21b8352336004840152309083015284604483015260443560648301528160848160a05180945af1801561033657610320575b50610308938861031797946102d98c9d98956102f9956102a0600080516020612fe78339815191529f8e611cfd565b9f60405195338188015286526102b586611b1f565b6040519e8f9e8f908152015260408d015260608c61014091829101528c0190611e88565b9260808b015260a08a015260443560c08a015288820360e08a0152611e88565b91868303610100880152611ead565b90838203610120850152611e88565b0390a260a05180f35b61032990611af6565b60a0518015610271575b80fd5b6040513d60a051823e3d90fd5b60a05180fd5b8091503b1561034357604051637a94c56560e11b815260a08051336004840152602483018790526044803590840152905191929091839160649183915af18015610336576103205750610308938861031797946102d98c9d98956102f9956102a0600080516020612fe78339815191529f8e611cfd565b5060ff60035416610228565b6103e7913d8091833e6103df8183611b3a565b810190611e25565b3861021f565b905061040b919a3d8091833e6104038183611b3a565b810190611e4a565b999099386101ee565b89916040518c8b8201528a815261042a81611b1f565b936040516303a24d0760e21b81528660048201528d81838160a051935afa60a0519181610519575b5061050f5750604051928b8401928311848410176104fe57505060405260a0518152995b803b1561034357604051637921219560e11b815260a08051336004840152306024840152604480840188905235606484015260848301829052600060a4840152905191929091839160c49183915af18015610336576103205750610308938861031797946102d98c9d98956102f9956102a0600080516020612fe78339815191529f8e611cfd565b634e487b7160e01b81526041600452fd5b9250505099610476565b61052d91923d8091833e6103df8183611b3a565b9038610452565b60405162461bcd60e51b815260206004820152601b818901527f427269646765455243313135353a205f746f6b656e4964203c203000000000006044820152606490fd5b3461034357610140366003190112610343576044356001600160401b038111610343576105a9903690600401611bd0565b9060a4356001600160401b038111610343576105c9903690600401611b72565b9060c4356001600160401b038111610343576105e9903690600401611b72565b9260e4356001600160401b03811161034357610609903690600401611bd0565b90610104356001600160401b0381116103435761062a903690600401611bd0565b9290966001600160401b03610124351161034357366023610124350112156103435761065c6101243560040135611b5b565b6106696040519182611b3a565b6101243560040135815260208101366024610124356004013560051b610124350101116103435760246101243501905b6024610124356004013560051b6101243501018210610b8c5750506106bd33611ca1565b6106c988511515611ece565b6106d68851835114611f26565b60643560a05152600660205260a0516040812090600435905260205261070560ff604060a051205416156120cb565b60643560a05152600660205260a05160408120906004359052602052604060a05120600160ff19825416179055600154610743816064351415612127565b60643560a05152600460205261076160ff604060a051205416612187565b60843503610988576001600160a01b0361077d8a87018b612268565b1690602435600154146000146108b757506001600160a01b036107a288880189612268565b1690813b1561034357826107d2928a604051809581948293631759616b60e11b845260a051973060048601611feb565b039160a051905af18015610336576108a2575b507f0dc55e89b364f61875007b1fcb2ba8ba9009992fd7c1f4c01d3aa3074cbbaa98969792610317949261087f61088d935b610871610828606435600435611cfd565b9c6108536040519c8d9c8d60043590528d60206024359101528d610120908160408201520191611ead565b9060643560608d015260843560808d01528b820360a08d0152611fb7565b9089820360c08b0152611fb7565b9187830360e0890152611ead565b91848303610100860152611ead565b60a05180f35b6108ab90611af6565b60a05180156107e55780fd5b906001600160a01b036108cd888a6024356122cb565b16918260a05152600560205260ff604060a05120541615610975575b823b156103435761091792848b6040519586948593849363a55784ef60e01b855260a0519860048601612287565b039160a051905af1801561033657610960575b507f0dc55e89b364f61875007b1fcb2ba8ba9009992fd7c1f4c01d3aa3074cbbaa98969792610317949261087f61088d93610817565b61096990611af6565b60a051801561092a5780fd5b610982888a602435612393565b506108e9565b9597949692909161099d60ff600354166121e7565b6001600160a01b036109b2898b6024356122cb565b168060a05152600560205260ff604060a05120541615610b79575b60843560243503610ae657803b1561034357604051631ac8311560e21b815260a051909182908180610a04898b3060048501612039565b039160a051905af1801561033657610ad1575b50936102f9600080516020612fc7833981519152989794610aac610aba95610a9e610a4c6101409b97610ac99b5b3691611c6a565b93610a88610a5e606435600435611cfd565b9f6040519e8f9e8f6004358152606435602082015260243560408201528160608201520191611ead565b60843560808e01528c810360a08e015290611fb7565b908a820360c08c0152611fb7565b9088820360e08a0152611e88565b9083820361012085015261206f565b0390a261089c565b610ada90611af6565b60a0518015610a175780fd5b60243560643514610b24575b50936102f9600080516020612fc7833981519152989794610aac610aba95610a9e610a4c6101409b97610ac99b610a45565b803b156103435760405163a55784ef60e01b815260a051909182908180610b518d8a8c3060048601612287565b039160a051905af180156103365715610af257610b6d90611af6565b60a0518015610af25780fd5b610b86898b602435612393565b506109cd565b81356001600160401b0381116103435761012435013660438201121561034357602091610bc483923690604460248201359101611c6a565b815201910190610699565b505061000f611c2d565b346103435760a036600319011261034357610bf2611aca565b50610bfb611ae0565b506084356001600160401b03811161034357610c1b903690600401611bd0565b505060405163f23a6e6160e01b8152602090f35b3461034357610140366003190112610343576001600160401b0360443581811161034357610c61903690600401611bd0565b9060e43583811161034357610c7a903690600401611bd0565b92906101043585811161034357610c95903690600401611bd0565b9190956101243590811161034357610cb1903690600401611bd0565b610cba33611ca1565b60643560a05152600660205260a05160408120906004359052602052610ce960ff604060a051205416156120cb565b60643560a05152600660205260a05160408120906004359052602052604060a05120600160ff19825416179055600154610d27816064351415612127565b60643560a051526004602052610d4560ff604060a051205416612187565b60843503610f65576001600160a01b03610d618986018a612268565b169060243560015414600014610e96575090506001600160a01b03610d8886860187612268565b1690813b1561034357604051637921219560e11b815260a080513060048401526001600160a01b0393909316602483015260a48035604484015260c4803560648501526084840183905260009184019190915290519193849283915af1801561033657610e81575b50946103179161088d7f2959210af9c4a93bb19a5140a970cfd9164cf262bb889aadc9eedb099248082e96975b610e2b606435600435611cfd565b98610e536040519889986004358a5260243560208b01526101208060408c01528a0191611ead565b916064356060890152608435608089015260a43560a089015260c43560c089015287830360e0890152611ead565b610e8a90611af6565b60a0518015610df05780fd5b6001600160a01b03610eab87896024356122cb565b168060a05152600560205260ff604060a05120541615610f52575b803b1561034357610ef99360405180958194829363bb7fde7160e01b845260a0519760c4359060a435906004870161223d565b039160a051905af1801561033657610f3d575b50946103179161088d7f2959210af9c4a93bb19a5140a970cfd9164cf262bb889aadc9eedb099248082e9697610e1d565b610f4690611af6565b60a0518015610f0c5780fd5b610f5f8789602435612393565b50610ec6565b9295610f7960ff60039994939954166121e7565b6001600160a01b03610f8e86886024356122cb565b168060a05152600560205260ff604060a05120541615611149575b608435602435036110bf57803b1561034357604051637a94c56560e11b815260a0805130600484015260a435602484015260c4356044840152905191929091839160649183915af18015610336576110aa575b50600080516020612fe7833981519152969792611022610ac9959361109b933691611c6a565b9861108c611034606435600435611cfd565b9a6110666040519a8b9a6004358c5260643560208d015260243560408d015261014060608d01526101408c0191611ead565b9060843560808b015260a43560a08b015260c43560c08b015289820360e08b0152611e88565b91878303610100890152611ead565b91848303610120860152611ead565b6110b390611af6565b60a0518015610ffc5780fd5b602435606435146110ef575b50600080516020612fe7833981519152969792611022610ac9959361109b93610a45565b803b156103435760405163bb7fde7160e01b815260a0519091829081806111218a8f60c43560a435306004870161223d565b039160a051905af1801561033657156110cb5761113d90611af6565b60a05180156110cb5780fd5b6111568688602435612393565b50610fa9565b5034610343576080366003190112610343576024356001600160401b0381116103435761118d903690600401611bd0565b909160443591906001600160a01b03831683036103335760206111b76064358585886004356124d6565b604051908152f35b346103435760a0366003190112610343576111d8611aca565b506111e1611ae0565b506001600160401b0360443581811161034357611202903690600401611bfd565b50506064358181116103435761121c903690600401611bfd565b505060843590811161034357611236903690600401611bd0565b505060405163bc197c8160e01b8152602090f35b34610343576040366003190112610343576024358015158091036103435761127133611ca1565b60043560a05152600460205260a05190604082209060ff8019835416911617905580f35b346103435760a05180600319360112610333576020600254604051908152f35b34610343576020366003190112610343576001600160a01b036112d6611aca565b1660a051526005602052602060ff604060a0512054166040519015158152f35b346103435760403660031901126103435760043560a05152600660205260a05160408120906024359052602052602060ff604060a0512054166040519015158152f35b34610343576040366003190112610343576024356001600160401b0381116103435761137761136e6020923690600401611bd0565b906004356122cb565b6040516001600160a01b039091168152f35b346103435760a0366003190112610343576113a2611aca565b6024356001600160401b038111610343576113c1903690600401611b72565b6044356001600160401b038111610343576113e0903690600401611b72565b906084356001600160401b03811161034357611400903690600401611bd0565b61140c83511515611ece565b6114198351855114611f26565b60643560a05152600460205261143760ff604060a051205416611d31565b60a080516001600160a01b0387169052600560205251604090205460015460025495909160ff1661146787611d89565b60025560a051608052156117a757604051634c4f708d60e11b815260a051909590866004816001600160a01b038c165afa80156103365760a051968791611788575b5060805285976040516396d7e22960e01b81526020600482015260a05181806114d56024820187611fb7565b03816001600160a01b0386165afa9081156103365760a051916116b9575b509660643514806116ad575b15611619576001600160a01b0381163b15610343576040516301a358df60e31b81523360048201523060248201526080604482015290816115436084820185611fb7565b91600319828403016064830152818061155f60a0519589611fb7565b60a051919003926001600160a01b03165af1801561033657611604575b5093610317936102f960209794610aac610aba95610a9e600080516020612fc78339815191529c9a5b6115af858d611cfd565b9e60405195338f8801528e87526115c587611b1f565b6040519e8f9e8f908152015260408d01526115ee60608d61014091829101528d01608051611e88565b60643560808e01528c810360a08e015290611fb7565b61160d90611af6565b60a051801561157c5780fd5b6001600160a01b0381163b1561034357604051631ac8311560e21b815260a05190918290818061164e88883360048501612039565b60a051919003926001600160a01b03165af1801561033657611698575b5093610317936102f960209794610aac610aba95610a9e600080516020612fc78339815191529c9a6115a5565b6116a190611af6565b60a051801561166b5780fd5b5060ff600354166114ff565b903d8091833e6116c98183611b3a565b6020828281010312610343578151916001600160401b03831161034357818101601f84830101121561034357828101519061170382611b5b565b936117116040519586611b3a565b828552602085019084830160208560051b83860101011161034357602081840101915b60208560051b83860101018310611751575050505050508a6114f3565b8251906001600160401b03821161034357602080929161177b8293838b8a0191888b010101611e08565b8152019301929050611734565b905061179e91963d8091833e6104038183611b3a565b959095896114a9565b919094929593859660405160018060a01b0387166020820152602081526117cd81611b1f565b6080528151926117dc84611b5b565b936117ea6040519586611b3a565b808552601f196117f982611b5b565b0160a0515b81811061192b5750508460a0515b8281106118a4575050506001600160a01b0387163b1561034357604051631759616b60e11b815260a05190978890818061184c8a89303360048601611feb565b60a051919003926001600160a01b03165af192831561033657600080516020612fc783398151915298610aac61031797610a9e6102f99460209c610aba99611895575b506115a5565b61189e90611af6565b8f61188f565b806118b26118ef9288611f8d565b51604051906303a24d0760e21b825260048201528b8160248160a0519360018060a01b03165afa60a0519181611910575b506118f4575b50611d89565b61180c565b6118fe8285611f8d565b526119098184611f8d565b508d6118e9565b61192491923d8091833e6103df8183611b3a565b908f6118e3565b806060602080938a010152016117fe565b346103435760a05180600319360112610333576020600854604051908152f35b346103435760a0518060031936011261033357602060ff600354166040519015158152f35b346103435760a05180600319360112610333576020600154604051908152f35b346103435760a0518060031936011261033357546040516001600160a01b039091168152602090f35b34610343576020366003190112610343576119e3611aca565b6119ec33611ca1565b60a05180546001600160a01b0319166001600160a01b0390921691909117815580f35b346103435760203660031901126103435760043560a051526004602052602060ff604060a0512054166040519015158152f35b346103435760a05180600319360112610333576007546040516001600160a01b039091168152602090f35b905034611ac6576020366003190112611ac65760043563ffffffff60e01b8116809103611ac257602092506301ffc9a760e01b8114908115611ab1575b5015158152f35b630271189760e51b14905038611aaa565b8280fd5b5080fd5b600435906001600160a01b038216820361000f57565b602435906001600160a01b038216820361000f57565b6001600160401b038111611b0957604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117611b0957604052565b90601f801991011681019081106001600160401b03821117611b0957604052565b6001600160401b038111611b095760051b60200190565b81601f8201121561000f57803591611b8983611b5b565b92611b976040519485611b3a565b808452602092838086019260051b82010192831161000f578301905b828210611bc1575050505090565b81358152908301908301611bb3565b9181601f8401121561000f578235916001600160401b03831161000f576020838186019501011161000f57565b9181601f8401121561000f578235916001600160401b03831161000f576020808501948460051b01011161000f57565b503461000f57604036600319011261000f5760206111b7602435600435611cfd565b6001600160401b038111611b0957601f01601f191660200190565b929192611c7682611c4f565b91611c846040519384611b3a565b82948184528183011161000f578281602093846000960137010152565b6000546001600160a01b03908116911603611cb857565b60405162461bcd60e51b815260206004820152601e60248201527f427269646765455243313135353a204f6e6c792076616c696461746f722100006044820152606490fd5b906040519060208201928352604082015260408152606081018181106001600160401b03821117611b095760405251902090565b15611d3857565b60405162461bcd60e51b815260206004820152602360248201527f427269646765455243313135353a20636861696e206e6f7420726567697374656044820152621c995960ea1b6064820152608490fd5b6000198114611d985760010190565b634e487b7160e01b600052601160045260246000fd5b60005b838110611dc15750506000910152565b8181015183820152602001611db1565b90929192611dde81611c4f565b91611dec6040519384611b3a565b82948284528282011161000f576020611e06930190611dae565b565b9080601f8301121561000f578151611e2292602001611dd1565b90565b9060208282031261000f5781516001600160401b03811161000f57611e229201611e08565b919060408382031261000f578251926020810151906001600160401b03821161000f57019080601f8301121561000f578151611e2292602001611dd1565b90602091611ea181518092818552858086019101611dae565b601f01601f1916010190565b908060209392818452848401376000828201840152601f01601f1916010190565b15611ed557565b60405162461bcd60e51b8152602060048201526024808201527f427269646765455243313135353a205f746f6b656e4964732e6c656e6774682060448201526303d3d20360e41b6064820152608490fd5b15611f2d57565b60405162461bcd60e51b815260206004820152603260248201527f427269646765455243313135353a205f746f6b656e4964732e6c656e677468206044820152710427a40bec2dadeeadce8e65cd8cadccee8d60731b6064820152608490fd5b8051821015611fa15760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110611fd7575050505090565b835185529381019392810192600101611fc9565b9261201a90602095926120289460018060a01b038092168752168686015260a0604086015260a0850190611fb7565b908382036060850152611fb7565b906080818303910152600081520190565b6001600160a01b039091168152606060208201819052611e2293919261206191840190611fb7565b916040818403910152611fb7565b908082519081815260208091019281808460051b8301019501936000915b84831061209d5750505050505090565b90919293949584806120bb600193601f198682030187528a51611e88565b980193019301919493929061208d565b156120d257565b60405162461bcd60e51b815260206004820152602760248201527f427269646765455243313135353a206e6f6e636520616c7265616479207265676044820152661a5cdd195c995960ca1b6064820152608490fd5b1561212e57565b60405162461bcd60e51b815260206004820152602b60248201527f427269646765455243313135353a20696e697469616c436861696e203d3d206360448201526a3ab93932b73a21b430b4b760a91b6064820152608490fd5b1561218e57565b60405162461bcd60e51b815260206004820152602b60248201527f427269646765455243313135353a20496e697469616c20636861696e206e6f7460448201526a081c9959da5cdd195c995960aa1b6064820152608490fd5b156121ee57565b60405162461bcd60e51b815260206004820152602160248201527f427269646765455243313135353a204f6e6c792070726f7879206272696467656044820152602160f81b6064820152608490fd5b9092608092611e22969460018060a01b03168352602083015260408201528160608201520191611ead565b9081602091031261000f57356001600160a01b038116810361000f5790565b926122af611e2295936122bd9360018060a01b03168652608060208701526080860190611fb7565b908482036040860152611fb7565b91606081840391015261206f565b9190916040916122fc8380518381946020988984019788528484013781016000838201520386810184520182611b3a565b519020906104d1815161231185830182611b3a565b818152848101916126258339612344858451809361233783830196879251928391611dae565b8101038084520182611b3a565b51902081519384019260ff60f81b84523060601b6021860152603585015260558401526055835260808301908382106001600160401b03831117611b095752905190206001600160a01b031690565b9190604091825191602083016000938682528383878301376123c686828681018883820152036020810184520182611b3a565b51902084516104d1808201908282106001600160401b038311176124c257908291612af68339039085f59485156124b8576124439061243560018060a01b0380981697600754169387519586936366e7990d60e01b602086015260248501528860448501526064840191611ead565b03601f198101845283611b3a565b843b15611ac2576124769183918551938492839263c0d91eaf60e01b845260048401528760248401526044830190611e88565b038183885af180156124ae5761249f575b50828152600560205220805460ff1916600117905590565b6124a890611af6565b38612487565b83513d84823e3d90fd5b84513d85823e3d90fd5b634e487b7160e01b87526041600452602487fd5b91908260015414612592576001600160a01b03926124f59291906122cb565b1690600092828452600560205260ff6040852054161561258c57604051627eeac760e11b81526001600160a01b03929092166004830152602482015290602090829060449082905afa91821561258057809261255057505090565b9091506020823d8211612578575b8161256b60209383611b3a565b8101031261033357505190565b3d915061255e565b604051903d90823e3d90fd5b50505090565b6125ea94602094909350916001600160a01b03916125b291810190612268565b604051627eeac760e11b81526001600160a01b0390931660048401526024830193909352909384929190911690829081906044820190565b03915afa90811561261857600091612600575090565b906020823d8211612578578161256b60209383611b3a565b6040513d6000823e3d90fdfe60808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c6343000811003360808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c63430008110033adcc33377c46a944a11f2f21ebf55753879ce3f00eca225c64b49a2b67c72315ec326f0b996a82b006d5da2d3f70e1f9e06fa32e9c23dcf9547796e1f64dddb6a264697066735822122062ca3e0328d07a2bda422c92718faa9b43854d953d380598ed45ae1ce6dabc3364736f6c63430008110033",
  "deployedBytecode": "0x60c0806040526004361015610014575b600080fd5b6000908160a052813560e01c90816301ffc9a714611a6d57508063101c575a14611a4257806311921fad14611a0f5780631327d3d8146119ca5780633a5381b5146119a15780633da998fa14611981578063457322b9146112b557806348b4fa581461195c5780635d05125b1461193c5780638d8fc87d146113895780639a573d5d146113395780639d95a792146112f6578063a0b498a4146112b5578063affed0e014611295578063b00a0be61461124a578063bc197c81146111bf578063bd4aed311461115c578063dae5d0b014610c2f578063e3cd51e514610bcf578063f23a6e6114610bd9578063f7e03bad14610bcf578063f7e04b1a146105785763fdfc8b191461012357600080fd5b346103435760a03660031901126103435761013c611aca565b6001600160401b0391906084358381116103435761015e903690600401611bd0565b93906024948535801561053457606435908160a051526020956004875261018d60ff604060a051205416611d31565b60018060a01b0316978860a051526005875260ff604060a0512054169560015498600254976101bb89611d89565b6002551561041457505060405198634c4f708d60e11b8a5260a0518a600481845afa80156103365760a0519a8b916103ed575b50918a916040516303a24d0760e21b815285600482015260a051818481855afa801561033657879160a051916103cc575b509c14806103c0575b1561034957803b156103435760405191630762b29d60e21b8352336004840152309083015284604483015260443560648301528160848160a05180945af1801561033657610320575b50610308938861031797946102d98c9d98956102f9956102a0600080516020612fe78339815191529f8e611cfd565b9f60405195338188015286526102b586611b1f565b6040519e8f9e8f908152015260408d015260608c61014091829101528c0190611e88565b9260808b015260a08a015260443560c08a015288820360e08a0152611e88565b91868303610100880152611ead565b90838203610120850152611e88565b0390a260a05180f35b61032990611af6565b60a0518015610271575b80fd5b6040513d60a051823e3d90fd5b60a05180fd5b8091503b1561034357604051637a94c56560e11b815260a08051336004840152602483018790526044803590840152905191929091839160649183915af18015610336576103205750610308938861031797946102d98c9d98956102f9956102a0600080516020612fe78339815191529f8e611cfd565b5060ff60035416610228565b6103e7913d8091833e6103df8183611b3a565b810190611e25565b3861021f565b905061040b919a3d8091833e6104038183611b3a565b810190611e4a565b999099386101ee565b89916040518c8b8201528a815261042a81611b1f565b936040516303a24d0760e21b81528660048201528d81838160a051935afa60a0519181610519575b5061050f5750604051928b8401928311848410176104fe57505060405260a0518152995b803b1561034357604051637921219560e11b815260a08051336004840152306024840152604480840188905235606484015260848301829052600060a4840152905191929091839160c49183915af18015610336576103205750610308938861031797946102d98c9d98956102f9956102a0600080516020612fe78339815191529f8e611cfd565b634e487b7160e01b81526041600452fd5b9250505099610476565b61052d91923d8091833e6103df8183611b3a565b9038610452565b60405162461bcd60e51b815260206004820152601b818901527f427269646765455243313135353a205f746f6b656e4964203c203000000000006044820152606490fd5b3461034357610140366003190112610343576044356001600160401b038111610343576105a9903690600401611bd0565b9060a4356001600160401b038111610343576105c9903690600401611b72565b9060c4356001600160401b038111610343576105e9903690600401611b72565b9260e4356001600160401b03811161034357610609903690600401611bd0565b90610104356001600160401b0381116103435761062a903690600401611bd0565b9290966001600160401b03610124351161034357366023610124350112156103435761065c6101243560040135611b5b565b6106696040519182611b3a565b6101243560040135815260208101366024610124356004013560051b610124350101116103435760246101243501905b6024610124356004013560051b6101243501018210610b8c5750506106bd33611ca1565b6106c988511515611ece565b6106d68851835114611f26565b60643560a05152600660205260a0516040812090600435905260205261070560ff604060a051205416156120cb565b60643560a05152600660205260a05160408120906004359052602052604060a05120600160ff19825416179055600154610743816064351415612127565b60643560a05152600460205261076160ff604060a051205416612187565b60843503610988576001600160a01b0361077d8a87018b612268565b1690602435600154146000146108b757506001600160a01b036107a288880189612268565b1690813b1561034357826107d2928a604051809581948293631759616b60e11b845260a051973060048601611feb565b039160a051905af18015610336576108a2575b507f0dc55e89b364f61875007b1fcb2ba8ba9009992fd7c1f4c01d3aa3074cbbaa98969792610317949261087f61088d935b610871610828606435600435611cfd565b9c6108536040519c8d9c8d60043590528d60206024359101528d610120908160408201520191611ead565b9060643560608d015260843560808d01528b820360a08d0152611fb7565b9089820360c08b0152611fb7565b9187830360e0890152611ead565b91848303610100860152611ead565b60a05180f35b6108ab90611af6565b60a05180156107e55780fd5b906001600160a01b036108cd888a6024356122cb565b16918260a05152600560205260ff604060a05120541615610975575b823b156103435761091792848b6040519586948593849363a55784ef60e01b855260a0519860048601612287565b039160a051905af1801561033657610960575b507f0dc55e89b364f61875007b1fcb2ba8ba9009992fd7c1f4c01d3aa3074cbbaa98969792610317949261087f61088d93610817565b61096990611af6565b60a051801561092a5780fd5b610982888a602435612393565b506108e9565b9597949692909161099d60ff600354166121e7565b6001600160a01b036109b2898b6024356122cb565b168060a05152600560205260ff604060a05120541615610b79575b60843560243503610ae657803b1561034357604051631ac8311560e21b815260a051909182908180610a04898b3060048501612039565b039160a051905af1801561033657610ad1575b50936102f9600080516020612fc7833981519152989794610aac610aba95610a9e610a4c6101409b97610ac99b5b3691611c6a565b93610a88610a5e606435600435611cfd565b9f6040519e8f9e8f6004358152606435602082015260243560408201528160608201520191611ead565b60843560808e01528c810360a08e015290611fb7565b908a820360c08c0152611fb7565b9088820360e08a0152611e88565b9083820361012085015261206f565b0390a261089c565b610ada90611af6565b60a0518015610a175780fd5b60243560643514610b24575b50936102f9600080516020612fc7833981519152989794610aac610aba95610a9e610a4c6101409b97610ac99b610a45565b803b156103435760405163a55784ef60e01b815260a051909182908180610b518d8a8c3060048601612287565b039160a051905af180156103365715610af257610b6d90611af6565b60a0518015610af25780fd5b610b86898b602435612393565b506109cd565b81356001600160401b0381116103435761012435013660438201121561034357602091610bc483923690604460248201359101611c6a565b815201910190610699565b505061000f611c2d565b346103435760a036600319011261034357610bf2611aca565b50610bfb611ae0565b506084356001600160401b03811161034357610c1b903690600401611bd0565b505060405163f23a6e6160e01b8152602090f35b3461034357610140366003190112610343576001600160401b0360443581811161034357610c61903690600401611bd0565b9060e43583811161034357610c7a903690600401611bd0565b92906101043585811161034357610c95903690600401611bd0565b9190956101243590811161034357610cb1903690600401611bd0565b610cba33611ca1565b60643560a05152600660205260a05160408120906004359052602052610ce960ff604060a051205416156120cb565b60643560a05152600660205260a05160408120906004359052602052604060a05120600160ff19825416179055600154610d27816064351415612127565b60643560a051526004602052610d4560ff604060a051205416612187565b60843503610f65576001600160a01b03610d618986018a612268565b169060243560015414600014610e96575090506001600160a01b03610d8886860187612268565b1690813b1561034357604051637921219560e11b815260a080513060048401526001600160a01b0393909316602483015260a48035604484015260c4803560648501526084840183905260009184019190915290519193849283915af1801561033657610e81575b50946103179161088d7f2959210af9c4a93bb19a5140a970cfd9164cf262bb889aadc9eedb099248082e96975b610e2b606435600435611cfd565b98610e536040519889986004358a5260243560208b01526101208060408c01528a0191611ead565b916064356060890152608435608089015260a43560a089015260c43560c089015287830360e0890152611ead565b610e8a90611af6565b60a0518015610df05780fd5b6001600160a01b03610eab87896024356122cb565b168060a05152600560205260ff604060a05120541615610f52575b803b1561034357610ef99360405180958194829363bb7fde7160e01b845260a0519760c4359060a435906004870161223d565b039160a051905af1801561033657610f3d575b50946103179161088d7f2959210af9c4a93bb19a5140a970cfd9164cf262bb889aadc9eedb099248082e9697610e1d565b610f4690611af6565b60a0518015610f0c5780fd5b610f5f8789602435612393565b50610ec6565b9295610f7960ff60039994939954166121e7565b6001600160a01b03610f8e86886024356122cb565b168060a05152600560205260ff604060a05120541615611149575b608435602435036110bf57803b1561034357604051637a94c56560e11b815260a0805130600484015260a435602484015260c4356044840152905191929091839160649183915af18015610336576110aa575b50600080516020612fe7833981519152969792611022610ac9959361109b933691611c6a565b9861108c611034606435600435611cfd565b9a6110666040519a8b9a6004358c5260643560208d015260243560408d015261014060608d01526101408c0191611ead565b9060843560808b015260a43560a08b015260c43560c08b015289820360e08b0152611e88565b91878303610100890152611ead565b91848303610120860152611ead565b6110b390611af6565b60a0518015610ffc5780fd5b602435606435146110ef575b50600080516020612fe7833981519152969792611022610ac9959361109b93610a45565b803b156103435760405163bb7fde7160e01b815260a0519091829081806111218a8f60c43560a435306004870161223d565b039160a051905af1801561033657156110cb5761113d90611af6565b60a05180156110cb5780fd5b6111568688602435612393565b50610fa9565b5034610343576080366003190112610343576024356001600160401b0381116103435761118d903690600401611bd0565b909160443591906001600160a01b03831683036103335760206111b76064358585886004356124d6565b604051908152f35b346103435760a0366003190112610343576111d8611aca565b506111e1611ae0565b506001600160401b0360443581811161034357611202903690600401611bfd565b50506064358181116103435761121c903690600401611bfd565b505060843590811161034357611236903690600401611bd0565b505060405163bc197c8160e01b8152602090f35b34610343576040366003190112610343576024358015158091036103435761127133611ca1565b60043560a05152600460205260a05190604082209060ff8019835416911617905580f35b346103435760a05180600319360112610333576020600254604051908152f35b34610343576020366003190112610343576001600160a01b036112d6611aca565b1660a051526005602052602060ff604060a0512054166040519015158152f35b346103435760403660031901126103435760043560a05152600660205260a05160408120906024359052602052602060ff604060a0512054166040519015158152f35b34610343576040366003190112610343576024356001600160401b0381116103435761137761136e6020923690600401611bd0565b906004356122cb565b6040516001600160a01b039091168152f35b346103435760a0366003190112610343576113a2611aca565b6024356001600160401b038111610343576113c1903690600401611b72565b6044356001600160401b038111610343576113e0903690600401611b72565b906084356001600160401b03811161034357611400903690600401611bd0565b61140c83511515611ece565b6114198351855114611f26565b60643560a05152600460205261143760ff604060a051205416611d31565b60a080516001600160a01b0387169052600560205251604090205460015460025495909160ff1661146787611d89565b60025560a051608052156117a757604051634c4f708d60e11b815260a051909590866004816001600160a01b038c165afa80156103365760a051968791611788575b5060805285976040516396d7e22960e01b81526020600482015260a05181806114d56024820187611fb7565b03816001600160a01b0386165afa9081156103365760a051916116b9575b509660643514806116ad575b15611619576001600160a01b0381163b15610343576040516301a358df60e31b81523360048201523060248201526080604482015290816115436084820185611fb7565b91600319828403016064830152818061155f60a0519589611fb7565b60a051919003926001600160a01b03165af1801561033657611604575b5093610317936102f960209794610aac610aba95610a9e600080516020612fc78339815191529c9a5b6115af858d611cfd565b9e60405195338f8801528e87526115c587611b1f565b6040519e8f9e8f908152015260408d01526115ee60608d61014091829101528d01608051611e88565b60643560808e01528c810360a08e015290611fb7565b61160d90611af6565b60a051801561157c5780fd5b6001600160a01b0381163b1561034357604051631ac8311560e21b815260a05190918290818061164e88883360048501612039565b60a051919003926001600160a01b03165af1801561033657611698575b5093610317936102f960209794610aac610aba95610a9e600080516020612fc78339815191529c9a6115a5565b6116a190611af6565b60a051801561166b5780fd5b5060ff600354166114ff565b903d8091833e6116c98183611b3a565b6020828281010312610343578151916001600160401b03831161034357818101601f84830101121561034357828101519061170382611b5b565b936117116040519586611b3a565b828552602085019084830160208560051b83860101011161034357602081840101915b60208560051b83860101018310611751575050505050508a6114f3565b8251906001600160401b03821161034357602080929161177b8293838b8a0191888b010101611e08565b8152019301929050611734565b905061179e91963d8091833e6104038183611b3a565b959095896114a9565b919094929593859660405160018060a01b0387166020820152602081526117cd81611b1f565b6080528151926117dc84611b5b565b936117ea6040519586611b3a565b808552601f196117f982611b5b565b0160a0515b81811061192b5750508460a0515b8281106118a4575050506001600160a01b0387163b1561034357604051631759616b60e11b815260a05190978890818061184c8a89303360048601611feb565b60a051919003926001600160a01b03165af192831561033657600080516020612fc783398151915298610aac61031797610a9e6102f99460209c610aba99611895575b506115a5565b61189e90611af6565b8f61188f565b806118b26118ef9288611f8d565b51604051906303a24d0760e21b825260048201528b8160248160a0519360018060a01b03165afa60a0519181611910575b506118f4575b50611d89565b61180c565b6118fe8285611f8d565b526119098184611f8d565b508d6118e9565b61192491923d8091833e6103df8183611b3a565b908f6118e3565b806060602080938a010152016117fe565b346103435760a05180600319360112610333576020600854604051908152f35b346103435760a0518060031936011261033357602060ff600354166040519015158152f35b346103435760a05180600319360112610333576020600154604051908152f35b346103435760a0518060031936011261033357546040516001600160a01b039091168152602090f35b34610343576020366003190112610343576119e3611aca565b6119ec33611ca1565b60a05180546001600160a01b0319166001600160a01b0390921691909117815580f35b346103435760203660031901126103435760043560a051526004602052602060ff604060a0512054166040519015158152f35b346103435760a05180600319360112610333576007546040516001600160a01b039091168152602090f35b905034611ac6576020366003190112611ac65760043563ffffffff60e01b8116809103611ac257602092506301ffc9a760e01b8114908115611ab1575b5015158152f35b630271189760e51b14905038611aaa565b8280fd5b5080fd5b600435906001600160a01b038216820361000f57565b602435906001600160a01b038216820361000f57565b6001600160401b038111611b0957604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117611b0957604052565b90601f801991011681019081106001600160401b03821117611b0957604052565b6001600160401b038111611b095760051b60200190565b81601f8201121561000f57803591611b8983611b5b565b92611b976040519485611b3a565b808452602092838086019260051b82010192831161000f578301905b828210611bc1575050505090565b81358152908301908301611bb3565b9181601f8401121561000f578235916001600160401b03831161000f576020838186019501011161000f57565b9181601f8401121561000f578235916001600160401b03831161000f576020808501948460051b01011161000f57565b503461000f57604036600319011261000f5760206111b7602435600435611cfd565b6001600160401b038111611b0957601f01601f191660200190565b929192611c7682611c4f565b91611c846040519384611b3a565b82948184528183011161000f578281602093846000960137010152565b6000546001600160a01b03908116911603611cb857565b60405162461bcd60e51b815260206004820152601e60248201527f427269646765455243313135353a204f6e6c792076616c696461746f722100006044820152606490fd5b906040519060208201928352604082015260408152606081018181106001600160401b03821117611b095760405251902090565b15611d3857565b60405162461bcd60e51b815260206004820152602360248201527f427269646765455243313135353a20636861696e206e6f7420726567697374656044820152621c995960ea1b6064820152608490fd5b6000198114611d985760010190565b634e487b7160e01b600052601160045260246000fd5b60005b838110611dc15750506000910152565b8181015183820152602001611db1565b90929192611dde81611c4f565b91611dec6040519384611b3a565b82948284528282011161000f576020611e06930190611dae565b565b9080601f8301121561000f578151611e2292602001611dd1565b90565b9060208282031261000f5781516001600160401b03811161000f57611e229201611e08565b919060408382031261000f578251926020810151906001600160401b03821161000f57019080601f8301121561000f578151611e2292602001611dd1565b90602091611ea181518092818552858086019101611dae565b601f01601f1916010190565b908060209392818452848401376000828201840152601f01601f1916010190565b15611ed557565b60405162461bcd60e51b8152602060048201526024808201527f427269646765455243313135353a205f746f6b656e4964732e6c656e6774682060448201526303d3d20360e41b6064820152608490fd5b15611f2d57565b60405162461bcd60e51b815260206004820152603260248201527f427269646765455243313135353a205f746f6b656e4964732e6c656e677468206044820152710427a40bec2dadeeadce8e65cd8cadccee8d60731b6064820152608490fd5b8051821015611fa15760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110611fd7575050505090565b835185529381019392810192600101611fc9565b9261201a90602095926120289460018060a01b038092168752168686015260a0604086015260a0850190611fb7565b908382036060850152611fb7565b906080818303910152600081520190565b6001600160a01b039091168152606060208201819052611e2293919261206191840190611fb7565b916040818403910152611fb7565b908082519081815260208091019281808460051b8301019501936000915b84831061209d5750505050505090565b90919293949584806120bb600193601f198682030187528a51611e88565b980193019301919493929061208d565b156120d257565b60405162461bcd60e51b815260206004820152602760248201527f427269646765455243313135353a206e6f6e636520616c7265616479207265676044820152661a5cdd195c995960ca1b6064820152608490fd5b1561212e57565b60405162461bcd60e51b815260206004820152602b60248201527f427269646765455243313135353a20696e697469616c436861696e203d3d206360448201526a3ab93932b73a21b430b4b760a91b6064820152608490fd5b1561218e57565b60405162461bcd60e51b815260206004820152602b60248201527f427269646765455243313135353a20496e697469616c20636861696e206e6f7460448201526a081c9959da5cdd195c995960aa1b6064820152608490fd5b156121ee57565b60405162461bcd60e51b815260206004820152602160248201527f427269646765455243313135353a204f6e6c792070726f7879206272696467656044820152602160f81b6064820152608490fd5b9092608092611e22969460018060a01b03168352602083015260408201528160608201520191611ead565b9081602091031261000f57356001600160a01b038116810361000f5790565b926122af611e2295936122bd9360018060a01b03168652608060208701526080860190611fb7565b908482036040860152611fb7565b91606081840391015261206f565b9190916040916122fc8380518381946020988984019788528484013781016000838201520386810184520182611b3a565b519020906104d1815161231185830182611b3a565b818152848101916126258339612344858451809361233783830196879251928391611dae565b8101038084520182611b3a565b51902081519384019260ff60f81b84523060601b6021860152603585015260558401526055835260808301908382106001600160401b03831117611b095752905190206001600160a01b031690565b9190604091825191602083016000938682528383878301376123c686828681018883820152036020810184520182611b3a565b51902084516104d1808201908282106001600160401b038311176124c257908291612af68339039085f59485156124b8576124439061243560018060a01b0380981697600754169387519586936366e7990d60e01b602086015260248501528860448501526064840191611ead565b03601f198101845283611b3a565b843b15611ac2576124769183918551938492839263c0d91eaf60e01b845260048401528760248401526044830190611e88565b038183885af180156124ae5761249f575b50828152600560205220805460ff1916600117905590565b6124a890611af6565b38612487565b83513d84823e3d90fd5b84513d85823e3d90fd5b634e487b7160e01b87526041600452602487fd5b91908260015414612592576001600160a01b03926124f59291906122cb565b1690600092828452600560205260ff6040852054161561258c57604051627eeac760e11b81526001600160a01b03929092166004830152602482015290602090829060449082905afa91821561258057809261255057505090565b9091506020823d8211612578575b8161256b60209383611b3a565b8101031261033357505190565b3d915061255e565b604051903d90823e3d90fd5b50505090565b6125ea94602094909350916001600160a01b03916125b291810190612268565b604051627eeac760e11b81526001600160a01b0390931660048401526024830193909352909384929190911690829081906044820190565b03915afa90811561261857600091612600575090565b906020823d8211612578578161256b60209383611b3a565b6040513d6000823e3d90fdfe60808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c6343000811003360808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c63430008110033adcc33377c46a944a11f2f21ebf55753879ce3f00eca225c64b49a2b67c72315ec326f0b996a82b006d5da2d3f70e1f9e06fa32e9c23dcf9547796e1f64dddb6a264697066735822122062ca3e0328d07a2bda422c92718faa9b43854d953d380598ed45ae1ce6dabc3364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "id": "The ID of the token being transferred",
          "operator": "The address which initiated the transfer (i.e. msg.sender)",
          "value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 983,
        "contract": "contracts/BridgeERC1155.sol:BridgeERC1155",
        "label": "validator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 985,
        "contract": "contracts/BridgeERC1155.sol:BridgeERC1155",
        "label": "currentChain",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 987,
        "contract": "contracts/BridgeERC1155.sol:BridgeERC1155",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 989,
        "contract": "contracts/BridgeERC1155.sol:BridgeERC1155",
        "label": "isProxyChain",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 993,
        "contract": "contracts/BridgeERC1155.sol:BridgeERC1155",
        "label": "registeredChains",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 997,
        "contract": "contracts/BridgeERC1155.sol:BridgeERC1155",
        "label": "issuedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1003,
        "contract": "contracts/BridgeERC1155.sol:BridgeERC1155",
        "label": "registeredNonces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1005,
        "contract": "contracts/BridgeERC1155.sol:BridgeERC1155",
        "label": "issuedTokenImplementation",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1007,
        "contract": "contracts/BridgeERC1155.sol:BridgeERC1155",
        "label": "initBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}