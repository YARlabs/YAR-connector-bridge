{
  "address": "0xf668dc2B9A5a156bdb91092DcAd65aD5Db7D1287",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_currentChain",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isProxyChain",
          "type": "bool"
        },
        {
          "internalType": "bytes32[]",
          "name": "_registeredChains",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "_issuedTokenImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "externalNonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "originalChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "originalToken",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "initialChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "targetChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sender",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipient",
          "type": "bytes"
        }
      ],
      "name": "TransferFromOtherChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "initialChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "originalChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "originalTokenAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "targetChain",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sender",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipient",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        }
      ],
      "name": "TransferToOtherChain",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_originalChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_originalToken",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentChain",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_originalChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_originalToken",
          "type": "bytes"
        }
      ],
      "name": "getIssuedTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_initialChain",
          "type": "bytes32"
        }
      ],
      "name": "getTranferId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_initialChain",
          "type": "bytes32"
        }
      ],
      "name": "getTransferId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuedToken",
          "type": "address"
        }
      ],
      "name": "isIssuedTokenPublished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isProxyChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuedTokenImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "issuedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "registeredChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chain",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_value",
          "type": "bool"
        }
      ],
      "name": "setChainRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newValidator",
          "type": "address"
        }
      ],
      "name": "setValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_externalNonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_originalChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_originalToken",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_initialChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_targetChain",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sender",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_recipient",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct BridgeERC20.TokenInfo",
          "name": "_tokenInfo",
          "type": "tuple"
        }
      ],
      "name": "tranferFromOtherChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_targetChain",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_recipient",
          "type": "bytes"
        }
      ],
      "name": "tranferToOtherChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x71c343258b0485cde201e8ec62591e4e51bf702e61fd83c5bc4a8a0df9197991",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x7151d877A2dAA54058304F5d5F7AA7e06cB5010F",
    "contractAddress": "0xf668dc2B9A5a156bdb91092DcAd65aD5Db7D1287",
    "transactionIndex": 0,
    "gasUsed": "2078791",
    "logsBloom": "0x
    "blockHash": "0x76b162fdc614a460943d4e07b61f668fd4e4e469bf0920f76ece90996add25db",
    "transactionHash": "0x71c343258b0485cde201e8ec62591e4e51bf702e61fd83c5bc4a8a0df9197991",
    "logs": [],
    "blockNumber": 463770,
    "cumulativeGasUsed": "2078791",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7319d77b282d06f1398943db85efac6f25008b7706c519a44e88de5e3c6f0a9e",
    false,
    [
      "0x88243e88525a258200bf5ca869571208956d07a0fa57c175fe0c198c7a0c5c26",
      "0xc5a260213bed973cb2f8d4637aa3ef27b0571649e067f5604af98967165ee957",
      "0x888ddba0dff61733aea9d240a62a83cee02ac4a5c8e58fbc448c21d3b250d4bb",
      "0xf9b1779dd736d62f9a5815f9f11cb752f6342e8584a01f22e1b19b9a8cb5694e"
    ],
    "0xD9F7Dc4AEDb241b5c628bfE5663Bc781FDC98E91",
    "0x7151d877A2dAA54058304F5d5F7AA7e06cB5010F"
  ],
  "numDeployments": 2,
  "solcInputHash": "e6aedaa08fa325814bd4500904f07c79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currentChain\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isProxyChain\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"_registeredChains\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_issuedTokenImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"originalChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"originalToken\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"initialChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"targetChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"TransferFromOtherChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"initialChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"originalChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"originalTokenAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"targetChain\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"name\":\"TransferToOtherChain\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_originalChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_originalToken\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentChain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_originalChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_originalToken\",\"type\":\"bytes\"}],\"name\":\"getIssuedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_initialChain\",\"type\":\"bytes32\"}],\"name\":\"getTranferId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_initialChain\",\"type\":\"bytes32\"}],\"name\":\"getTransferId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuedToken\",\"type\":\"address\"}],\"name\":\"isIssuedTokenPublished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProxyChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuedTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"issuedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"registeredChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chain\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setChainRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValidator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_externalNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_originalChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_originalToken\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_initialChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_targetChain\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_recipient\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct BridgeERC20.TokenInfo\",\"name\":\"_tokenInfo\",\"type\":\"tuple\"}],\"name\":\"tranferFromOtherChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_targetChain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_recipient\",\"type\":\"bytes\"}],\"name\":\"tranferToOtherChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeERC20.sol\":\"BridgeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/BridgeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { ERC1967ProxyCreate2 } from \\\"./utils/ERC1967ProxyCreate2.sol\\\";\\r\\nimport { IIssuedERC20 } from \\\"./interfaces/IIssuedERC20.sol\\\";\\r\\n\\r\\ncontract BridgeERC20 {\\r\\n    using SafeERC20 for IERC20Metadata;\\r\\n\\r\\n    address public validator;\\r\\n\\r\\n    bytes32 public currentChain;\\r\\n\\r\\n    uint256 public nonce;\\r\\n\\r\\n    bool public isProxyChain;\\r\\n\\r\\n    mapping(bytes32 => bool) public registeredChains;\\r\\n\\r\\n    mapping(address => bool) public issuedTokens;\\r\\n\\r\\n    mapping(bytes32 => mapping(uint256 => bool)) public registeredNonces;\\r\\n\\r\\n    address public issuedTokenImplementation;\\r\\n\\r\\n    uint256 public initBlock;\\r\\n\\r\\n    event TransferToOtherChain(\\r\\n        bytes32 indexed transferId,\\r\\n        uint256 nonce,\\r\\n        bytes32 initialChain,\\r\\n        bytes32 originalChain,\\r\\n        bytes originalTokenAddress,\\r\\n        bytes32 targetChain,\\r\\n        uint256 tokenAmount,\\r\\n        bytes sender,\\r\\n        bytes recipient,\\r\\n        string tokenName,\\r\\n        string tokenSymbol,\\r\\n        uint8 tokenDecimals\\r\\n    );\\r\\n\\r\\n    event TransferFromOtherChain(\\r\\n        bytes32 indexed transferId,\\r\\n        uint256 externalNonce,\\r\\n        bytes32 originalChain,\\r\\n        bytes originalToken,\\r\\n        bytes32 initialChain,\\r\\n        bytes32 targetChain,\\r\\n        uint256 amount,\\r\\n        bytes sender,\\r\\n        bytes recipient\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        bytes32 _currentChain,\\r\\n        bool _isProxyChain,\\r\\n        bytes32[] memory _registeredChains,\\r\\n        address _issuedTokenImplementation,\\r\\n        address _validator\\r\\n    ) {\\r\\n        initBlock = block.number;\\r\\n        currentChain = _currentChain;\\r\\n        isProxyChain = _isProxyChain;\\r\\n        issuedTokenImplementation = _issuedTokenImplementation;\\r\\n        validator = _validator;\\r\\n\\r\\n        uint256 l = _registeredChains.length;\\r\\n        for (uint256 i; i < l; i++) {\\r\\n            registeredChains[_registeredChains[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setChainRegister(bytes32 _chain, bool _value) external {\\r\\n        enforceIsValidator(msg.sender);\\r\\n        registeredChains[_chain] = _value;\\r\\n    }\\r\\n\\r\\n    function enforceIsValidator(address account) internal view {\\r\\n        require(account == validator, \\\"BridgeERC20: Only validator!\\\");\\r\\n    }\\r\\n\\r\\n    function setValidator(address _newValidator) external {\\r\\n        enforceIsValidator(msg.sender);\\r\\n        validator = _newValidator;\\r\\n    }\\r\\n\\r\\n    function getTransferId(uint256 _nonce, bytes32 _initialChain) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_nonce, _initialChain));\\r\\n    }\\r\\n\\r\\n    function tranferToOtherChain(\\r\\n        address _transferedToken,\\r\\n        uint256 _amount,\\r\\n        bytes32 _targetChain,\\r\\n        bytes calldata _recipient\\r\\n    ) external {\\r\\n        require(_amount > 0, \\\"BridgeERC20: _amount < 0\\\");\\r\\n        require(registeredChains[_targetChain], \\\"BridgeERC20: chain not registered\\\");\\r\\n\\r\\n        bool isIssuedToken = issuedTokens[_transferedToken];\\r\\n        bytes32 initialChain = currentChain;\\r\\n        uint256 _nonce = nonce++;\\r\\n        bytes32 originalChain;\\r\\n        bytes memory originalToken;\\r\\n        string memory tokenName;\\r\\n        string memory tokenSymbol;\\r\\n        uint8 tokenDecimals;\\r\\n\\r\\n        if (isIssuedToken) {\\r\\n            // There ISSUED token\\r\\n            IIssuedERC20 issuedToken = IIssuedERC20(_transferedToken);\\r\\n            (originalChain, originalToken, tokenName, tokenSymbol, tokenDecimals) = issuedToken\\r\\n                .getOriginalTokenInfo();\\r\\n            if (originalChain == _targetChain && isProxyChain) {\\r\\n                issuedToken.permissionedTransferFrom(msg.sender, address(this), _amount);\\r\\n            } else {\\r\\n                issuedToken.burn(msg.sender, _amount);\\r\\n            }\\r\\n        } else {\\r\\n            // There ORIGINAL token\\r\\n            IERC20Metadata token = IERC20Metadata(_transferedToken);\\r\\n            originalChain = initialChain;\\r\\n            originalToken = abi.encode(_transferedToken);\\r\\n            try token.name() returns (string memory _tokenName) {\\r\\n                tokenName = _tokenName;\\r\\n            } catch {\\r\\n                tokenName = \\\"\\\";\\r\\n            }\\r\\n            try token.symbol() returns (string memory _tokenSymbol) {\\r\\n                tokenSymbol = _tokenSymbol;\\r\\n            } catch {\\r\\n                tokenSymbol = \\\"\\\";\\r\\n            }\\r\\n            try token.decimals() returns (uint8 _tokenDecimals) {\\r\\n                tokenDecimals = _tokenDecimals;\\r\\n            } catch {\\r\\n                tokenDecimals = 1;\\r\\n            }\\r\\n            token.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        }\\r\\n\\r\\n        emit TransferToOtherChain(\\r\\n            getTransferId(_nonce, initialChain),\\r\\n            _nonce,\\r\\n            initialChain,\\r\\n            originalChain,\\r\\n            originalToken,\\r\\n            _targetChain,\\r\\n            _amount,\\r\\n            abi.encode(msg.sender),\\r\\n            _recipient,\\r\\n            tokenName,\\r\\n            tokenSymbol,\\r\\n            tokenDecimals\\r\\n        );\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        string name;\\r\\n        string symbol;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n\\r\\n    function tranferFromOtherChain(\\r\\n        uint256 _externalNonce,\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken,\\r\\n        bytes32 _initialChain,\\r\\n        bytes32 _targetChain,\\r\\n        uint256 _amount,\\r\\n        bytes calldata _sender,\\r\\n        bytes calldata _recipient,\\r\\n        TokenInfo calldata _tokenInfo\\r\\n    ) external {\\r\\n        enforceIsValidator(msg.sender);\\r\\n\\r\\n        require(\\r\\n            !registeredNonces[_initialChain][_externalNonce],\\r\\n            \\\"BridgeERC20: nonce already registered\\\"\\r\\n        );\\r\\n\\r\\n        registeredNonces[_initialChain][_externalNonce] = true;\\r\\n\\r\\n        bytes32 _currentChain = currentChain;\\r\\n\\r\\n        require(_initialChain != _currentChain, \\\"BridgeERC20: initialChain == currentChain\\\");\\r\\n\\r\\n        require(registeredChains[_initialChain], \\\"BridgeERC20: Initial chain not registered\\\");\\r\\n\\r\\n        if (_currentChain == _targetChain) {\\r\\n            // This is TARGET chain\\r\\n            address recipientAddress = abi.decode(_recipient, (address));\\r\\n\\r\\n            if (currentChain == _originalChain) {\\r\\n                // This is ORIGINAL chain\\r\\n                address originalTokenAddress = abi.decode(_originalToken, (address));\\r\\n                IERC20Metadata(originalTokenAddress).safeTransfer(recipientAddress, _amount);\\r\\n            } else {\\r\\n                // This is SECONDARY chain\\r\\n                address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n                if (!isIssuedTokenPublished(issuedTokenAddress))\\r\\n                    publishNewToken(_originalChain, _originalToken, _tokenInfo);\\r\\n                IIssuedERC20(issuedTokenAddress).mint(recipientAddress, _amount);\\r\\n            }\\r\\n\\r\\n            emit TransferFromOtherChain(\\r\\n                getTransferId(_externalNonce, _initialChain),\\r\\n                _externalNonce,\\r\\n                _originalChain,\\r\\n                _originalToken,\\r\\n                _initialChain,\\r\\n                _targetChain,\\r\\n                _amount,\\r\\n                _sender,\\r\\n                _recipient\\r\\n            );\\r\\n\\r\\n        } else {\\r\\n            // This is PROXY chain\\r\\n            require(isProxyChain, \\\"BridgeERC20: Only proxy bridge!\\\");\\r\\n\\r\\n            address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n            if (!isIssuedTokenPublished(issuedTokenAddress))\\r\\n                publishNewToken(_originalChain, _originalToken, _tokenInfo);\\r\\n\\r\\n            if (_targetChain == _originalChain) {\\r\\n                // BURN PROXY ISSUED TOKENS\\r\\n                IIssuedERC20(issuedTokenAddress).burn(address(this), _amount);\\r\\n            } else if(_initialChain == _originalChain) {\\r\\n                // LOCK PROXY ISSUED TOKENS\\r\\n                IIssuedERC20(issuedTokenAddress).mint(address(this), _amount);\\r\\n            }\\r\\n\\r\\n            bytes memory sender = _sender; // TODO: fix Error HH600\\r\\n            emit TransferToOtherChain(\\r\\n                getTransferId(_externalNonce, _initialChain),\\r\\n                _externalNonce,\\r\\n                _initialChain,\\r\\n                _originalChain,\\r\\n                _originalToken,\\r\\n                _targetChain,\\r\\n                _amount,\\r\\n                sender,\\r\\n                _recipient,\\r\\n                _tokenInfo.name,\\r\\n                _tokenInfo.symbol,\\r\\n                _tokenInfo.decimals\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isIssuedTokenPublished(address _issuedToken) public view returns (bool) {\\r\\n        return issuedTokens[_issuedToken];\\r\\n    }\\r\\n\\r\\n    function getIssuedTokenAddress(\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken\\r\\n    ) public view returns (address) {\\r\\n        bytes32 salt = keccak256(abi.encodePacked(_originalChain, _originalToken));\\r\\n        return\\r\\n            address(\\r\\n                uint160(\\r\\n                    uint(\\r\\n                        keccak256(\\r\\n                            abi.encodePacked(\\r\\n                                bytes1(0xff),\\r\\n                                address(this),\\r\\n                                salt,\\r\\n                                keccak256(abi.encodePacked(type(ERC1967ProxyCreate2).creationCode))\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function publishNewToken(\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken,\\r\\n        TokenInfo calldata _tokenInfo\\r\\n    ) internal returns (address) {\\r\\n        bytes32 salt = keccak256(abi.encodePacked(_originalChain, _originalToken));\\r\\n        ERC1967ProxyCreate2 issuedToken = new ERC1967ProxyCreate2{ salt: salt }();\\r\\n        issuedToken.init(\\r\\n            issuedTokenImplementation,\\r\\n            abi.encodeWithSelector(\\r\\n                IIssuedERC20.initialize.selector,\\r\\n                _originalChain,\\r\\n                _originalToken,\\r\\n                _tokenInfo.name,\\r\\n                _tokenInfo.symbol,\\r\\n                _tokenInfo.decimals\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address issuedTokenAddress = address(issuedToken);\\r\\n        issuedTokens[issuedTokenAddress] = true;\\r\\n        return issuedTokenAddress;\\r\\n    }\\r\\n\\r\\n    function getTranferId(uint256 _nonce, bytes32 _initialChain) external pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_nonce, _initialChain));\\r\\n    }\\r\\n\\r\\n    function balances(\\r\\n        bytes32 _originalChain,\\r\\n        bytes calldata _originalToken,\\r\\n        address _account\\r\\n    ) external view returns (uint256) {\\r\\n        if (currentChain == _originalChain)\\r\\n            return IERC20Metadata(abi.decode(_originalToken, (address))).balanceOf(_account);\\r\\n\\r\\n        address issuedTokenAddress = getIssuedTokenAddress(_originalChain, _originalToken);\\r\\n\\r\\n        if (!isIssuedTokenPublished(issuedTokenAddress)) return 0;\\r\\n        return IERC20Metadata(issuedTokenAddress).balanceOf(_account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4fa23f6fb6ed7dab92826433014393c80fc0314a7591815033ba5aa8e528139d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IIssuedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IIssuedERC20 {\\r\\n    function initialize(\\r\\n        bytes32 _originalChain,\\r\\n        bytes memory _originalToken,\\r\\n        string memory _originalTokenName,\\r\\n        string memory _originalTokenSymbol,\\r\\n        uint8 _originalTokenDecimals\\r\\n    ) external;\\r\\n\\r\\n    function getOriginalTokenInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32, bytes memory, string memory, string memory, uint8);\\r\\n\\r\\n    function mint(address _recipient, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _from, uint256 _amount) external;\\r\\n\\r\\n    function permissionedTransferFrom(address from, address to, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0091a00f538689f28cce4ea2a23a4830f7c8c07112bcce61a4ad3cc1c83fb3b1\",\"license\":\"UNLICENSED\"},\"contracts/utils/ERC1967ProxyCreate2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { Proxy } from \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\r\\nimport { ERC1967Upgrade } from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\r\\n\\r\\ncontract ERC1967ProxyCreate2 is Proxy, ERC1967Upgrade {\\r\\n    /**\\r\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\r\\n     *\\r\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\r\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\r\\n     */\\r\\n    bool internal isInit;\\r\\n\\r\\n    function init(address _logic, bytes memory _data) external {\\r\\n        require(!isInit, \\\"ERC1967ProxyCreate2: already init\\\");\\r\\n        _upgradeToAndCall(_logic, _data, false);\\r\\n        isInit = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _implementation() internal view virtual override returns (address impl) {\\r\\n        return ERC1967Upgrade._getImplementation();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf9d383bb46a39bfdc26b951d92e4025151a43208d2dce1b673941e239dc6cab5\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60406080815234620001915762002338803803806200001e81620001ac565b928339810160a0828203126200019157815191602080820151908115158092036200019157828601516001600160401b0390818111620001915784019480601f8701121562000191578551918211620001965760059582871b90848062000087818501620001ac565b809681520192820101928311620001915784809101915b838310620001805750505050620000c66080620000be60608701620001d2565b9501620001d2565b9343600855600196875560ff199360ff856003541691161760035560018060a01b038060018060a01b031992168260075416176007556000951690855416178455805194845b868110620001235788516121509081620001e88239f35b82518110156200016c5780821b830184015186526004845288862080548616891790556000198114620001585787016200010c565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b86526032600452602486fd5b82518152918101918591016200009e565b600080fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176200019657604052565b51906001600160a01b0382168203620001915756fe608080604052600436101561001357600080fd5b6000803560e01c9182630c1ab73014610a5357508163101c575a14610a2b57816311921fad146109fd5781631327d3d8146109bd57816328177228146109625781633a5381b51461093c5781633da998fa1461091f578163457322b91461081a57816348b4fa58146108fd5781635d05125b146108e05781639a573d5d146108905781639d95a79214610858578163a0b498a41461081a578163affed0e0146107fd578163b00a0be6146107b8578163c4b2a23f146100f957508063e3cd51e5146100f05763f7e03bad146100e8575b600080fd5b6100e3610fa8565b506100e3610fa8565b346107b557600319610120368201126105d0576001600160401b03906044358281116107b15761012d903690600401610f7b565b60c4358481116107ad57610145903690600401610f7b565b949060e4358281116107a95761015f903690600401610f7b565b95909261010435116107a95760609061010435360301126103d55761018333610fca565b6064358752600660205260408720600435885260205260ff604088205416610756576064358752600660205260408720600435885260205260408720600160ff1982541617905560015480606435146106ff576064358852600460205260ff604089205416156106a85760843503610402576001600160a01b03610209838701846113ce565b16876024356001541460001461031a57509461030661031493926102aa6102977f93ed05a8c697097712ecd9a75d512ed9bd401c4d006f5050685cfe71a6371a25996102a560018060a01b036102618b8d018d6113ce565b60405163a9059cbb60e01b60208201526001600160a01b03909416602485015260a4356044850152929392169183906064820190565b03601f198101845283611085565b6111e5565b6102b86064356004356110a6565b986102e06040519889986004358a5260243560208b01526101008060408c01528a01916111c4565b916064356060890152608435608089015260a43560a089015287830360c08901526111c4565b9184830360e08601526111c4565b0390a280f35b906001600160a01b0361033086886024356113ed565b16808352600560205260ff604084205416156103e8575b803b156103e4576040516340c10f1960e01b81526001600160a01b0392909216600483015260a435602483015282908290604490829084905af180156103d9576103bd575b5050907f93ed05a8c697097712ecd9a75d512ed9bd401c4d006f5050685cfe71a6371a2594610306610314936102aa565b6103c990939293611026565b6103d55790868861038c565b8680fd5b6040513d84823e3d90fd5b8280fd5b6103fc6101043560040187896024356114b5565b50610347565b919293909460ff60035416156106635786906001600160a01b0361042986886024356113ed565b16808352600560205260ff60408420541615610649575b608435602435036105df57803b156103e457604051632770a7eb60e21b815230600482015260a43560248201529083908290604490829084905af19081156105d45783916105bc575b50505b610495816110da565b936104a36040519586611085565b81855236828201116103e457819060208601378301602001526104ca6064356004356110a6565b94610104356004016104dc818061138e565b9091610104356024016104ee9161138e565b93909461010435604401610501906113c0565b96604051998a996004358b5260643560208c015260243560408c01526101608060608d01528b0190610532926111c4565b60843560808b015260a43560a08b015289810360c08b01526105539161119f565b9088820360e08a0152610565926111c4565b90868203610100880152610578926111c4565b9084820361012086015261058b926111c4565b9060ff16610140830152037fb7769b1013165b15c4e57ac1d4419b6798fd9188ac4f25bf32b2143946bbb81491a280f35b6105c590611026565b6105d0578189610489565b5080fd5b6040513d85823e3d90fd5b602435606435146105f1575b5061048c565b803b156103e4576040516340c10f1960e01b815230600482015260a43560248201529083908290604490829084905af19081156105d4578391610635575b506105eb565b61063e90611026565b6105d057818961062f565b61065d6101043560040187896024356114b5565b50610440565b60405162461bcd60e51b815260206004820152601f60248201527f42726964676545524332303a204f6e6c792070726f78792062726964676521006044820152606490fd5b60405162461bcd60e51b815260206004820152602960248201527f42726964676545524332303a20496e697469616c20636861696e206e6f7420726044820152681959da5cdd195c995960ba1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602960248201527f42726964676545524332303a20696e697469616c436861696e203d3d206375726044820152683932b73a21b430b4b760b91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f42726964676545524332303a206e6f6e636520616c72656164792072656769736044820152641d195c995960da1b6064820152608490fd5b8780fd5b8580fd5b8380fd5b80fd5b346107b55760403660031901126107b5576024358015158091036105d0576107df33610fca565b60043582526004602052604082209060ff8019835416911617905580f35b346107b557806003193601126107b5576020600254604051908152f35b346107b55760203660031901126107b55760209060ff906040906001600160a01b03610844610f65565b168152600584522054166040519015158152f35b346107b55760403660031901126107b55760ff6040602092600435815260068452818120602435825284522054166040519015158152f35b346107b55760403660031901126107b557602435906001600160401b0382116107b55760206108ce6108c53660048601610f7b565b906004356113ed565b6040516001600160a01b039091168152f35b346107b557806003193601126107b5576020600854604051908152f35b346107b557806003193601126107b557602060ff600354166040519015158152f35b346107b557806003193601126107b5576020600154604051908152f35b346107b557806003193601126107b557546040516001600160a01b039091168152602090f35b346107b55760603660031901126107b5576024356001600160401b0381116105d057610992903690600401610f7b565b906044356001600160a01b03811681036100e3576020926109b592600435611656565b604051908152f35b346107b55760203660031901126107b5576109d6610f65565b6109df33610fca565b81546001600160a01b0319166001600160a01b039190911617815580f35b346107b55760203660031901126107b55760ff60406020926004358152600484522054166040519015158152f35b346107b557806003193601126107b5576007546040516001600160a01b039091168152602090f35b346105d05760803660031901126105d057610a6c610f65565b6001600160401b03606435818111610f6157610a8c903690600401610f7b565b919093602435908115610f1f5750604435908187526020946004865260ff60408920541615610ed0576001600160a01b0316808852600586526040882054600154600254929892969160ff166000198814610ebc576001880160025515610d4457604051634c4f708d60e11b8152948a866004818d5afa948515610d39578b809b81978299839b8492610c94575b50909a9998929190508d851480610c88575b15610c2257803b156105d05760405163ab1a63cd60e01b8152336004820152306024820152604481018590529082908290606490829084905af180156103d957610c0a575b50505b610b7e848b6110a6565b9b60405194338d8701528c8652610b948661104f565b6040519c8d9c8d528c015260408b01526101608060608c01528a01610bb89161119f565b9160808a015260a089015287810360c0890152610bd49161119f565b9086820360e0880152610be6926111c4565b848103610100860152610bf89161119f565b83810361012085015261058b9161119f565b610c1390611026565b610c1e578c8e610b71565b8c80fd5b8091503b15610c8457604051632770a7eb60e21b815233600482015260248101849052908e908290604490829084905af18015610c7757610c64575b50610b74565b610c70909d919d611026565b9b8d610c5e565b8e604051903d90823e3d90fd5b8d80fd5b5060ff60035416610b2c565b99509950509850509099503d808c883e610cae8188611085565b86019060a087830312610d35578651978c8b8901518881116105d057890184601f820112156105d05784818e610ce693519101611118565b9160408a01518981116103e45785610cff918c0161114f565b9860608b01519081116103e45760808f96610d1f90610d26938e0161114f565b9b01611191565b9a9d8e93999a9b919293610b1a565b8b80fd5b6040513d8d823e3d90fd5b80989550976040518689820152888152610d5d8161104f565b946040516306fdde0360e01b81528b816004818b5afa8c9181610e9f575b50610e995750604051610d8d8161106a565b8b8152945b6040516395d89b4160e01b81528c80826004818d5afa90918282610e74575b5050610e6e5750604051610dc48161106a565b8c8152965b60405163313ce56760e01b81528d8c826004818e5afa909181610e33575b50610e295750610e246001995b6040516323b872dd60e01b8e82015233602482015230604482015260648101859052906102a58260848101610297565b610b74565b610e249099610df4565b9091508c81813d8311610e67575b610e4b8183611085565b81010312610e6357610e5c90611191565b908f610de7565b8e80fd5b503d610e41565b96610dc9565b610e919293503d8091833e610e898183611085565b81019061116c565b908e8e610db1565b94610d92565b610eb59192508d3d8091833e610e898183611085565b908d610d7b565b634e487b7160e01b8b52601160045260248bfd5b60405162461bcd60e51b815260048101879052602160248201527f42726964676545524332303a20636861696e206e6f74207265676973746572656044820152601960fa1b6064820152608490fd5b62461bcd60e51b815260206004820152601860248201527f42726964676545524332303a205f616d6f756e74203c203000000000000000006044820152606490fd5b8480fd5b600435906001600160a01b03821682036100e357565b9181601f840112156100e3578235916001600160401b0383116100e357602083818601950101116100e357565b50346100e35760403660031901126100e35760206109b56024356004356110a6565b6000546001600160a01b03908116911603610fe157565b60405162461bcd60e51b815260206004820152601c60248201527f42726964676545524332303a204f6e6c792076616c696461746f7221000000006044820152606490fd5b6001600160401b03811161103957604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761103957604052565b602081019081106001600160401b0382111761103957604052565b90601f801991011681019081106001600160401b0382111761103957604052565b906040519060208201928352604082015260408152606081018181106001600160401b038211176110395760405251902090565b6001600160401b03811161103957601f01601f191660200190565b60005b8381106111085750506000910152565b81810151838201526020016110f8565b90929192611125816110da565b916111336040519384611085565b8294828452828201116100e357602061114d9301906110f5565b565b9080601f830112156100e357815161116992602001611118565b90565b906020828203126100e35781516001600160401b0381116100e357611169920161114f565b519060ff821682036100e357565b906020916111b8815180928185528580860191016110f5565b601f01601f1916010190565b908060209392818452848401376000828201840152601f01601f1916010190565b60018060a01b0316906112626040516111fd8161104f565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af13d156112ed573d91611247836110da565b926112556040519485611085565b83523d868885013e6112f1565b805180611270575b50505050565b818491810103126105d057820151908115918215036107b557506112965780808061126a565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6060915b919290156113535750815115611305575090565b3b1561130e5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156113665750805190602001fd5b60405162461bcd60e51b81526020600482015290819061138a90602483019061119f565b0390fd5b903590601e19813603018212156100e357018035906001600160401b0382116100e3576020019181360383136100e357565b3560ff811681036100e35790565b908160209103126100e357356001600160a01b03811681036100e35790565b91909160409161141e8380518381946020988984019788528484013781016000838201520386810184520182611085565b519020906104d1815161143385830182611085565b8181528481019161177983396114668584518093611459838301968792519283916110f5565b8101038084520182611085565b51902081519384019260ff60f81b84523060601b6021860152603585015260558401526055835260808301908382106001600160401b038311176110395752905190206001600160a01b031690565b909291604092835192602084016000948282528488888301376114e987828781018983820152036020810184520182611085565b51902085516104d1808201908282106001600160401b0383111761164257908291611c4a8339039086f595861561163857908560ff6115ae6115c3948360018060a01b03809c169b600754169761159f61158b611546838061138e565b919095611562611559602087018761138e565b979096016113c0565b99519d8e9b8c602063589c037d60e11b91015260248d015260a060448d015260c48c01916111c4565b9060231995868b84030160648c01526111c4565b928784030160848801526111c4565b911660a483015203601f198101845283611085565b843b156103e4576115f69183918551938492839263c0d91eaf60e01b84526004840152876024840152604483019061119f565b038183885af1801561162e5761161f575b50828152600560205220805460ff1916600117905590565b61162890611026565b38611607565b83513d84823e3d90fd5b85513d86823e3d90fd5b634e487b7160e01b88526041600452602488fd5b9092918160015414611705576001600160a01b039384926116789291906113ed565b1690600092828452600560205260ff604085205416156116ff57602460209260405194859384926370a0823160e01b84521660048301525afa9182156116f35780926116c357505090565b9091506020823d82116116eb575b816116de60209383611085565b810103126107b557505190565b3d91506116d1565b604051903d90823e3d90fd5b50505090565b91926020926001600160a01b039250602491839161172691908101906113ce565b169360405194859384926370a0823160e01b84521660048301525afa90811561176c57600091611754575090565b906020823d82116116eb57816116de60209383611085565b6040513d6000823e3d90fdfe60808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c6343000811003360808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c63430008110033a26469706673582212203de2096930c7f0819969f7a56a5e635325244dae6b8ae79b0e12744fb9c2491a64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b6000803560e01c9182630c1ab73014610a5357508163101c575a14610a2b57816311921fad146109fd5781631327d3d8146109bd57816328177228146109625781633a5381b51461093c5781633da998fa1461091f578163457322b91461081a57816348b4fa58146108fd5781635d05125b146108e05781639a573d5d146108905781639d95a79214610858578163a0b498a41461081a578163affed0e0146107fd578163b00a0be6146107b8578163c4b2a23f146100f957508063e3cd51e5146100f05763f7e03bad146100e8575b600080fd5b6100e3610fa8565b506100e3610fa8565b346107b557600319610120368201126105d0576001600160401b03906044358281116107b15761012d903690600401610f7b565b60c4358481116107ad57610145903690600401610f7b565b949060e4358281116107a95761015f903690600401610f7b565b95909261010435116107a95760609061010435360301126103d55761018333610fca565b6064358752600660205260408720600435885260205260ff604088205416610756576064358752600660205260408720600435885260205260408720600160ff1982541617905560015480606435146106ff576064358852600460205260ff604089205416156106a85760843503610402576001600160a01b03610209838701846113ce565b16876024356001541460001461031a57509461030661031493926102aa6102977f93ed05a8c697097712ecd9a75d512ed9bd401c4d006f5050685cfe71a6371a25996102a560018060a01b036102618b8d018d6113ce565b60405163a9059cbb60e01b60208201526001600160a01b03909416602485015260a4356044850152929392169183906064820190565b03601f198101845283611085565b6111e5565b6102b86064356004356110a6565b986102e06040519889986004358a5260243560208b01526101008060408c01528a01916111c4565b916064356060890152608435608089015260a43560a089015287830360c08901526111c4565b9184830360e08601526111c4565b0390a280f35b906001600160a01b0361033086886024356113ed565b16808352600560205260ff604084205416156103e8575b803b156103e4576040516340c10f1960e01b81526001600160a01b0392909216600483015260a435602483015282908290604490829084905af180156103d9576103bd575b5050907f93ed05a8c697097712ecd9a75d512ed9bd401c4d006f5050685cfe71a6371a2594610306610314936102aa565b6103c990939293611026565b6103d55790868861038c565b8680fd5b6040513d84823e3d90fd5b8280fd5b6103fc6101043560040187896024356114b5565b50610347565b919293909460ff60035416156106635786906001600160a01b0361042986886024356113ed565b16808352600560205260ff60408420541615610649575b608435602435036105df57803b156103e457604051632770a7eb60e21b815230600482015260a43560248201529083908290604490829084905af19081156105d45783916105bc575b50505b610495816110da565b936104a36040519586611085565b81855236828201116103e457819060208601378301602001526104ca6064356004356110a6565b94610104356004016104dc818061138e565b9091610104356024016104ee9161138e565b93909461010435604401610501906113c0565b96604051998a996004358b5260643560208c015260243560408c01526101608060608d01528b0190610532926111c4565b60843560808b015260a43560a08b015289810360c08b01526105539161119f565b9088820360e08a0152610565926111c4565b90868203610100880152610578926111c4565b9084820361012086015261058b926111c4565b9060ff16610140830152037fb7769b1013165b15c4e57ac1d4419b6798fd9188ac4f25bf32b2143946bbb81491a280f35b6105c590611026565b6105d0578189610489565b5080fd5b6040513d85823e3d90fd5b602435606435146105f1575b5061048c565b803b156103e4576040516340c10f1960e01b815230600482015260a43560248201529083908290604490829084905af19081156105d4578391610635575b506105eb565b61063e90611026565b6105d057818961062f565b61065d6101043560040187896024356114b5565b50610440565b60405162461bcd60e51b815260206004820152601f60248201527f42726964676545524332303a204f6e6c792070726f78792062726964676521006044820152606490fd5b60405162461bcd60e51b815260206004820152602960248201527f42726964676545524332303a20496e697469616c20636861696e206e6f7420726044820152681959da5cdd195c995960ba1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602960248201527f42726964676545524332303a20696e697469616c436861696e203d3d206375726044820152683932b73a21b430b4b760b91b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f42726964676545524332303a206e6f6e636520616c72656164792072656769736044820152641d195c995960da1b6064820152608490fd5b8780fd5b8580fd5b8380fd5b80fd5b346107b55760403660031901126107b5576024358015158091036105d0576107df33610fca565b60043582526004602052604082209060ff8019835416911617905580f35b346107b557806003193601126107b5576020600254604051908152f35b346107b55760203660031901126107b55760209060ff906040906001600160a01b03610844610f65565b168152600584522054166040519015158152f35b346107b55760403660031901126107b55760ff6040602092600435815260068452818120602435825284522054166040519015158152f35b346107b55760403660031901126107b557602435906001600160401b0382116107b55760206108ce6108c53660048601610f7b565b906004356113ed565b6040516001600160a01b039091168152f35b346107b557806003193601126107b5576020600854604051908152f35b346107b557806003193601126107b557602060ff600354166040519015158152f35b346107b557806003193601126107b5576020600154604051908152f35b346107b557806003193601126107b557546040516001600160a01b039091168152602090f35b346107b55760603660031901126107b5576024356001600160401b0381116105d057610992903690600401610f7b565b906044356001600160a01b03811681036100e3576020926109b592600435611656565b604051908152f35b346107b55760203660031901126107b5576109d6610f65565b6109df33610fca565b81546001600160a01b0319166001600160a01b039190911617815580f35b346107b55760203660031901126107b55760ff60406020926004358152600484522054166040519015158152f35b346107b557806003193601126107b5576007546040516001600160a01b039091168152602090f35b346105d05760803660031901126105d057610a6c610f65565b6001600160401b03606435818111610f6157610a8c903690600401610f7b565b919093602435908115610f1f5750604435908187526020946004865260ff60408920541615610ed0576001600160a01b0316808852600586526040882054600154600254929892969160ff166000198814610ebc576001880160025515610d4457604051634c4f708d60e11b8152948a866004818d5afa948515610d39578b809b81978299839b8492610c94575b50909a9998929190508d851480610c88575b15610c2257803b156105d05760405163ab1a63cd60e01b8152336004820152306024820152604481018590529082908290606490829084905af180156103d957610c0a575b50505b610b7e848b6110a6565b9b60405194338d8701528c8652610b948661104f565b6040519c8d9c8d528c015260408b01526101608060608c01528a01610bb89161119f565b9160808a015260a089015287810360c0890152610bd49161119f565b9086820360e0880152610be6926111c4565b848103610100860152610bf89161119f565b83810361012085015261058b9161119f565b610c1390611026565b610c1e578c8e610b71565b8c80fd5b8091503b15610c8457604051632770a7eb60e21b815233600482015260248101849052908e908290604490829084905af18015610c7757610c64575b50610b74565b610c70909d919d611026565b9b8d610c5e565b8e604051903d90823e3d90fd5b8d80fd5b5060ff60035416610b2c565b99509950509850509099503d808c883e610cae8188611085565b86019060a087830312610d35578651978c8b8901518881116105d057890184601f820112156105d05784818e610ce693519101611118565b9160408a01518981116103e45785610cff918c0161114f565b9860608b01519081116103e45760808f96610d1f90610d26938e0161114f565b9b01611191565b9a9d8e93999a9b919293610b1a565b8b80fd5b6040513d8d823e3d90fd5b80989550976040518689820152888152610d5d8161104f565b946040516306fdde0360e01b81528b816004818b5afa8c9181610e9f575b50610e995750604051610d8d8161106a565b8b8152945b6040516395d89b4160e01b81528c80826004818d5afa90918282610e74575b5050610e6e5750604051610dc48161106a565b8c8152965b60405163313ce56760e01b81528d8c826004818e5afa909181610e33575b50610e295750610e246001995b6040516323b872dd60e01b8e82015233602482015230604482015260648101859052906102a58260848101610297565b610b74565b610e249099610df4565b9091508c81813d8311610e67575b610e4b8183611085565b81010312610e6357610e5c90611191565b908f610de7565b8e80fd5b503d610e41565b96610dc9565b610e919293503d8091833e610e898183611085565b81019061116c565b908e8e610db1565b94610d92565b610eb59192508d3d8091833e610e898183611085565b908d610d7b565b634e487b7160e01b8b52601160045260248bfd5b60405162461bcd60e51b815260048101879052602160248201527f42726964676545524332303a20636861696e206e6f74207265676973746572656044820152601960fa1b6064820152608490fd5b62461bcd60e51b815260206004820152601860248201527f42726964676545524332303a205f616d6f756e74203c203000000000000000006044820152606490fd5b8480fd5b600435906001600160a01b03821682036100e357565b9181601f840112156100e3578235916001600160401b0383116100e357602083818601950101116100e357565b50346100e35760403660031901126100e35760206109b56024356004356110a6565b6000546001600160a01b03908116911603610fe157565b60405162461bcd60e51b815260206004820152601c60248201527f42726964676545524332303a204f6e6c792076616c696461746f7221000000006044820152606490fd5b6001600160401b03811161103957604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761103957604052565b602081019081106001600160401b0382111761103957604052565b90601f801991011681019081106001600160401b0382111761103957604052565b906040519060208201928352604082015260408152606081018181106001600160401b038211176110395760405251902090565b6001600160401b03811161103957601f01601f191660200190565b60005b8381106111085750506000910152565b81810151838201526020016110f8565b90929192611125816110da565b916111336040519384611085565b8294828452828201116100e357602061114d9301906110f5565b565b9080601f830112156100e357815161116992602001611118565b90565b906020828203126100e35781516001600160401b0381116100e357611169920161114f565b519060ff821682036100e357565b906020916111b8815180928185528580860191016110f5565b601f01601f1916010190565b908060209392818452848401376000828201840152601f01601f1916010190565b60018060a01b0316906112626040516111fd8161104f565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af13d156112ed573d91611247836110da565b926112556040519485611085565b83523d868885013e6112f1565b805180611270575b50505050565b818491810103126105d057820151908115918215036107b557506112965780808061126a565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6060915b919290156113535750815115611305575090565b3b1561130e5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156113665750805190602001fd5b60405162461bcd60e51b81526020600482015290819061138a90602483019061119f565b0390fd5b903590601e19813603018212156100e357018035906001600160401b0382116100e3576020019181360383136100e357565b3560ff811681036100e35790565b908160209103126100e357356001600160a01b03811681036100e35790565b91909160409161141e8380518381946020988984019788528484013781016000838201520386810184520182611085565b519020906104d1815161143385830182611085565b8181528481019161177983396114668584518093611459838301968792519283916110f5565b8101038084520182611085565b51902081519384019260ff60f81b84523060601b6021860152603585015260558401526055835260808301908382106001600160401b038311176110395752905190206001600160a01b031690565b909291604092835192602084016000948282528488888301376114e987828781018983820152036020810184520182611085565b51902085516104d1808201908282106001600160401b0383111761164257908291611c4a8339039086f595861561163857908560ff6115ae6115c3948360018060a01b03809c169b600754169761159f61158b611546838061138e565b919095611562611559602087018761138e565b979096016113c0565b99519d8e9b8c602063589c037d60e11b91015260248d015260a060448d015260c48c01916111c4565b9060231995868b84030160648c01526111c4565b928784030160848801526111c4565b911660a483015203601f198101845283611085565b843b156103e4576115f69183918551938492839263c0d91eaf60e01b84526004840152876024840152604483019061119f565b038183885af1801561162e5761161f575b50828152600560205220805460ff1916600117905590565b61162890611026565b38611607565b83513d84823e3d90fd5b85513d86823e3d90fd5b634e487b7160e01b88526041600452602488fd5b9092918160015414611705576001600160a01b039384926116789291906113ed565b1690600092828452600560205260ff604085205416156116ff57602460209260405194859384926370a0823160e01b84521660048301525afa9182156116f35780926116c357505090565b9091506020823d82116116eb575b816116de60209383611085565b810103126107b557505190565b3d91506116d1565b604051903d90823e3d90fd5b50505090565b91926020926001600160a01b039250602491839161172691908101906113ce565b169360405194859384926370a0823160e01b84521660048301525afa90811561176c57600091611754575090565b906020823d82116116eb57816116de60209383611085565b6040513d6000823e3d90fdfe60808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c6343000811003360808060405234610016576104b5908161001c8239f35b600080fdfe6080604052600436101561002c575b361561001f575b61001d610147565b005b610027610147565b610015565b6000803560e01c63c0d91eaf14610043575061000e565b346100cf5760403660031901126100cf576004356001600160a01b03811681036100c75760243567ffffffffffffffff81116100cb57366023820112156100cb578060040135918361009c6100978561011c565b6100e9565b9284845236602486830101116100c757846100c4956024602093018387013784010152610194565b80f35b5080fd5b8280fd5b80fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761010f57604052565b6101176100d2565b604052565b60209067ffffffffffffffff811161013a575b601f01601f19160190565b6101426100d2565b61012f565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610190573d90f35b3d90fd5b60ff600054166102aa57803b1561024f577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610247575b61022d575b505061022b600160ff196000541617600055565b565b61023f916102396102f9565b91610361565b503880610217565b506000610212565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f4552433139363750726f7879437265617465323a20616c726561647920696e696044820152601d60fa1b6064820152608490fd5b604051906060820182811067ffffffffffffffff821117610354575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b61035c6100d2565b610315565b6000806103969493602081519101845af43d15610399573d916103866100978461011c565b9283523d6000602085013e6103ed565b90565b6060916103ed565b156103a857565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561040d5750815115610401575090565b610396903b15156103a1565b8251909150156104205750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610466575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061044356fea26469706673582212204dde7cc5adcf980b8e42581204cfa621f554155a4614ece46fe895090c92f2d464736f6c63430008110033a26469706673582212203de2096930c7f0819969f7a56a5e635325244dae6b8ae79b0e12744fb9c2491a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1215,
        "contract": "contracts/BridgeERC20.sol:BridgeERC20",
        "label": "validator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1217,
        "contract": "contracts/BridgeERC20.sol:BridgeERC20",
        "label": "currentChain",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 1219,
        "contract": "contracts/BridgeERC20.sol:BridgeERC20",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1221,
        "contract": "contracts/BridgeERC20.sol:BridgeERC20",
        "label": "isProxyChain",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1225,
        "contract": "contracts/BridgeERC20.sol:BridgeERC20",
        "label": "registeredChains",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1229,
        "contract": "contracts/BridgeERC20.sol:BridgeERC20",
        "label": "issuedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1235,
        "contract": "contracts/BridgeERC20.sol:BridgeERC20",
        "label": "registeredNonces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1237,
        "contract": "contracts/BridgeERC20.sol:BridgeERC20",
        "label": "issuedTokenImplementation",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1239,
        "contract": "contracts/BridgeERC20.sol:BridgeERC20",
        "label": "initBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}