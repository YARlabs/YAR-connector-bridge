import { BRIDGES_ADDRESSES } from 'configs';
import {readFile, writeFile} from 'node:fs/promises'
import path from "path";
    
async function main() {
    async function getAddress(p: string): Promise<string | undefined> {
        p = path.resolve(__dirname, p)
        try {
            const data = JSON.parse(await readFile(p, {encoding: 'utf-8'}));
            return data['address']
        } catch(e) {
            console.log(e)
            return undefined
        }
    }

    const addressFilePath =  path.resolve(__dirname,'../../../packages/configs/src/bridges_addresses.ts')
    await writeFile(addressFilePath, `// Do not modify manually, this file is generated by the export_deployments_addresses script
export const BRIDGES_ADDRESSES = {
  erc20: {
    yarTest: "${await getAddress('../deployments/yarTest/YarBridgeERC20.json') ?? BRIDGES_ADDRESSES.erc20.yarTest}",

    polygonTest: "${await getAddress('../deployments/polygonTest/PolygonBridgeERC20.json') ?? BRIDGES_ADDRESSES.erc20.polygonTest}",
  
    binanceTest: "${await getAddress('../deployments/binanceTest/BinanceBridgeERC20.json') ?? BRIDGES_ADDRESSES.erc20.binanceTest}",
  
    ethereumTest: "${await getAddress('../deployments/ethereumTest/EthereumBridgeERC20.json') ?? BRIDGES_ADDRESSES.erc20.ethereumTest}",
  
    chaosSkaleTest: "${await getAddress('../deployments/chaosSkaleTest/SkaleBridgeERC20.json') ?? BRIDGES_ADDRESSES.erc20.chaosSkaleTest}",

    optimismTest: "${await getAddress('../deployments/optimismTest/OptimismBridgeERC20.json') ?? BRIDGES_ADDRESSES.erc20.optimismTest}",
    
    arbitrumTest: "${await getAddress('../deployments/arbitrumTest/ArbitrumBridgeERC20.json') ?? BRIDGES_ADDRESSES.erc20.arbitrumTest}",
    
    avaxTest: "${await getAddress('../deployments/avaxTest/AvaxBridgeERC20.json') ?? BRIDGES_ADDRESSES.erc20.avaxTest}",
    
    baseTest: "${await getAddress('../deployments/baseTest/BaseBridgeERC20.json') ?? BRIDGES_ADDRESSES.erc20.baseTest}",
  },
  erc721: {
    yarTest: "${await getAddress('../deployments/yarTest/YarBridgeERC721.json') ?? BRIDGES_ADDRESSES.erc721.yarTest}",

    polygonTest: "${await getAddress('../deployments/polygonTest/PolygonBridgeERC721.json') ?? BRIDGES_ADDRESSES.erc721.polygonTest}",
  
    binanceTest: "${await getAddress('../deployments/binanceTest/BinanceBridgeERC721.json') ?? BRIDGES_ADDRESSES.erc721.binanceTest}",
  
    ethereumTest: "${await getAddress('../deployments/ethereumTest/EthereumBridgeERC721.json') ?? BRIDGES_ADDRESSES.erc721.ethereumTest}",
  
    chaosSkaleTest: "${await getAddress('../deployments/chaosSkaleTest/SkaleBridgeERC721.json') ?? BRIDGES_ADDRESSES.erc721.chaosSkaleTest}",

    optimismTest: "${await getAddress('../deployments/optimismTest/OptimismBridgeERC721.json') ?? BRIDGES_ADDRESSES.erc721.optimismTest}",
    
    arbitrumTest: "${await getAddress('../deployments/arbitrumTest/ArbitrumBridgeERC721.json') ?? BRIDGES_ADDRESSES.erc721.arbitrumTest}",
    
    avaxTest: "${await getAddress('../deployments/avaxTest/AvaxBridgeERC721.json') ?? BRIDGES_ADDRESSES.erc721.avaxTest}",
    
    baseTest: "${await getAddress('../deployments/baseTest/BaseBridgeERC721.json') ?? BRIDGES_ADDRESSES.erc721.baseTest}",
  },
  erc1155: {
    yarTest: "${await getAddress('../deployments/yarTest/YarBridgeERC1155.json') ?? BRIDGES_ADDRESSES.erc1155.yarTest}",

    polygonTest: "${await getAddress('../deployments/polygonTest/PolygonBridgeERC1155.json') ?? BRIDGES_ADDRESSES.erc1155.polygonTest}",
  
    binanceTest: "${await getAddress('../deployments/binanceTest/BinanceBridgeERC1155.json') ?? BRIDGES_ADDRESSES.erc1155.binanceTest}",
  
    ethereumTest: "${await getAddress('../deployments/ethereumTest/EthereumBridgeERC1155.json') ?? BRIDGES_ADDRESSES.erc1155.ethereumTest}",
  
    chaosSkaleTest: "${await getAddress('../deployments/chaosSkaleTest/SkaleBridgeERC1155.json') ?? BRIDGES_ADDRESSES.erc1155.chaosSkaleTest}",

    optimismTest: "${await getAddress('../deployments/optimismTest/OptimismBridgeERC1155.json') ?? BRIDGES_ADDRESSES.erc1155.optimismTest}",
    
    arbitrumTest: "${await getAddress('../deployments/arbitrumTest/ArbitrumBridgeERC1155.json') ?? BRIDGES_ADDRESSES.erc1155.arbitrumTest}",
    
    avaxTest: "${await getAddress('../deployments/avaxTest/AvaxBridgeERC1155.json') ?? BRIDGES_ADDRESSES.erc1155.avaxTest}",
    
    baseTest: "${await getAddress('../deployments/baseTest/BaseBridgeERC1155.json') ?? BRIDGES_ADDRESSES.erc1155.baseTest}",
  },
 };`)    
}
main()
